const std = @import("std");
const types = @import("../types.zig");
const math = @import("../math.zig");
const log2_data = @import("log2_data.zig");
const exp2_data = @import("exp2_data.zig");
const pow_data = @import("pow_data.zig");
const exp_data = @import("exp_data.zig");
const ldbl128 = @import("ldbl128.zig");
const Coerce = types.Coerce;
const EnsureFloat = types.EnsureFloat;
const cast = types.cast;

pub inline fn pow(x: anytype, y: anytype) EnsureFloat(Coerce(@TypeOf(x), @TypeOf(y))) {
    comptime if (!types.isFixedPrecision(@TypeOf(x)) or types.isComplex(@TypeOf(x)))
        @compileError("x must be an int or float");

    comptime if (!types.isFixedPrecision(@TypeOf(y)) or types.isComplex(@TypeOf(y)))
        @compileError("y must be an int or float");

    switch (types.numericType(@TypeOf(x))) {
        .int => {
            switch (types.numericType(@TypeOf(y))) {
                .int => @compileError("Power of two integers not implemented yet"),
                .float => return pow(cast(Coerce(@TypeOf(x), @TypeOf(y)), x, .{}), cast(Coerce(@TypeOf(x), @TypeOf(y)), y, .{})),
                else => unreachable,
            }
        },
        .float => {
            switch (types.numericType(@TypeOf(x))) {
                .int => return pow(cast(Coerce(@TypeOf(x), @TypeOf(y)), x, .{}), cast(Coerce(@TypeOf(x), @TypeOf(y)), y, .{})),
                .float => switch (Coerce(@TypeOf(x), @TypeOf(y))) {
                    f16 => return cast(f16, pow32(cast(f32, x, .{}), cast(f32, y, .{})), .{}),
                    f32 => {
                        // glibc/sysdeps/ieee754/flt-32/e_powf.c
                        return pow32(cast(f32, x, .{}), cast(f32, y, .{}));
                    },
                    f64 => {
                        // glibc/sysdeps/ieee754/dbl-64/e_pow.c
                        return pow64(cast(f64, x, .{}), cast(f64, y, .{}));
                    },
                    f80 => return cast(f80, pow128(cast(f128, x, .{}), cast(f128, y, .{})), .{}),
                    f128 => {
                        // glibc/sysdeps/ieee754/ldbl-128/e_powl.c
                        return pow128(cast(f128, x, .{}), cast(f128, y, .{}));
                    },
                    else => unreachable,
                },
                else => unreachable,
            }
        },
        else => unreachable,
    }
}

// Subnormal input is normalized so ix has negative biased exponent.
// Output is multiplied by N (POWF_SCALE) if TOINT_INTRINICS is set.
inline fn log2_inline32(ix: u32) f64 {
    // x = 2^k z; where z is in range [0x3f330000,2*0x3f330000] and exact.
    // The range is split into N subintervals.
    // The ith subinterval contains z and c is near its center.
    const tmp: u32 = ix -% 0x3f330000;
    const i: i32 = cast(i32, @mod(tmp >> 19, 16), .{});
    const top: u32 = tmp & 0xff800000;
    const iz: u32 = ix -% top;
    var k: i32 = undefined;
    {
        @setRuntimeSafety(false);
        k = @as(i32, @intCast(top)) >> 23; // arithmetic shift
    }
    const invc: f64 = log2_data.tab_32[@intCast(i)].invc;
    const logc: f64 = log2_data.tab_32[@intCast(i)].logc;
    const z: f64 = cast(f64, @as(f32, @bitCast(iz)), .{});

    // log2(x) = log1p(z/c-1)/ln2 + log2(c) + k
    const r: f64 = z * invc - 1;
    const y0: f64 = logc + cast(f64, k, .{});

    // Pipelined polynomial evaluation to approximate log1p(r)/ln2.
    const r2: f64 = r * r;
    var y: f64 = log2_data.poly_pow_32[0] * r + log2_data.poly_pow_32[1];
    const p: f64 = log2_data.poly_pow_32[2] * r + log2_data.poly_pow_32[3];
    const r4: f64 = r2 * r2;
    var q: f64 = log2_data.poly_pow_32[4] * r + y0;
    q = p * r2 + q;
    y = y * r4 + q;
    return y;
}

// The output of log2 and thus the input of exp2 is either scaled by N
// (in case of fast toint intrinsics) or not.  The unscaled xd must be
// in [-1021,1023], sign_bias sets the sign of the result.
inline fn exp2_inline32(xd: f64, sign_bias: u32) f64 {
    // x = k/N + r with r in [-1/(64), 1/(64)]
    var kd: f64 = xd + exp2_data.shift_scaled_32;
    const ki: u64 = @bitCast(kd);
    kd -= exp2_data.shift_scaled_32; // k/32
    const r: f64 = xd - kd;

    // exp2(x) = 2^(k/32) * 2^r ~= s * (C0*r^3 + C1*r^2 + C2*r + 1)
    var t: u64 = exp2_data.T_32[ki % 32];
    const ski: u64 = ki + cast(u64, sign_bias, .{});
    t +%= ski << 47;
    const s: f64 = @bitCast(t);
    const z: f64 = exp2_data.poly_32[0] * r + exp2_data.poly_32[1];
    const r2: f64 = r * r;
    var y: f64 = exp2_data.poly_32[2] * r + 1;
    y = z * r2 + y;
    y = y * s;
    return y;
}

// Returns 0 if not int, 1 if odd int, 2 if even int.  The argument is
// the bit representation of a non-zero finite floating-point value.
inline fn checkint32(iy: u32) i32 {
    const e: i32 = cast(i32, iy >> 23 & 0xff, .{});
    if (e < 0x7f)
        return 0;

    if (e > 0x7f + 23)
        return 2;

    if ((iy & ((@as(u32, 1) << @as(u5, @intCast(0x7f + 23 - e))) - 1)) != 0)
        return 0;

    if ((iy & (@as(u32, 1) << @as(u5, @intCast(0x7f + 23 - e)))) != 0)
        return 1;

    return 2;
}

inline fn zeroinfnan32(ix: u32) bool {
    return 2 *% ix -% 1 >= 2 * 0x7f800000 -% 1;
}

fn pow32(x: f32, y: f32) f32 {
    var sign_bias: u32 = 0;
    var ix: u32 = @bitCast(x);
    const iy: u32 = @bitCast(y);
    if (ix -% 0x00800000 >= 0x7f800000 -% 0x00800000 or zeroinfnan32(iy)) {
        @branchHint(.unlikely);
        // Either (x < 0x1p-126 or inf or nan) or (y is 0 or inf or nan).
        if (zeroinfnan32(iy)) {
            @branchHint(.unlikely);
            if (2 *% iy == 0)
                return if (std.math.isSignalNan(x)) x + y else 1;

            if (ix == 0x3f800000)
                return if (std.math.isSignalNan(y)) x + y else 1;

            if (2 *% ix > 2 *% 0x7f800000 or 2 *% iy > 2 * 0x7f800000)
                return x + y;

            if (2 *% ix == 2 *% 0x3f800000)
                return 1;

            if ((2 *% ix < 2 *% 0x3f800000) == (iy & 0x80000000 == 0))
                return 0; // |x|<1 && y==inf or |x|>1 && y==-inf.

            return y * y;
        }
        if (zeroinfnan32(ix)) {
            @branchHint(.unlikely);
            var x2: f32 = x * x;
            if (ix & 0x80000000 != 0 and checkint32(iy) == 1) {
                x2 = -x2;
                sign_bias = 1;
            }

            if (2 *% ix == 0 and iy & 0x80000000 != 0)
                return @as(f32, (if (sign_bias != 0) -1 else 1)) / @as(f32, 0);

            return if (iy & 0x80000000 != 0) 1 / x2 else x2;
        }
        // x and y are non-zero finite.
        if ((ix & 0x80000000) != 0) {
            // Finite x < 0.
            const yint: i32 = checkint32(iy);
            if (yint == 0)
                return (x - x) / (x - x);

            if (yint == 1)
                sign_bias = 65536;

            ix &= 0x7fffffff;
        }

        if (ix < 0x00800000) {
            // Normalize subnormal x so exponent becomes negative.
            ix = @bitCast(x * 0x1p23);
            ix &= 0x7fffffff;
            ix -%= 23 << 23;
        }
    }

    const logx: f64 = log2_inline32(ix);
    const ylogx: f64 = cast(f64, y, .{}) * logx; // Note: cannot overflow, y is single prec.
    if ((@as(u64, @bitCast(ylogx)) >> 47 & 0xffff) >= @as(u64, @bitCast(@as(f64, 126))) >> 47) {
        @branchHint(.unlikely);
        // |y*log(x)| >= 126.
        if (ylogx > 0x1.fffffffd1d571p+6) {
            // |x^y| > 0x1.ffffffp127.
            return @as(f32, (if (sign_bias != 0) -0x1p97 else 0x1p97)) * 0x1p97;
        }

        if (ylogx > 0x1.fffffffa3aae2p+6) {
            // |x^y| > 0x1.fffffep127, check if we round away from 0.
            if ((sign_bias == 0 and 1 + 0x1p-25 != 1) or (sign_bias != 0 and -1 - 0x1p-25 != -1))
                return @as(f32, (if (sign_bias != 0) -0x1p97 else 0x1p97)) * 0x1p97;
        }

        if (ylogx <= -150)
            return @as(f32, (if (sign_bias != 0) -0x1p-95 else 0x1p-95)) * 0x1p-95;

        if (ylogx < -149)
            return @as(f32, (if (sign_bias != 0) -0x1.4p-75 else 0x1.4p-75)) * 0x1.4p-75;
    }
    return cast(f32, exp2_inline32(ylogx, sign_bias), .{});
}

// Top 12 bits of a double (sign and exponent bits).
inline fn top12(x: f64) u32 {
    return @truncate(@as(u64, @bitCast(x)) >> 52);
}

// Compute y+TAIL = log(x) where the rounded result is y and TAIL has about
// additional 15 bits precision.  IX is the bit representation of x, but
// normalized in the subnormal range using the sign bit for the exponent.
inline fn log_inline64(ix: u64, tail: *f64) f64 {
    // x = 2^k z; where z is in range [0x3fe6955500000000,2*0x3fe6955500000000) and exact.
    // The range is split into N subintervals.
    // The ith subinterval contains z and c is near its center.
    const tmp: u64 = ix -% 0x3fe6955500000000;
    const i: i32 = cast(i32, (tmp >> 45) % 128, .{});
    var k: i32 = undefined;
    {
        @setRuntimeSafety(false);
        k = cast(i32, @as(i64, @intCast(tmp)) >> 52, .{}); // arithmetic shift
    }
    const iz: u64 = ix -% (tmp & 0xfff << 52);
    const z: f64 = @bitCast(iz);
    const kd: f64 = cast(f64, k, .{});

    // log(x) = k*Ln2 + log(c) + log1p(z/c-1).
    const invc: f64 = pow_data.tab_64[@intCast(i)].invc;
    const logc: f64 = pow_data.tab_64[@intCast(i)].logc;
    const logctail: f64 = pow_data.tab_64[@intCast(i)].logctail;

    // Note: 1/c is j/N or j/N/2 where j is an integer in [N,2N) and
    // |z/c - 1| < 1/N, so r = z/c - 1 is exactly representible.
    var r: f64 = undefined;
    var rhi: f64 = undefined;
    var rlo: f64 = undefined;
    if (true) {
        r = @mulAdd(f64, z, invc, -1);
    } else {
        // Split z such that rhi, rlo and rhi*rhi are exact and |rlo| <= |r|.
        const zhi: f64 = @bitCast((iz + (1 << 31)) & (-1 << 32));
        const zlo: f64 = z - zhi;
        rhi = zhi * invc - 1.0;
        rlo = zlo * invc;
        r = rhi + rlo;
    }

    // k*Ln2 + log(c) + r.
    const t1: f64 = kd * pow_data.ln2hi_64 + logc;
    const t2: f64 = t1 + r;
    const lo1: f64 = kd * pow_data.ln2lo_64 + logctail;
    const lo2: f64 = t1 - t2 + r;

    // Evaluation is optimized assuming superscalar pipelined execution.
    const ar: f64 = pow_data.poly_64[0] * r; // pow_data.poly_64[0] = -0.5.
    const ar2: f64 = r * ar;
    const ar3: f64 = r * ar2;
    // k*Ln2 + log(c) + r + pow_data.poly_64[0]*r*r.
    var hi: f64 = undefined;
    var lo3: f64 = undefined;
    var lo4: f64 = undefined;
    if (true) {
        hi = t2 + ar2;
        lo3 = @mulAdd(f64, ar, r, -ar2);
        lo4 = t2 - hi + ar2;
    } else {
        const arhi: f64 = pow_data.poly_64[0] * rhi;
        const arhi2: f64 = rhi * arhi;
        hi = t2 + arhi2;
        lo3 = rlo * (ar + arhi);
        lo4 = t2 - hi + arhi2;
    }

    // p = log1p(r) - r - pow_data.poly_64[0]*r*r.
    const p: f64 = (ar3 * (pow_data.poly_64[1] + r * pow_data.poly_64[2] + ar2 * (pow_data.poly_64[3] + r * pow_data.poly_64[4] + ar2 * (pow_data.poly_64[5] + r * pow_data.poly_64[6]))));
    const lo: f64 = lo1 + lo2 + lo3 + lo4 + p;
    const y: f64 = hi + lo;
    tail.* = hi - y + lo;
    return y;
}

// Handle cases that may overflow or underflow when computing the result that
// is scale*(1+TMP) without intermediate rounding.  The bit representation of
// scale is in SBITS, however it has a computed exponent that may have
// overflown into the sign bit so that needs to be adjusted before using it as
// a double.  (int32_t)KI is the k used in the argument reduction and exponent
// adjustment of scale, positive k here means the result may overflow and
// negative k means the result may underflow.  */
inline fn specialcase(tmp: f64, sbits: u64, ki: u64) f64 {
    var ssbits: u64 = sbits;
    if ((ki & 0x80000000) == 0) {
        // k > 0, the exponent of scale might have overflowed by <= 460.
        ssbits -%= 1009 << 52;
        const scale: f64 = @bitCast(ssbits);
        const y: f64 = 0x1p1009 * (scale + scale * tmp);
        return y;
    }

    // k < 0, need special care in the subnormal range.
    ssbits += 1022 << 52;
    // Note: ssbits is signed scale.
    const scale: f64 = @bitCast(ssbits);
    var y: f64 = scale + scale * tmp;
    if (math.abs(y) < 1) {
        // Round y to the right precision before scaling it into the subnormal
        // range to avoid double rounding that can cause 0.5+E/2 ulp error where
        // E is the worst-case ulp error outside the subnormal range.  So this
        // is only useful if the goal is better than 1 ulp worst-case error.
        var one: f64 = 1;
        if (y < 0)
            one = -1;

        var lo: f64 = scale - y + scale * tmp;
        const hi: f64 = one + y;
        lo = one - hi + y + lo;
        y = hi + lo - one;

        // Fix the sign of 0.
        if (y == 0.0)
            y = @bitCast(ssbits & 0x8000000000000000);

        // The underflow exception needs to be signaled explicitly.
        std.mem.doNotOptimizeAway(0x1p-1022 * 0x1p-1022);
    }

    y = 0x1p-1022 * y;
    return y;
}

// Computes sign*exp(x+xtail) where |xtail| < 2^-8/N and |xtail| <= |x|.
// The sign_bias argument is SIGN_BIAS or 0 and sets the sign to -1 or 1.
inline fn exp_inline64(x: f64, xtail: f64, sign_bias: u32) f64 {
    var abstop: u32 = top12(x) & 0x7ff;
    if (abstop -% top12(0x1p-54) >= top12(512) -% top12(0x1p-54)) {
        @branchHint(.unlikely);
        if (abstop -% top12(0x1p-54) >= 0x80000000) {
            // Avoid spurious underflow for tiny x.
            // Note: 0 is common input.
            const one: f64 = 1 + x;
            return if (sign_bias != 0) -one else one;
        }
        if (abstop >= top12(1024.0)) {
            // Note: inf and nan are already handled.
            if ((@as(u64, @bitCast(x)) >> 63) != 0) {
                return @as(f64, (if (sign_bias != 0) -0x1p-767 else 0x1p-767)) * 0x1p-767;
            } else {
                return @as(f64, (if (sign_bias != 0) -0x1p769 else 0x1p769)) * 0x1p769;
            }
        }
        // Large x is special cased below.
        abstop = 0;
    }

    // exp(x) = 2^(k/N) * exp(r), with exp(r) in [2^(-1/2N),2^(1/2N)].
    // x = ln2/N*k + r, with int k and r in [-ln2/2N, ln2/2N].
    const z: f64 = exp_data.InvLn2N_64 * x;
    // z - kd is in [-1, 1] in non-nearest rounding modes.
    var kd: f64 = z + exp_data.Shift_64;
    const ki: u64 = @bitCast(kd);
    kd -= exp_data.Shift_64;
    var r: f64 = x + kd * exp_data.NegLn2hiN_64 + kd * exp_data.NegLn2loN_64;
    // The code assumes 2^-200 < |xtail| < 2^-8/N.
    r += xtail;
    // 2^(k/N) ~= scale * (1 + tail).
    const idx: u64 = 2 * (ki % 128);
    const top: u64 = (ki + cast(u64, sign_bias, .{})) << 45;
    const tail: f64 = @bitCast(exp_data.T_64[idx]);
    // This is only a valid scale when -1023*N < k < 1024*N.
    const sbits: u64 = exp_data.T_64[idx + 1] +% top;
    // exp(x) = 2^(k/N) * exp(r) ~= scale + scale * (tail + exp(r) - 1).
    // Evaluation is optimized assuming superscalar pipelined execution.
    const r2: f64 = r * r;
    // Without fma the worst case error is 0.25/N ulp larger.
    // Worst case error is less than 0.5+1.11/N+(abs poly error * 2^53) ulp.
    const tmp: f64 = tail + r + r2 * (exp_data.poly[0] + r * exp_data.poly[1]) + r2 * r2 * (exp_data.poly[2] + r * exp_data.poly[3]);
    if (abstop == 0) {
        @branchHint(.unlikely);
        return specialcase(tmp, sbits, ki);
    }

    const scale: f64 = @bitCast(sbits);
    // Note: tmp == 0 or |tmp| > 2^-200 and scale > 2^-739, so there
    // is no spurious underflow here even without fma.
    return scale + scale * tmp;
}

// Returns 0 if not int, 1 if odd int, 2 if even int.  The argument is
// the bit representation of a non-zero finite floating-point value.
inline fn checkint64(iy: u64) i32 {
    const e: i32 = cast(i32, iy >> 52 & 0x7ff, .{});
    if (e < 0x3ff)
        return 0;

    if (e > 0x3ff + 52)
        return 2;

    if ((iy & ((@as(u64, 1) << @as(u6, @intCast(0x3ff + 52 - e))) - 1)) != 0)
        return 0;

    if ((iy & (@as(u64, 1) << @as(u6, @intCast(0x3ff + 52 - e)))) != 0)
        return 1;

    return 2;
}

// Returns 1 if input is the bit representation of 0, infinity or nan.
inline fn zeroinfnan64(i: u64) bool {
    return 2 *% i -% 1 >= 2 *% @as(u64, @bitCast(std.math.inf(f64))) -% 1;
}

fn pow64(x: f64, y: f64) f64 {
    var sign_bias: u32 = 0;
    var ix: u64 = @bitCast(x);
    const iy: u64 = @bitCast(y);
    var topx: u32 = top12(x);
    const topy: u32 = top12(y);
    if (topx -% 0x001 >= 0x7ff - 0x001 or (topy & 0x7ff) -% 0x3be >= 0x43e -% 0x3be) {
        @branchHint(.unlikely);
        // Note: if |y| > 1075 * ln2 * 2^53 ~= 0x1.749p62 then pow(x,y) = inf/0
        // and if |y| < 2^-54 / 1075 ~= 0x1.e7b6p-65 then pow(x,y) = +-1.
        // Special cases: (x < 0x1p-126 or inf or nan) or
        // (|y| < 0x1p-65 or |y| >= 0x1p63 or nan).
        if (zeroinfnan64(iy)) {
            @branchHint(.unlikely);
            if (2 *% iy == 0)
                return if (std.math.isSignalNan(x)) x + y else 1;

            if (ix == @as(u64, @bitCast(@as(f64, 1))))
                return if (std.math.isSignalNan(y)) x + y else 1;

            if (2 *% ix > 2 *% @as(u64, @bitCast(std.math.inf(f64))) or 2 *% iy > 2 *% @as(u64, @bitCast(std.math.inf(f64))))
                return x + y;
            if (2 *% ix == 2 *% @as(u64, @bitCast(@as(f64, 1))))
                return 1;
            if ((2 *% ix < 2 *% @as(u64, @bitCast(@as(f64, 1)))) == ((iy >> 63) == 0))
                return 0; // |x|<1 && y==inf or |x|>1 && y==-inf.

            return y * y;
        }

        if (zeroinfnan64(ix)) {
            @branchHint(.unlikely);
            var x2: f64 = x * x;
            if ((ix >> 63) != 0 and checkint64(iy) == 1) {
                x2 = -x2;
                sign_bias = 1;
            }
            if (2 *% ix == 0 and (iy >> 63) != 0)
                return @as(f64, (if (sign_bias != 0) -1 else 1)) / @as(f64, 0);

            return if ((iy >> 63) != 0) 1 / x2 else x2;
        }

        // Here x and y are non-zero finite.
        if ((ix >> 63) != 0) {
            // Finite x < 0.
            const yint: i32 = checkint64(iy);
            if (yint == 0)
                return (x - x) / (x - x);

            if (yint == 1)
                sign_bias = (0x800 << 7);

            ix &= 0x7fffffffffffffff;
            topx &= 0x7ff;
        }

        if ((topy & 0x7ff) -% 0x3be >= 0x43e - 0x3be) {
            // Note: sign_bias == 0 here because y is not odd.
            if (ix == @as(u64, @bitCast(@as(f64, 1))))
                return 1;

            if ((topy & 0x7ff) < 0x3be) {
                // |y| < 2^-65, x^y ~= 1 + y*log(x).
                return if (ix > @as(u64, @bitCast(@as(f64, 1)))) 1 + y else 1 - y;
            }

            return if ((ix > @as(u64, @bitCast(@as(f64, 1)))) == (topy < 0x800)) 0x1p769 * 0x1p769 else 0x1p-767 * 0x1p-767;
        }
        if (topx == 0) {
            // Normalize subnormal x so exponent becomes negative.
            ix = @bitCast(x * 0x1p52);
            ix &= 0x7fffffffffffffff;
            ix -%= 52 << 52;
        }
    }

    var lo: f64 = undefined;
    const hi: f64 = log_inline64(ix, &lo);
    var ehi: f64 = undefined;
    var elo: f64 = undefined;
    if (true) {
        ehi = y * hi;
        elo = y * lo + @mulAdd(f64, y, hi, -ehi);
    } else {
        const yhi: f64 = @bitCast(iy & -1 << 27);
        const ylo: f64 = y - yhi;
        const lhi: f64 = @bitCast(@as(u64, @bitCast(hi)) & -1 << 27);
        const llo: f64 = hi - lhi + lo;
        ehi = yhi * lhi;
        elo = ylo * lhi + y * llo; // |elo| < |ehi| * 2^-25.
    }

    return exp_inline64(ehi, elo, sign_bias);
}

fn pow128(x: f128, y: f128) f128 {
    const bp: [2]f128 = .{
        1,
        1.5,
    };
    // log_2(1.5)
    const dp_h: [2]f128 = .{
        0,
        5.8496250072115607565592654282227158546448e-1,
    };
    // Low part of log_2(1.5)
    const dp_l: [2]f128 = .{
        0,
        1.0579781240112554492329533686862998106046e-16,
    };
    const two113: f128 = 1.0384593717069655257060992658440192e34;
    const huge: f128 = 1.0e3000;
    const tiny: f128 = 1.0e-3000;
    // 3/2 log x = 3 z + z^3 + z^3 (z^2 R(z^2))
    // z = (x-1)/(x+1)
    // 1 <= x <= 1.25
    // Peak relative error 2.3e-37
    const LN: [5]f128 = .{
        -3.0779177200290054398792536829702930623200e1,
        6.5135778082209159921251824580292116201640e1,
        -4.6312921812152436921591152809994014413540e1,
        1.2510208195629420304615674658258363295208e1,
        -9.9266909031921425609179910128531667336670e-1,
    };
    const LD: [5]f128 = .{
        -5.129862866715009066465422805058933131960e1,
        1.452015077564081884387441590064272782044e2,
        -1.524043275549860505277434040464085593165e2,
        7.236063513651544224319663428634139768808e1,
        -1.494198912340228235853027849917095580053e1,
    };
    // exp(x) = 1 + x - x / (1 - 2 / (x - x^2 R(x^2)))
    // 0 <= x <= 0.5
    // Peak relative error 5.7e-38
    const PN: [5]f128 = .{
        5.081801691915377692446852383385968225675e8,
        9.360895299872484512023336636427675327355e6,
        4.213701282274196030811629773097579432957e4,
        5.201006511142748908655720086041570288182e1,
        9.088368420359444263703202925095675982530e-3,
    };
    const PD: [4]f128 = .{
        3.049081015149226615468111430031590411682e9,
        1.069833887183886839966085436512368982758e8,
        8.259257717868875207333991924545445705394e5,
        1.872583833284143212651746812884298360922e3,
    };
    // ln 2
    const lg2: f128 = 6.9314718055994530941723212145817656807550e-1;
    const lg2_h: f128 = 6.9314718055994528622676398299518041312695e-1;
    const lg2_l: f128 = 2.3190468138462996154948554638754786504121e-17;
    const ovt: f128 = 8.0085662595372944372e-0017;
    // 2/(3*log(2))
    const cp: f128 = 9.6179669392597560490661645400126142495110e-1;
    const cp_h: f128 = 9.6179669392597555432899980587535537779331e-1;
    const cp_l: f128 = 5.0577616648125906047157785230014751039424e-17;

    const p: ldbl128.ieee_f128_shape32 = @bitCast(x);
    const hx: i32 = @bitCast(p.w0);
    var ix: u32 = @bitCast(hx & 0x7fffffff);

    const q: ldbl128.ieee_f128_shape32 = @bitCast(y);
    const hy: i32 = @bitCast(q.w0);
    const iy: u32 = @bitCast(hy & 0x7fffffff);

    // y==0: x**0 = 1
    if ((iy | q.w1 | q.w2 | q.w3) == 0 and !std.math.isSignalNan(x))
        return 1;

    // 1.0**y = 1; -1.0**+-Inf = 1
    if (x == 1 and !std.math.isSignalNan(y))
        return 1;

    if (x == -1 and iy == 0x7fff0000 and (q.w1 | q.w2 | q.w3) == 0)
        return 1;

    // +-NaN return x+y
    if ((ix > 0x7fff0000) or ((ix == 0x7fff0000) and ((p.w1 | p.w2 | p.w3) != 0)) or (iy > 0x7fff0000) or ((iy == 0x7fff0000) and ((q.w1 | q.w2 | q.w3) != 0)))
        return x + y;

    // determine if y is an odd int when x < 0
    // yisint = 0       ... y is not an integer
    // yisint = 1       ... y is an odd int
    // yisint = 2       ... y is an even int
    var yisint: i32 = 0;
    if (hx < 0) {
        if (iy >= 0x40700000) { // 2^113
            yisint = 2; // even integer y
        } else if (iy >= 0x3fff0000) { // 1.0
            if (math.floor(y) == y) {
                const z: f128 = 0.5 * y;
                if (math.floor(z) == z) {
                    yisint = 2;
                } else {
                    yisint = 1;
                }
            }
        }
    }

    // special value of y
    if ((q.w1 | q.w2 | q.w3) == 0) {
        if (iy == 0x7fff0000) { // y is +-inf
            if (((ix - 0x3fff0000) | p.w1 | p.w2 | p.w3) == 0) {
                return y - y; // +-1**inf is NaN
            } else if (ix >= 0x3fff0000) { // (|x|>1)**+-inf = inf,0
                return if (hy >= 0) y else 0;
            } else { // (|x|<1)**-,+inf = inf,0
                return if (hy < 0) -y else 0;
            }
        }

        if (iy == 0x3fff0000) { // y is  +-1
            if (hy < 0) {
                return 1 / x;
            } else {
                return x;
            }
        }

        if (hy == 0x40000000)
            return x * x; // y is  2

        if (hy == 0x3ffe0000) { // y is  0.5
            if (hx >= 0) // x >= +0
                return math.sqrt(x);
        }
    }

    var ax: f128 = math.abs(x);
    // special value of x
    if ((p.w1 | p.w2 | p.w3) == 0) {
        if (ix == 0x7fff0000 or ix == 0 or ix == 0x3fff0000) {
            var z: f128 = ax; // x is +-0,+-inf,+-1
            if (hy < 0)
                z = 1 / z; // z = (1/|x|)

            if (hx < 0) {
                if (((ix -% 0x3fff0000) | @as(u32, @bitCast(yisint))) == 0) {
                    z = (z - z) / (z - z); // (-1)**non-int is NaN
                } else if (yisint == 1) {
                    z = -z; // (x<0)**odd = -(|x|**odd)
                }
            }
            return z;
        }
    }

    // (x<0)**(non-int) is NaN
    {
        @setRuntimeSafety(false);
        if ((((@as(u32, @intCast(hx)) >> 31) -% 1) | @as(u32, @bitCast(yisint))) == 0)
            return (x - x) / (x - x);
    }

    // sgn (sign of result -ve**odd) = -1 else = 1
    var sgn: f128 = 1;
    {
        @setRuntimeSafety(false);
        if ((((@as(u32, @intCast(hx)) >> 31) -% 1) | @as(u32, @bitCast(yisint -% 1))) == 0)
            sgn = -1; // (-ve)**(odd int)
    }

    // |y| is huge.
    // 2^-16495 = 1/2 of smallest representable value.
    // If (1 - 1/131072)^y underflows, y > 1.4986e9
    if (iy > 0x401d654b) {
        // if (1 - 2^-113)^y underflows, y > 1.1873e38
        if (iy > 0x407d654b) {
            if (ix <= 0x3ffeffff)
                return if (hy < 0) huge * huge else tiny * tiny;

            if (ix >= 0x3fff0000)
                return if (hy > 0) huge * huge else tiny * tiny;
        }
        // over/underflow if x is not close to 1
        if (ix < 0x3ffeffff)
            return if (hy < 0) sgn * huge * huge else sgn * tiny * tiny;

        if (ix > 0x3fff0000)
            return if (hy > 0) sgn * huge * huge else sgn * tiny * tiny;
    }

    const ay: f128 = if (y > 0) y else -y;
    var yy: f128 = y;
    if (ay < 0x1p-128)
        yy = if (y < 0) -0x1p-128 else 0x1p-128;

    var n: i32 = 0;
    // take care subnormal number
    if (ix < 0x00010000) {
        ax *= two113;
        n -= 113;
        const o: ldbl128.ieee_f128_shape32 = @bitCast(ax);
        ix = o.w0;
    }

    {
        @setRuntimeSafety(false);
        n +%= @intCast(((ix) >> 16) -% 0x3fff);
    }
    var j: i32 = @bitCast(ix & 0x0000ffff);
    // determine interval
    ix = @bitCast(j | 0x3fff0000); // normalize ix
    var k: i32 = undefined;
    if (j <= 0x3988) {
        k = 0; // |x|<sqrt(3/2)
    } else if (j < 0xbb67) {
        k = 1; // |x|<sqrt(3)
    } else {
        k = 0;
        n += 1;
        ix -= 0x00010000;
    }

    var o: ldbl128.ieee_f128_shape32 = @bitCast(ax);
    o.w0 = ix;
    ax = @bitCast(o);

    // compute s = s_h+s_l = (x-1)/(x+1) or (x-1.5)/(x+1.5)
    var u: f128 = ax - bp[@intCast(k)]; // bp[0]=1.0, bp[1]=1.5
    var v: f128 = 1 / (ax + bp[@intCast(k)]);
    const s: f128 = u * v;
    var s_h: f128 = s;

    o = @bitCast(s_h);
    o.w3 = 0;
    o.w2 &= 0xf8000000;
    s_h = @bitCast(o);
    // t_h=ax+bp[k] High
    var t_h: f128 = ax + bp[@intCast(k)];
    o = @bitCast(t_h);
    o.w3 = 0;
    o.w2 &= 0xf8000000;
    t_h = @bitCast(o);
    var t_l: f128 = ax - (t_h - bp[@intCast(k)]);
    const s_l: f128 = v * ((u - s_h * t_h) - s_h * t_l);
    // compute log(ax)
    var s2: f128 = s * s;
    u = LN[0] + s2 * (LN[1] + s2 * (LN[2] + s2 * (LN[3] + s2 * LN[4])));
    v = LD[0] + s2 * (LD[1] + s2 * (LD[2] + s2 * (LD[3] + s2 * (LD[4] + s2))));
    var r: f128 = s2 * s2 * u / v;
    r += s_l * (s_h + s);
    s2 = s_h * s_h;
    t_h = 3.0 + s2 + r;
    o = @bitCast(t_h);
    o.w3 = 0;
    o.w2 &= 0xf8000000;
    t_h = @bitCast(o);
    t_l = r - ((t_h - 3.0) - s2);
    // u+v = s*(1+...)
    u = s_h * t_h;
    v = s_l * t_h + t_l * s;
    // 2/(3log2)*(s+...)
    var p_h: f128 = u + v;
    o = @bitCast(p_h);
    o.w3 = 0;
    o.w2 &= 0xf8000000;
    p_h = @bitCast(o);
    var p_l: f128 = v - (p_h - u);
    const z_h: f128 = cp_h * p_h; // cp_h+cp_l = 2/(3*log2)
    const z_l: f128 = cp_l * p_h + p_l * cp + dp_l[@intCast(k)];
    // log2(ax) = (s+..)*2/(3*log2) = n + dp_h + z_h + z_l
    var t: f128 = cast(f128, n, .{});
    var t1: f128 = (((z_h + z_l) + dp_h[@intCast(k)]) + t);
    o = @bitCast(t1);
    o.w3 = 0;
    o.w2 &= 0xf8000000;
    t1 = @bitCast(o);
    const t2: f128 = z_l - (((t1 - t) - dp_h[@intCast(k)]) - z_h);

    // split up y into y1+y2 and compute (y1+y2)*(t1+t2)
    var y1: f128 = yy;
    o = @bitCast(y1);
    o.w3 = 0;
    o.w2 &= 0xf8000000;
    y1 = @bitCast(o);
    p_l = (yy - y1) * t1 + yy * t2;
    p_h = y1 * t1;
    var z: f128 = p_l + p_h;
    o = @bitCast(z);
    j = @bitCast(o.w0);
    if (j >= 0x400d0000) { // z >= 16384
        // if z > 16384
        if ((@as(u32, @bitCast(j - 0x400d0000)) | o.w1 | o.w2 | o.w3) != 0) {
            return sgn * huge * huge; // overflow
        } else {
            if (p_l + ovt > z - p_h)
                return sgn * huge * huge; // overflow
        }
    } else if ((j & 0x7fffffff) >= 0x400d01b9) { // z <= -16495
        // z < -16495
        if (((@as(u32, @bitCast(j)) - 0xc00d01bc) | o.w1 | o.w2 | o.w3) != 0) {
            return sgn * tiny * tiny; // underflow
        } else {
            if (p_l <= z - p_h)
                return sgn * tiny * tiny; // underflow
        }
    }

    // compute 2**(p_h+p_l)
    const i: i32 = j & 0x7fffffff;
    k = (i >> 16) - 0x3fff;
    n = 0;
    if (i > 0x3ffe0000) { // if |z| > 0.5, set n = [z+0.5]
        n = cast(i32, math.floor(z + 0.5), .{});
        t = cast(f128, n, .{});
        p_h -= t;
    }
    t = p_l + p_h;
    o = @bitCast(t);
    o.w3 = 0;
    o.w2 &= 0xf8000000;
    t = @bitCast(o);
    u = t * lg2_h;
    v = (p_l - (t - p_h)) * lg2 + t * lg2_l;
    z = u + v;
    const w: f128 = v - (z - u);
    // exp(z)
    t = z * z;
    u = PN[0] + t * (PN[1] + t * (PN[2] + t * (PN[3] + t * PN[4])));
    v = PD[0] + t * (PD[1] + t * (PD[2] + t * (PD[3] + t)));
    t1 = z - t * u / v;
    r = (z * t1) / (t1 - 2) - (w + z * w);
    z = 1 - (r - z);
    o = @bitCast(z);
    j = @bitCast(o.w0);
    j += (n << 16);
    if ((j >> 16) <= 0) {
        z = math.scalbn(z, n); // subnormal output
        const force_underflow: f128 = z * z;
        std.mem.doNotOptimizeAway(force_underflow);
    } else {
        o.w0 = @bitCast(j);
        z = @bitCast(o);
    }

    return sgn * z;
}

test pow {
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x0p+0), @as(f32, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x0p+0), @as(f32, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0xap+0), @as(f32, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0xap+0), @as(f32, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0xap+0), @as(f32, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0xap+0), @as(f32, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x1.4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x1.4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x4p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x8p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x1p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x1p+72)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x2.0cp+4), @as(f32, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x2.0cp+4), @as(f32, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x2.0cp+4), @as(f32, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x2.0cp+4), @as(f32, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+72), @as(f32, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+72), @as(f32, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p-72), @as(f32, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p-72), @as(f32, -0x0p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x1p+72), @as(f32, 0x1p+72)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0xap+0), @as(f32, -0x1p+72)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0xf.fffffp+124), @as(f32, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0xap+0), @as(f32, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x1p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0xbp+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x1p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0xbp+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0xb.1999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0xb.19999p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0xb.1999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0xb.19999p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x1.bp+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x1.fffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x1.bp+4)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x1p+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x8p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x0p+0), @as(f32, 0x8p-152)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x8p-4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x1p+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x8p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x0p+0), @as(f32, 0x8p-152)));
    try std.testing.expectEqual(0x2p+0, pow(@as(f32, 0x1p+4), @as(f32, 0x4p-4)));
    try std.testing.expectEqual(0x1p+8, pow(@as(f32, 0x1p+64), @as(f32, 0x2p-4)));
    try std.testing.expectEqual(0x1p+4, pow(@as(f32, 0x2p+0), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(0x1p+64, pow(@as(f32, 0x1p+8), @as(f32, 0x8p+0)));
    try std.testing.expectEqual(0xb.2ad17p-4, pow(@as(f32, 0xcp-4), @as(f32, 0x1.4p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0xf.fffffp+20)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x2p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x4p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x1p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x2p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x4p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x2p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x4p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0xf.fffffp+124)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x2p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x1.fffffep+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x4p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x1p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x2p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x4p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x2p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x4p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x4p+124, pow(@as(f32, -0x2p+0), @as(f32, 0x7.ep+4)));
    try std.testing.expectEqual(-0x8p+124, pow(@as(f32, -0x2p+0), @as(f32, 0x7.fp+4)));
    try std.testing.expectEqual(0x4p-128, pow(@as(f32, -0x2p+0), @as(f32, -0x7.ep+4)));
    try std.testing.expectEqual(-0x2p-128, pow(@as(f32, -0x2p+0), @as(f32, -0x7.fp+4)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2p+0), @as(f32, -0xf.fffffp+124)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+0), @as(f32, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x2p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x2p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp+124), @as(f32, -0xf.fffffp+124)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+64), @as(f32, 0x2p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x2p+64), @as(f32, 0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+64), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x2p+64), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p+40), @as(f32, 0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p+40), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p+40), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p+32), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x2p+32), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x4p+24), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-68), @as(f32, -0x2p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-68), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-68), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-68), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x2p-44), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x2p-44), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x2p-44), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-36), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-36), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x4p-28), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x2p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x2p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x2p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0xf.fffffp+124), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x1p+64), @as(f32, 0x1.01p+8)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x2p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-152), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x1p-64), @as(f32, -0x1.01p+8)));
    try std.testing.expectEqual(0x4p-128, pow(@as(f32, -0x8p-4), @as(f32, 0x7.ep+4)));
    try std.testing.expectEqual(-0x2p-128, pow(@as(f32, -0x8p-4), @as(f32, 0x7.fp+4)));
    try std.testing.expectEqual(0x4p+124, pow(@as(f32, -0x8p-4), @as(f32, -0x7.ep+4)));
    try std.testing.expectEqual(-0x8p+124, pow(@as(f32, -0x8p-4), @as(f32, -0x7.fp+4)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x8p-4), @as(f32, -0xf.fffffp+124)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x8p-4), @as(f32, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x2p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(-0x4p-128, pow(@as(f32, -0x4p-128), @as(f32, 0x1p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x2p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x4p-128), @as(f32, -0xf.fffffp+124)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x4p-128), @as(f32, 0xf.fffffp+124)));
    try std.testing.expectEqual(0xf.ffff6p-4, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0xap+0)));
    try std.testing.expectEqual(0xf.fff9cp-4, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x6.4p+4)));
    try std.testing.expectEqual(0xf.ffc18p-4, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x3.e8p+8)));
    try std.testing.expectEqual(0x5.e2d588p-4, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x1p+24)));
    try std.testing.expectEqual(0xc.b4e8ap-96, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x4p+28)));
    try std.testing.expectEqual(0x7.b4fa2p-108, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x4.8d1598p+28)));
    try std.testing.expectEqual(0x1.00000ap+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0xap+0)));
    try std.testing.expectEqual(0x1.000064p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x6.4p+4)));
    try std.testing.expectEqual(0x1.0003e8p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x3.e8p+8)));
    try std.testing.expectEqual(0x2.b7e154p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x1p+24)));
    try std.testing.expectEqual(0x1.4259acp+92, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x4p+28)));
    try std.testing.expectEqual(0x2.13780cp+104, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x4.8d1598p+28)));
    try std.testing.expectEqual(0x7.63992p+0, pow(@as(f32, 0x1.000002p+0), @as(f32, 0x1p+24)));
    try std.testing.expectEqual(0x2.137728p+104, pow(@as(f32, 0x1.000002p+0), @as(f32, 0x2.468accp+28)));
    try std.testing.expectEqual(0x7.b4fd68p-108, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x2.468accp+28)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x4.8d15ap+60)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x4.8d1598p+60)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x4.8d15ap+60)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x1.000002p+0), @as(f32, 0x2.468adp+60)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x1.000002p+0), @as(f32, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x2.468accp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x2.468accp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x1.000002p+0), @as(f32, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x1.000002p+0), @as(f32, 0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x1.000002p+0), @as(f32, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x1.000002p+0), @as(f32, 0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x2.468adp+124)));
    try std.testing.expectEqual(0xf.ffff6p-4, pow(@as(f32, -0xf.fffffp-4), @as(f32, 0xap+0)));
    try std.testing.expectEqual(0xf.fff9cp-4, pow(@as(f32, -0xf.fffffp-4), @as(f32, 0x6.4p+4)));
    try std.testing.expectEqual(0xf.ffc18p-4, pow(@as(f32, -0xf.fffffp-4), @as(f32, 0x3.e8p+8)));
    try std.testing.expectEqual(0x5.e2d588p-4, pow(@as(f32, -0xf.fffffp-4), @as(f32, 0x1p+24)));
    try std.testing.expectEqual(0xc.b4e8ap-96, pow(@as(f32, -0xf.fffffp-4), @as(f32, 0x4p+28)));
    try std.testing.expectEqual(0x7.b4fa2p-108, pow(@as(f32, -0xf.fffffp-4), @as(f32, 0x4.8d1598p+28)));
    try std.testing.expectEqual(0x1.00000ap+0, pow(@as(f32, -0xf.fffffp-4), @as(f32, -0xap+0)));
    try std.testing.expectEqual(0x1.000064p+0, pow(@as(f32, -0xf.fffffp-4), @as(f32, -0x6.4p+4)));
    try std.testing.expectEqual(0x1.0003e8p+0, pow(@as(f32, -0xf.fffffp-4), @as(f32, -0x3.e8p+8)));
    try std.testing.expectEqual(0x2.b7e154p+0, pow(@as(f32, -0xf.fffffp-4), @as(f32, -0x1p+24)));
    try std.testing.expectEqual(0x1.4259acp+92, pow(@as(f32, -0xf.fffffp-4), @as(f32, -0x4p+28)));
    try std.testing.expectEqual(0x2.13780cp+104, pow(@as(f32, -0xf.fffffp-4), @as(f32, -0x4.8d1598p+28)));
    try std.testing.expectEqual(0x7.63992p+0, pow(@as(f32, -0x1.000002p+0), @as(f32, 0x1p+24)));
    try std.testing.expectEqual(0x2.137728p+104, pow(@as(f32, -0x1.000002p+0), @as(f32, 0x2.468accp+28)));
    try std.testing.expectEqual(0x7.b4fd68p-108, pow(@as(f32, -0x1.000002p+0), @as(f32, -0x2.468accp+28)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp-4), @as(f32, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp-4), @as(f32, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x4.8d1598p+60)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp-4), @as(f32, -0x4.8d1598p+60)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp-4), @as(f32, -0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x2.468accp+60)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x1.000002p+0), @as(f32, 0x2.468adp+60)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x1.000002p+0), @as(f32, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x2.468adp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x1.000002p+0), @as(f32, -0x2.468accp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x1.000002p+0), @as(f32, -0x2.468adp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp-4), @as(f32, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp-4), @as(f32, 0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp-4), @as(f32, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp-4), @as(f32, -0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x1.000002p+0), @as(f32, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x1.000002p+0), @as(f32, 0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x1.000002p+0), @as(f32, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x1.000002p+0), @as(f32, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp-4), @as(f32, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0xf.fffffp-4), @as(f32, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp-4), @as(f32, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0xf.fffffp-4), @as(f32, -0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x1.000002p+0), @as(f32, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x1.000002p+0), @as(f32, 0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, -0x1p+0), @as(f32, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x1.000002p+0), @as(f32, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x1.000002p+0), @as(f32, -0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x1.000002p+0), @as(f32, 0x4p+28)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x1.000002p+0), @as(f32, 0x4p+28)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x1.000002p+0), @as(f32, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x1.000002p+0), @as(f32, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x1.00000ep+0), @as(f32, 0x4p+28)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x1.00000ep+0), @as(f32, 0x4p+28)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x1.00000ep+0), @as(f32, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, -0x1.00000ep+0), @as(f32, 0xf.fffffp+124)));
    try std.testing.expectEqual(0xf.fffffp+92, pow(@as(f32, 0xf.fffffp+124), @as(f32, 0xcp-4)));
    try std.testing.expectEqual(0xf.fffffp+92, pow(@as(f32, 0xf.fffffp+124), @as(f32, 0xcp-4)));
    try std.testing.expectEqual(0xf.fffffp+92, pow(@as(f32, 0xf.fffffp+124), @as(f32, 0xcp-4)));
    try std.testing.expectEqual(0xf.fffffp+92, pow(@as(f32, 0xf.fffffp+124), @as(f32, 0xcp-4)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0xap+0), @as(f32, 0x1.344p+12)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0xap+0), @as(f32, 0x1.343p+12)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0xap+0), @as(f32, 0x1.342p+12)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0xap+0), @as(f32, 0x1.341p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0xap+0), @as(f32, -0x1.343p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0xap+0), @as(f32, -0x1.342p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0xap+0), @as(f32, -0x1.341p+12)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x3.3b2e4p+88), @as(f32, 0xb.6p+4)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x3.3b2e3cp+88), @as(f32, 0xb.6p+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x3.3b2e4p+88), @as(f32, -0xb.6p+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x3.3b2e3cp+88), @as(f32, -0xb.6p+4)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x8p-152), @as(f32, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x8p-152), @as(f32, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0xf.fffffp+124), @as(f32, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0xf.fffffp+124), @as(f32, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0xf.d70a4p-4), @as(f32, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0xf.d70a3p-4), @as(f32, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0xf.d70a4p-4), @as(f32, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0xf.d70a3p-4), @as(f32, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1.028f5ep+0), @as(f32, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1.028f5cp+0), @as(f32, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1.028f5ep+0), @as(f32, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1.028f5cp+0), @as(f32, -0x8p-152)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x1.86ap+16)));
    try std.testing.expectEqual(0x3.ab0318p-128, pow(@as(f32, 0x2p+0), @as(f32, -0x7.e2p+4)));
    try std.testing.expectEqual(0x3.5d13fp-128, pow(@as(f32, 0x2p+0), @as(f32, -0x7.e4p+4)));
    try std.testing.expectEqual(0x3.159ca8p-128, pow(@as(f32, 0x2p+0), @as(f32, -0x7.e6p+4)));
    try std.testing.expectEqual(0x2.d413dp-128, pow(@as(f32, 0x2p+0), @as(f32, -0x7.e8p+4)));
    try std.testing.expectEqual(0x2.97fb58p-128, pow(@as(f32, 0x2p+0), @as(f32, -0x7.eap+4)));
    try std.testing.expectEqual(0x2.60dfcp-128, pow(@as(f32, 0x2p+0), @as(f32, -0x7.ecp+4)));
    try std.testing.expectEqual(0x2.2e5708p-128, pow(@as(f32, 0x2p+0), @as(f32, -0x7.eep+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.c92p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.c94p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.c96p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.c98p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.c9ap+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.c9cp+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.c9ep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fe2p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fe4p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fe6p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fe8p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.feap+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fecp+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.feep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.ffe2p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.ffe4p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.ffe6p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.ffe8p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.ffeap+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.ffecp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.ffeep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fff2p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fff4p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fff6p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fff8p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fffap+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fffcp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fffep+12)));
    try std.testing.expectEqual(0x3.ab0318p-128, pow(@as(f32, 0x8p-4), @as(f32, 0x7.e2p+4)));
    try std.testing.expectEqual(0x3.5d13fp-128, pow(@as(f32, 0x8p-4), @as(f32, 0x7.e4p+4)));
    try std.testing.expectEqual(0x3.159ca8p-128, pow(@as(f32, 0x8p-4), @as(f32, 0x7.e6p+4)));
    try std.testing.expectEqual(0x2.d413dp-128, pow(@as(f32, 0x8p-4), @as(f32, 0x7.e8p+4)));
    try std.testing.expectEqual(0x2.97fb58p-128, pow(@as(f32, 0x8p-4), @as(f32, 0x7.eap+4)));
    try std.testing.expectEqual(0x2.60dfcp-128, pow(@as(f32, 0x8p-4), @as(f32, 0x7.ecp+4)));
    try std.testing.expectEqual(0x2.2e5708p-128, pow(@as(f32, 0x8p-4), @as(f32, 0x7.eep+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.c92p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.c94p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.c96p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.c98p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.c9ap+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.c9cp+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.c9ep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.fe2p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.fe4p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.fe6p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.fe8p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.feap+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.fecp+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.feep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.ffe2p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.ffe4p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.ffe6p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.ffe8p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.ffeap+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.ffecp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.ffeep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.fff2p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.fff4p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.fff6p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.fff8p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.fffap+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.fffcp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x8p-4), @as(f32, 0x3.fffep+12)));
    try std.testing.expectEqual(0x3.ffe08p-128, pow(@as(f32, 0x2.00002p+0), @as(f32, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ffc1p-128, pow(@as(f32, -0x2.00004p+0), @as(f32, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ffa188p-128, pow(@as(f32, 0x2.00006p+0), @as(f32, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff8208p-128, pow(@as(f32, -0x2.00008p+0), @as(f32, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff629p-128, pow(@as(f32, 0x2.0000ap+0), @as(f32, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff431p-128, pow(@as(f32, -0x2.0000cp+0), @as(f32, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff2398p-128, pow(@as(f32, 0x2.0000ep+0), @as(f32, -0x7.ep+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.00002p+0), @as(f32, -0x3.c9p+8)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x2.00004p+0), @as(f32, -0x3.c9p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.00006p+0), @as(f32, -0x3.c9p+8)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x2.00008p+0), @as(f32, -0x3.c9p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.0000ap+0), @as(f32, -0x3.c9p+8)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x2.0000cp+0), @as(f32, -0x3.c9p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.0000ep+0), @as(f32, -0x3.c9p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.00002p+0), @as(f32, -0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2.00004p+0), @as(f32, -0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.00006p+0), @as(f32, -0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2.00008p+0), @as(f32, -0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.0000ap+0), @as(f32, -0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2.0000cp+0), @as(f32, -0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.0000ep+0), @as(f32, -0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.00002p+0), @as(f32, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2.00004p+0), @as(f32, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.00006p+0), @as(f32, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2.00008p+0), @as(f32, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.0000ap+0), @as(f32, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x2.0000cp+0), @as(f32, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.0000ep+0), @as(f32, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.00002p+0), @as(f32, -0x3.fffp+12)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x2.00004p+0), @as(f32, -0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.00006p+0), @as(f32, -0x3.fffp+12)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x2.00008p+0), @as(f32, -0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.0000ap+0), @as(f32, -0x3.fffp+12)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x2.0000cp+0), @as(f32, -0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.0000ep+0), @as(f32, -0x3.fffp+12)));
    try std.testing.expectEqual(0x3.fe27fp-128, pow(@as(f32, 0x7.fff88p-4), @as(f32, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fe476p-128, pow(@as(f32, -0x7.fff9p-4), @as(f32, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fe66dp-128, pow(@as(f32, 0x7.fff98p-4), @as(f32, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fe8648p-128, pow(@as(f32, -0x7.fffap-4), @as(f32, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fea5b8p-128, pow(@as(f32, 0x7.fffa8p-4), @as(f32, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fec53p-128, pow(@as(f32, -0x7.fffbp-4), @as(f32, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fee4a8p-128, pow(@as(f32, 0x7.fffb8p-4), @as(f32, 0x7.ep+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fff88p-4), @as(f32, 0x3.c9p+8)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x7.fff9p-4), @as(f32, 0x3.c9p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fff98p-4), @as(f32, 0x3.c9p+8)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x7.fffap-4), @as(f32, 0x3.c9p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fffa8p-4), @as(f32, 0x3.c9p+8)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x7.fffbp-4), @as(f32, 0x3.c9p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fffb8p-4), @as(f32, 0x3.c9p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fff88p-4), @as(f32, 0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x7.fff9p-4), @as(f32, 0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fff98p-4), @as(f32, 0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x7.fffap-4), @as(f32, 0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fffa8p-4), @as(f32, 0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x7.fffbp-4), @as(f32, 0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fffb8p-4), @as(f32, 0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fff88p-4), @as(f32, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x7.fff9p-4), @as(f32, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fff98p-4), @as(f32, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x7.fffap-4), @as(f32, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fffa8p-4), @as(f32, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, -0x7.fffbp-4), @as(f32, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fffb8p-4), @as(f32, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fff88p-4), @as(f32, 0x3.fffp+12)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x7.fff9p-4), @as(f32, 0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fff98p-4), @as(f32, 0x3.fffp+12)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x7.fffap-4), @as(f32, 0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fffa8p-4), @as(f32, 0x3.fffp+12)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f32, -0x7.fffbp-4), @as(f32, 0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x7.fffb8p-4), @as(f32, 0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.000b3p+0), @as(f32, -0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.000584p+0), @as(f32, -0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2.00058p+0), @as(f32, -0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fe513p+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0x2p+0), @as(f32, -0x3.fe4e8p+8)));
    try std.testing.expectEqual(0x1.99999ap-4, pow(@as(f32, 0xap+0), @as(f32, -0x1p+0)));
    try std.testing.expectEqual(0x2.8f5c28p-8, pow(@as(f32, 0xap+0), @as(f32, -0x2p+0)));
    try std.testing.expectEqual(0x4.189378p-12, pow(@as(f32, 0xap+0), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(0x6.8db8b8p-16, pow(@as(f32, 0xap+0), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(0xa.7c5acp-20, pow(@as(f32, 0xap+0), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(0x1.0c6f7ap-20, pow(@as(f32, 0xap+0), @as(f32, -0x6p+0)));
    try std.testing.expectEqual(0x1.ad7f2ap-24, pow(@as(f32, 0xap+0), @as(f32, -0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x1p+0)));
    try std.testing.expectEqual(0xf.fffffp-4, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffep-4, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffdp-4, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(0xf.ffffcp-4, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(0xf.ffffbp-4, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x6p+0)));
    try std.testing.expectEqual(0xf.ffffap-4, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x7p+0)));
    try std.testing.expectEqual(0xf.ffff9p-4, pow(@as(f32, 0xf.fffffp-4), @as(f32, 0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x1p+0)));
    try std.testing.expectEqual(0x1.000002p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x2p+0)));
    try std.testing.expectEqual(0x1.000002p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(0x1.000004p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(0x1.000004p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(0x1.000006p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x6p+0)));
    try std.testing.expectEqual(0x1.000006p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x7p+0)));
    try std.testing.expectEqual(0x1.000008p+0, pow(@as(f32, 0xf.fffffp-4), @as(f32, -0x7p+0)));
    try std.testing.expectEqual(0x1.000002p+0, pow(@as(f32, 0x1.000002p+0), @as(f32, 0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x1p+0)));
    try std.testing.expectEqual(0x1.000004p+0, pow(@as(f32, 0x1.000002p+0), @as(f32, 0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x2p+0)));
    try std.testing.expectEqual(0x1.000006p+0, pow(@as(f32, 0x1.000002p+0), @as(f32, 0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x3p+0)));
    try std.testing.expectEqual(0x1.000008p+0, pow(@as(f32, 0x1.000002p+0), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x4p+0)));
    try std.testing.expectEqual(0x1.00000ap+0, pow(@as(f32, 0x1.000002p+0), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x5p+0)));
    try std.testing.expectEqual(0x1.00000cp+0, pow(@as(f32, 0x1.000002p+0), @as(f32, 0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x6p+0)));
    try std.testing.expectEqual(0x1.00000ep+0, pow(@as(f32, 0x1.000002p+0), @as(f32, 0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, 0x7p+0)));
    try std.testing.expectEqual(0xf.ffffep-4, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x1p+0)));
    try std.testing.expectEqual(0xf.ffffcp-4, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x2p+0)));
    try std.testing.expectEqual(0xf.ffffap-4, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x3p+0)));
    try std.testing.expectEqual(0xf.ffff8p-4, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x4p+0)));
    try std.testing.expectEqual(0xf.ffff6p-4, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x5p+0)));
    try std.testing.expectEqual(0xf.ffff4p-4, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x6p+0)));
    try std.testing.expectEqual(0xf.ffff2p-4, pow(@as(f32, 0x1.000002p+0), @as(f32, -0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f32, 0x1p+0), @as(f32, -0x7p+0)));
    try std.testing.expectEqual(0x1.1211aep+0, pow(@as(f32, 0x1.1p+0), @as(f32, 0x1.2p+0)));
    try std.testing.expectEqual(0x1.84e584p+0, pow(@as(f32, 0x1.8p+0), @as(f32, 0x1.08p+0)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0xf.fffffp+124), @as(f32, 0x1.8p+0)));
    try std.testing.expectEqual(0x3.c74e3p-36, pow(@as(f32, 0x1.ce78f2p+0), @as(f32, -0x2.7f1f78p+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f32, 0xf.fffffp+124), @as(f32, -0x5.b5b648p+0)));
    try std.testing.expectEqual(0x8.df245p+24, pow(@as(f32, 0x1.430d4cp+0), @as(f32, 0x5.0e462p+4)));
    try std.testing.expectEqual(std.math.inf(f32), pow(@as(f32, 0x9.8b82ap-4), @as(f32, -0x1.99907ap+12)));
    try std.testing.expectEqual(0x4.523988p+80, pow(@as(f32, 0xd.73035p-4), @as(f32, -0x1.47bb8p+8)));
    try std.testing.expectEqual(0xf.ffe55p+124, pow(@as(f32, 0x1.059c76p+0), @as(f32, 0xf.fc05fp+8)));
    // try std.testing.expectEqual(0xf.fffffp+124, pow(@as(f32, 0x2.f58f8p+4), @as(f32, 0x1.7p+4)));
    // try std.testing.expectEqual(-0xf.fffffp+124, pow(@as(f32, -0x2.f58f8p+4), @as(f32, 0x1.7p+4)));

    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x0p+0), @as(f64, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x0p+0), @as(f64, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xap+0), @as(f64, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xap+0), @as(f64, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0xap+0), @as(f64, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0xap+0), @as(f64, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x1.4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x1.4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x4p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x8p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x1p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x1p+72)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x2.0cp+4), @as(f64, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x2.0cp+4), @as(f64, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x2.0cp+4), @as(f64, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x2.0cp+4), @as(f64, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+72), @as(f64, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+72), @as(f64, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p-72), @as(f64, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p-72), @as(f64, -0x0p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1p+72), @as(f64, 0x1p+72)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xap+0), @as(f64, -0x1p+72)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp+124), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp+124), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.ffffffffffff8p+1020), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.ffffffffffff8p+1020), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xap+0), @as(f64, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xap+0), @as(f64, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x1p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0xbp+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x1p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0xbp+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0xb.1999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0xb.19999p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0xb.19999999999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0xb.1999999999998p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0xb.1999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0xb.19999p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0xb.19999999999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0xb.1999999999998p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x1.bp+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x1.bp+4)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x1p+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x8p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x0p+0), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x8p-4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x1p+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x8p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x0p+0), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x2p+0, pow(@as(f64, 0x1p+4), @as(f64, 0x4p-4)));
    try std.testing.expectEqual(0x1p+8, pow(@as(f64, 0x1p+64), @as(f64, 0x2p-4)));
    try std.testing.expectEqual(0x1p+4, pow(@as(f64, 0x2p+0), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(0x1p+64, pow(@as(f64, 0x1p+8), @as(f64, 0x8p+0)));
    try std.testing.expectEqual(0xb.2ad170c81b418p-4, pow(@as(f64, 0xcp-4), @as(f64, 0x1.4p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.a64503155bc0fp+444), @as(f64, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.a64503155bc0fp+444), @as(f64, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.a64503155bc0fp+444), @as(f64, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.a64503155bc1p+444), @as(f64, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.a64503155bc1p+444), @as(f64, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.a64503155bc1p+444), @as(f64, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0xf.fffffp+20)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2p+52)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x4p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x1p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x4p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x4p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x4p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x1p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x4p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x4p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x4p+124, pow(@as(f64, -0x2p+0), @as(f64, 0x7.ep+4)));
    try std.testing.expectEqual(-0x8p+124, pow(@as(f64, -0x2p+0), @as(f64, 0x7.fp+4)));
    try std.testing.expectEqual(0x4p-128, pow(@as(f64, -0x2p+0), @as(f64, -0x7.ep+4)));
    try std.testing.expectEqual(-0x2p-128, pow(@as(f64, -0x2p+0), @as(f64, -0x7.fp+4)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2p+0), @as(f64, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+0), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x1.000002000003p-256, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(-0x1.000003000006p-384, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0xf.ffffe000001p+252, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(-0xf.ffffd000003p+380, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp+124), @as(f64, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp+124), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x4p+128, pow(@as(f64, -0x2p+64), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(-0x8p+192, pow(@as(f64, -0x2p+64), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(0x1p+260, pow(@as(f64, -0x2p+64), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(-0x2p+324, pow(@as(f64, -0x2p+64), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-0x2p+128, pow(@as(f64, -0x8p+40), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(0x1p+172, pow(@as(f64, -0x8p+40), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(-0x8p+212, pow(@as(f64, -0x8p+40), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(0x1p+132, pow(@as(f64, -0x2p+32), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(-0x2p+164, pow(@as(f64, -0x2p+32), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-0x4p+128, pow(@as(f64, -0x4p+24), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(0x4p+128, pow(@as(f64, -0x8p-68), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(-0x8p+192, pow(@as(f64, -0x8p-68), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0x1p+260, pow(@as(f64, -0x8p-68), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+324, pow(@as(f64, -0x8p-68), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+128, pow(@as(f64, -0x2p-44), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0x1p+172, pow(@as(f64, -0x2p-44), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(-0x8p+212, pow(@as(f64, -0x2p-44), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(0x1p+132, pow(@as(f64, -0x8p-36), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+164, pow(@as(f64, -0x8p-36), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+128, pow(@as(f64, -0x4p-28), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(0xf.ffffe000001p+252, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+512), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(-0xf.ffffd000003p+380, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x2p+512), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p+508, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+512), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x2p+512), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-0xf.ffffd000003p+380, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p+340), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p+508, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p+340), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p+340), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p+508, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x2p+256), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x2p+256), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x2p+204), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(0x4p+296, pow(@as(f64, -0x8p-152), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-516), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(-0x8p+444, pow(@as(f64, -0x8p-152), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x8p-516), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f64, -0x8p-152), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-516), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f64, -0x8p-152), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x8p-516), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-0x8p+444, pow(@as(f64, -0x8p-152), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-344), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f64, -0x8p-152), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-344), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f64, -0x8p-152), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-344), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f64, -0x8p-152), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-260), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f64, -0x8p-152), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x8p-260), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f64, -0x8p-152), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x8p-208), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(0xf.ffffe000001p+252, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(-0xf.ffffd000003p+380, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p+508, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-0xf.ffffd000003p+380, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p+508, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p+508, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f64, -0xf.fffffp+124), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p+1020), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x1p+64), @as(f64, 0x1.01p+8)));
    try std.testing.expectEqual(0x4p+296, pow(@as(f64, -0x8p-152), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1076), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(-0x8p+444, pow(@as(f64, -0x8p-152), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-1076), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f64, -0x8p-152), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1076), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f64, -0x8p-152), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-1076), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-0x8p+444, pow(@as(f64, -0x8p-152), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-1076), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f64, -0x8p-152), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1076), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f64, -0x8p-152), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-1076), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f64, -0x8p-152), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1076), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f64, -0x8p-152), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-1076), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f64, -0x8p-152), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-1076), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x1p-64), @as(f64, -0x1.01p+8)));
    try std.testing.expectEqual(0x4p-128, pow(@as(f64, -0x8p-4), @as(f64, 0x7.ep+4)));
    try std.testing.expectEqual(-0x2p-128, pow(@as(f64, -0x8p-4), @as(f64, 0x7.fp+4)));
    try std.testing.expectEqual(0x4p+124, pow(@as(f64, -0x8p-4), @as(f64, -0x7.ep+4)));
    try std.testing.expectEqual(-0x8p+124, pow(@as(f64, -0x8p-4), @as(f64, -0x7.fp+4)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-4), @as(f64, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-4), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x1p+252, pow(@as(f64, -0x4p-128), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(-0x4p+376, pow(@as(f64, -0x4p-128), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(-0x4p-128, pow(@as(f64, -0x4p-128), @as(f64, 0x1p+0)));
    try std.testing.expectEqual(-0x4p-1024, pow(@as(f64, -0x4p-1024), @as(f64, 0x1p+0)));
    try std.testing.expectEqual(-0x8p-972, pow(@as(f64, -0x8p-972), @as(f64, 0x1p+0)));
    try std.testing.expectEqual(0x1p-252, pow(@as(f64, -0x4p-128), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(-0x4p-380, pow(@as(f64, -0x4p-128), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-128), @as(f64, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x4p-1024), @as(f64, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x8p-972), @as(f64, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-128), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x4p-1024), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x8p-972), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0xf.ffff600002dp-4, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0xap+0)));
    try std.testing.expectEqual(0xf.fff9c001356p-4, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x6.4p+4)));
    try std.testing.expectEqual(0xf.ffc18079f2218p-4, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x3.e8p+8)));
    try std.testing.expectEqual(0x5.e2d58a99d106p-4, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x1p+24)));
    try std.testing.expectEqual(0xc.b4e8a2f3c38e8p-96, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x4p+28)));
    try std.testing.expectEqual(0x7.b4fa1e8fc265p-108, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x4.8d1598p+28)));
    try std.testing.expectEqual(0x1.00000a000037p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0xap+0)));
    try std.testing.expectEqual(0x1.0000640013bap+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x6.4p+4)));
    try std.testing.expectEqual(0x1.0003e807a31dfp+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x3.e8p+8)));
    try std.testing.expectEqual(0x2.b7e152be7b972p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x1p+24)));
    try std.testing.expectEqual(0x1.4259ab1a8c765p+92, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x4p+28)));
    try std.testing.expectEqual(0x2.13780c1d4b144p+104, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x4.8d1598p+28)));
    try std.testing.expectEqual(0x7.63991f6e05318p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, 0x1p+24)));
    try std.testing.expectEqual(0x2.1377295ae8b6ap+104, pow(@as(f64, 0x1.000002p+0), @as(f64, 0x2.468accp+28)));
    try std.testing.expectEqual(0x7.b4fd685e23a2cp-108, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x2.468accp+28)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0xb.dea0deefbcfdp-844, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0xb.ded059d22e418p-844, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0xb.deabd7ffdaef8p-844, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x4.8d1598p+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x4.8d15ap+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1.590f9a6586a17p+840, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1.5914feaeb8c2cp+840, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1.5913bfacf4afp+840, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0x2.468adp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0x2.468accp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1.5914feaeb89dfp+840, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1.590f9a65867cap+840, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1.5913bfacf48a3p+840, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x2.468accp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x2.468adp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0xb.ded059d22f858p-844, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x2.468accp+60)));
    try std.testing.expectEqual(0xb.dea0deefbe41p-844, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x2.468adp+60)));
    try std.testing.expectEqual(0xb.deabd7ffdc338p-844, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0xf.ffff600002dp-4, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0xap+0)));
    try std.testing.expectEqual(0xf.fff9c001356p-4, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x6.4p+4)));
    try std.testing.expectEqual(0xf.ffc18079f2218p-4, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x3.e8p+8)));
    try std.testing.expectEqual(0x5.e2d58a99d106p-4, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x1p+24)));
    try std.testing.expectEqual(0xc.b4e8a2f3c38e8p-96, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x4p+28)));
    try std.testing.expectEqual(0x7.b4fa1e8fc265p-108, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x4.8d1598p+28)));
    try std.testing.expectEqual(0x1.00000a000037p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, -0xap+0)));
    try std.testing.expectEqual(0x1.0000640013bap+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x6.4p+4)));
    try std.testing.expectEqual(0x1.0003e807a31dfp+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x3.e8p+8)));
    try std.testing.expectEqual(0x2.b7e152be7b972p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x1p+24)));
    try std.testing.expectEqual(0x1.4259ab1a8c765p+92, pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x4p+28)));
    try std.testing.expectEqual(0x2.13780c1d4b144p+104, pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x4.8d1598p+28)));
    try std.testing.expectEqual(0x7.63991f6e05318p+0, pow(@as(f64, -0x1.000002p+0), @as(f64, 0x1p+24)));
    try std.testing.expectEqual(0x2.1377295ae8b6ap+104, pow(@as(f64, -0x1.000002p+0), @as(f64, 0x2.468accp+28)));
    try std.testing.expectEqual(0x7.b4fd685e23a2cp-108, pow(@as(f64, -0x1.000002p+0), @as(f64, -0x2.468accp+28)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0xb.dea0deefbcfdp-844, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0xb.ded059d22e418p-844, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0xb.deabd7ffdaef8p-844, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x4.8d1598p+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x4.8d15ap+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1.590f9a6586a17p+840, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1.5914feaeb8c2cp+840, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, -0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1.5913bfacf4afp+840, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0x2.468adp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0x2.468accp+60)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1.5914feaeb89dfp+840, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1.590f9a65867cap+840, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1.5913bfacf48a3p+840, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.000002p+0), @as(f64, -0x2.468accp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.000002p+0), @as(f64, -0x2.468adp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.000002p+0), @as(f64, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0xb.ded059d22f858p-844, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, -0x2.468accp+60)));
    try std.testing.expectEqual(0xb.dea0deefbe41p-844, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, -0x2.468adp+60)));
    try std.testing.expectEqual(0xb.deabd7ffdc338p-844, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.0000000000001p+0), @as(f64, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.0000000000001p+0), @as(f64, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.0000000000001p+0), @as(f64, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.0000000000001p+0), @as(f64, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.000002p+0), @as(f64, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.000002p+0), @as(f64, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.000002p+0), @as(f64, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.000002p+0), @as(f64, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.fffffp-4), @as(f64, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.fffffp-4), @as(f64, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0xf.ffffffffffff8p-4), @as(f64, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.0000000000001p+0), @as(f64, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.0000000000001p+0), @as(f64, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.0000000000001p+0), @as(f64, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.0000000000001p+0), @as(f64, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, -0x1p+0), @as(f64, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.000002p+0), @as(f64, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.000002p+0), @as(f64, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.000002p+0), @as(f64, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.000002p+0), @as(f64, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x1.0000000000001p+0), @as(f64, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x1.95e4816b61bdcp+184, pow(@as(f64, 0x1.000002p+0), @as(f64, 0x4p+28)));
    try std.testing.expectEqual(0x1.95e4816b61bdcp+184, pow(@as(f64, -0x1.000002p+0), @as(f64, 0x4p+28)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.000002p+0), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.000002p+0), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.00000ep+0), @as(f64, 0x4p+28)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.00000ep+0), @as(f64, 0x4p+28)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.00000ep+0), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x1.00000ep+0), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.00000ep+0), @as(f64, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, -0x1.00000ep+0), @as(f64, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0xf.fffff3fffffe8p+92, pow(@as(f64, 0xf.fffffp+124), @as(f64, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffff8p+764, pow(@as(f64, 0xf.ffffffffffff8p+1020), @as(f64, 0xcp-4)));
    try std.testing.expectEqual(0xf.fffff3fffffe8p+92, pow(@as(f64, 0xf.fffffp+124), @as(f64, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffff8p+764, pow(@as(f64, 0xf.ffffffffffff8p+1020), @as(f64, 0xcp-4)));
    try std.testing.expectEqual(0xf.fffff3fffffe8p+92, pow(@as(f64, 0xf.fffffp+124), @as(f64, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffff8p+764, pow(@as(f64, 0xf.ffffffffffff8p+1020), @as(f64, 0xcp-4)));
    try std.testing.expectEqual(0xf.fffff3fffffe8p+92, pow(@as(f64, 0xf.fffffp+124), @as(f64, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffff8p+764, pow(@as(f64, 0xf.ffffffffffff8p+1020), @as(f64, 0xcp-4)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xap+0), @as(f64, 0x1.344p+12)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xap+0), @as(f64, 0x1.343p+12)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xap+0), @as(f64, 0x1.342p+12)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0xap+0), @as(f64, 0x1.341p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xap+0), @as(f64, -0x1.343p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xap+0), @as(f64, -0x1.342p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0xap+0), @as(f64, -0x1.341p+12)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x3.3b2e4p+88), @as(f64, 0xb.6p+4)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x3.3b2e3cp+88), @as(f64, 0xb.6p+4)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x3.3b2e3c9fd0804p+88), @as(f64, 0xb.6p+4)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x3.3b2e3c9fd0802p+88), @as(f64, 0xb.6p+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x3.3b2e4p+88), @as(f64, -0xb.6p+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x3.3b2e3cp+88), @as(f64, -0xb.6p+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x3.3b2e3c9fd0804p+88), @as(f64, -0xb.6p+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x3.3b2e3c9fd0802p+88), @as(f64, -0xb.6p+4)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x8p-152), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x8p-152), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x4p-1076), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x4p-1076), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x8p-152), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x8p-152), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x4p-1076), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x4p-1076), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.fffffp+124), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.fffffp+124), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.ffffffffffff8p+1020), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.ffffffffffff8p+1020), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.fffffp+124), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.fffffp+124), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.ffffffffffff8p+1020), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.ffffffffffff8p+1020), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a4p-4), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a4p-4), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a3p-4), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a3p-4), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a3d70a3d78p-4), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a3d70a3d78p-4), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a3d70a3d7p-4), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a3d70a3d7p-4), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a4p-4), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a4p-4), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a3p-4), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a3p-4), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a3d70a3d78p-4), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a3d70a3d78p-4), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a3d70a3d7p-4), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0xf.d70a3d70a3d7p-4), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5ep+0), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5ep+0), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5cp+0), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5cp+0), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5c28f5c29p+0), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5c28f5c29p+0), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5c28f5c28p+0), @as(f64, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5c28f5c28p+0), @as(f64, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5ep+0), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5ep+0), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5cp+0), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5cp+0), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5c28f5c29p+0), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5c28f5c29p+0), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5c28f5c28p+0), @as(f64, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1.028f5c28f5c28p+0), @as(f64, -0x4p-1076)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x1.86ap+16)));
    try std.testing.expectEqual(0x3.ab031b9f7490ep-128, pow(@as(f64, 0x2p+0), @as(f64, -0x7.e2p+4)));
    try std.testing.expectEqual(0x3.5d13f32b5a75ap-128, pow(@as(f64, 0x2p+0), @as(f64, -0x7.e4p+4)));
    try std.testing.expectEqual(0x3.159ca845541b6p-128, pow(@as(f64, 0x2p+0), @as(f64, -0x7.e6p+4)));
    try std.testing.expectEqual(0x2.d413cccfe779ap-128, pow(@as(f64, 0x2p+0), @as(f64, -0x7.e8p+4)));
    try std.testing.expectEqual(0x2.97fb5aa6c544ep-128, pow(@as(f64, 0x2p+0), @as(f64, -0x7.eap+4)));
    try std.testing.expectEqual(0x2.60dfc14636e2ap-128, pow(@as(f64, 0x2p+0), @as(f64, -0x7.ecp+4)));
    try std.testing.expectEqual(0x2.2e57078faa2f6p-128, pow(@as(f64, 0x2p+0), @as(f64, -0x7.eep+4)));
    try std.testing.expectEqual(0x7.5606373ee921cp-972, pow(@as(f64, 0x2p+0), @as(f64, -0x3.c92p+8)));
    try std.testing.expectEqual(0x6.ba27e656b4eb4p-972, pow(@as(f64, 0x2p+0), @as(f64, -0x3.c94p+8)));
    try std.testing.expectEqual(0x6.2b39508aa836cp-972, pow(@as(f64, 0x2p+0), @as(f64, -0x3.c96p+8)));
    try std.testing.expectEqual(0x5.a827999fcef34p-972, pow(@as(f64, 0x2p+0), @as(f64, -0x3.c98p+8)));
    try std.testing.expectEqual(0x5.2ff6b54d8a89cp-972, pow(@as(f64, 0x2p+0), @as(f64, -0x3.c9ap+8)));
    try std.testing.expectEqual(0x4.c1bf828c6dc54p-972, pow(@as(f64, 0x2p+0), @as(f64, -0x3.c9cp+8)));
    try std.testing.expectEqual(0x4.5cae0f1f545ecp-972, pow(@as(f64, 0x2p+0), @as(f64, -0x3.c9ep+8)));
    try std.testing.expectEqual(0x3.ab031b9f7491p-1024, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fe2p+8)));
    try std.testing.expectEqual(0x3.5d13f32b5a75cp-1024, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fe4p+8)));
    try std.testing.expectEqual(0x3.159ca845541b8p-1024, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fe6p+8)));
    try std.testing.expectEqual(0x2.d413cccfe7798p-1024, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fe8p+8)));
    try std.testing.expectEqual(0x2.97fb5aa6c545p-1024, pow(@as(f64, 0x2p+0), @as(f64, -0x3.feap+8)));
    try std.testing.expectEqual(0x2.60dfc14636e2cp-1024, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fecp+8)));
    try std.testing.expectEqual(0x2.2e57078faa2f4p-1024, pow(@as(f64, 0x2p+0), @as(f64, -0x3.feep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.ffe2p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.ffe4p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.ffe6p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.ffe8p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.ffeap+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.ffecp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.ffeep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fff2p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fff4p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fff6p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fff8p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fffap+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fffcp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fffep+12)));
    try std.testing.expectEqual(0x3.ab031b9f7490ep-128, pow(@as(f64, 0x8p-4), @as(f64, 0x7.e2p+4)));
    try std.testing.expectEqual(0x3.5d13f32b5a75ap-128, pow(@as(f64, 0x8p-4), @as(f64, 0x7.e4p+4)));
    try std.testing.expectEqual(0x3.159ca845541b6p-128, pow(@as(f64, 0x8p-4), @as(f64, 0x7.e6p+4)));
    try std.testing.expectEqual(0x2.d413cccfe779ap-128, pow(@as(f64, 0x8p-4), @as(f64, 0x7.e8p+4)));
    try std.testing.expectEqual(0x2.97fb5aa6c544ep-128, pow(@as(f64, 0x8p-4), @as(f64, 0x7.eap+4)));
    try std.testing.expectEqual(0x2.60dfc14636e2ap-128, pow(@as(f64, 0x8p-4), @as(f64, 0x7.ecp+4)));
    try std.testing.expectEqual(0x2.2e57078faa2f6p-128, pow(@as(f64, 0x8p-4), @as(f64, 0x7.eep+4)));
    try std.testing.expectEqual(0x7.5606373ee921cp-972, pow(@as(f64, 0x8p-4), @as(f64, 0x3.c92p+8)));
    try std.testing.expectEqual(0x6.ba27e656b4eb4p-972, pow(@as(f64, 0x8p-4), @as(f64, 0x3.c94p+8)));
    try std.testing.expectEqual(0x6.2b39508aa836cp-972, pow(@as(f64, 0x8p-4), @as(f64, 0x3.c96p+8)));
    try std.testing.expectEqual(0x5.a827999fcef34p-972, pow(@as(f64, 0x8p-4), @as(f64, 0x3.c98p+8)));
    try std.testing.expectEqual(0x5.2ff6b54d8a89cp-972, pow(@as(f64, 0x8p-4), @as(f64, 0x3.c9ap+8)));
    try std.testing.expectEqual(0x4.c1bf828c6dc54p-972, pow(@as(f64, 0x8p-4), @as(f64, 0x3.c9cp+8)));
    try std.testing.expectEqual(0x4.5cae0f1f545ecp-972, pow(@as(f64, 0x8p-4), @as(f64, 0x3.c9ep+8)));
    try std.testing.expectEqual(0x3.ab031b9f7491p-1024, pow(@as(f64, 0x8p-4), @as(f64, 0x3.fe2p+8)));
    try std.testing.expectEqual(0x3.5d13f32b5a75cp-1024, pow(@as(f64, 0x8p-4), @as(f64, 0x3.fe4p+8)));
    try std.testing.expectEqual(0x3.159ca845541b8p-1024, pow(@as(f64, 0x8p-4), @as(f64, 0x3.fe6p+8)));
    try std.testing.expectEqual(0x2.d413cccfe7798p-1024, pow(@as(f64, 0x8p-4), @as(f64, 0x3.fe8p+8)));
    try std.testing.expectEqual(0x2.97fb5aa6c545p-1024, pow(@as(f64, 0x8p-4), @as(f64, 0x3.feap+8)));
    try std.testing.expectEqual(0x2.60dfc14636e2cp-1024, pow(@as(f64, 0x8p-4), @as(f64, 0x3.fecp+8)));
    try std.testing.expectEqual(0x2.2e57078faa2f4p-1024, pow(@as(f64, 0x8p-4), @as(f64, 0x3.feep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.ffe2p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.ffe4p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.ffe6p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.ffe8p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.ffeap+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.ffecp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.ffeep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.fff2p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.fff4p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.fff6p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.fff8p+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.fffap+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.fffcp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x8p-4), @as(f64, 0x3.fffep+12)));
    try std.testing.expectEqual(0x3.ffe0807d02b2ap-128, pow(@as(f64, 0x2.00002p+0), @as(f64, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ffc101f405952p-128, pow(@as(f64, -0x2.00004p+0), @as(f64, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ffa1846500d7cp-128, pow(@as(f64, 0x2.00006p+0), @as(f64, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff8207cfecaaap-128, pow(@as(f64, -0x2.00008p+0), @as(f64, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff628c34c13e8p-128, pow(@as(f64, 0x2.0000ap+0), @as(f64, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff43119376c44p-128, pow(@as(f64, -0x2.0000cp+0), @as(f64, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff2397ec056dp-128, pow(@as(f64, 0x2.0000ep+0), @as(f64, -0x7.ep+4)));
    try std.testing.expectEqual(0x7.fe1bb959dfbfp-972, pow(@as(f64, 0x2.00002p+0), @as(f64, -0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.fc37e555601fp-972, pow(@as(f64, -0x2.00004p+0), @as(f64, -0x3.c9p+8)));
    try std.testing.expectEqual(0x7.fa5483d757aa4p-972, pow(@as(f64, 0x2.00006p+0), @as(f64, -0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.f87194c4a35bcp-972, pow(@as(f64, -0x2.00008p+0), @as(f64, -0x3.c9p+8)));
    try std.testing.expectEqual(0x7.f68f1802269fp-972, pow(@as(f64, 0x2.0000ap+0), @as(f64, -0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.f4ad0d74cb4d8p-972, pow(@as(f64, -0x2.0000cp+0), @as(f64, -0x3.c9p+8)));
    try std.testing.expectEqual(0x7.f2cb750181ad4p-972, pow(@as(f64, 0x2.0000ep+0), @as(f64, -0x3.c9p+8)));
    try std.testing.expectEqual(0x3.ff009fe55b7f8p-1024, pow(@as(f64, 0x2.00002p+0), @as(f64, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fe017f8acd51p-1024, pow(@as(f64, -0x2.00004p+0), @as(f64, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fd029ee0676e4p-1024, pow(@as(f64, 0x2.00006p+0), @as(f64, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fc03fdd63fcccp-1024, pow(@as(f64, -0x2.00008p+0), @as(f64, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fb059c5c705d8p-1024, pow(@as(f64, 0x2.0000ap+0), @as(f64, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fa077a63170b4p-1024, pow(@as(f64, -0x2.0000cp+0), @as(f64, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.f90997da55b98p-1024, pow(@as(f64, 0x2.0000ep+0), @as(f64, -0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2.00002p+0), @as(f64, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2.00004p+0), @as(f64, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2.00006p+0), @as(f64, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2.00008p+0), @as(f64, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2.0000ap+0), @as(f64, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x2.0000cp+0), @as(f64, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2.0000ep+0), @as(f64, -0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2.00002p+0), @as(f64, -0x3.fffp+12)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x2.00004p+0), @as(f64, -0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2.00006p+0), @as(f64, -0x3.fffp+12)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x2.00008p+0), @as(f64, -0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2.0000ap+0), @as(f64, -0x3.fffp+12)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x2.0000cp+0), @as(f64, -0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x2.0000ep+0), @as(f64, -0x3.fffp+12)));
    try std.testing.expectEqual(0x3.fe27ec152f28cp-128, pow(@as(f64, 0x7.fff88p-4), @as(f64, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fe475e27e237cp-128, pow(@as(f64, -0x7.fff9p-4), @as(f64, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fe66d130450f6p-128, pow(@as(f64, 0x7.fff98p-4), @as(f64, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fe86452e5f2p-128, pow(@as(f64, -0x7.fffap-4), @as(f64, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fea5ba2237dap-128, pow(@as(f64, 0x7.fffa8p-4), @as(f64, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fec5300bd6ae2p-128, pow(@as(f64, -0x7.fffbp-4), @as(f64, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fee4a6eb430d2p-128, pow(@as(f64, 0x7.fffb8p-4), @as(f64, 0x7.ep+4)));
    try std.testing.expectEqual(0x7.e3ce962b18aecp-972, pow(@as(f64, 0x7.fff88p-4), @as(f64, 0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.e5aca4f5b1c68p-972, pow(@as(f64, -0x7.fff9p-4), @as(f64, 0x3.c9p+8)));
    try std.testing.expectEqual(0x7.e78b24c88759p-972, pow(@as(f64, 0x7.fff98p-4), @as(f64, 0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.e96a15be4c05p-972, pow(@as(f64, -0x7.fffap-4), @as(f64, 0x3.c9p+8)));
    try std.testing.expectEqual(0x7.eb4977f1b8b64p-972, pow(@as(f64, 0x7.fffa8p-4), @as(f64, 0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.ed294b7d8ca68p-972, pow(@as(f64, -0x7.fffbp-4), @as(f64, 0x3.c9p+8)));
    try std.testing.expectEqual(0x7.ef09907c8d5f4p-972, pow(@as(f64, 0x7.fffb8p-4), @as(f64, 0x3.c9p+8)));
    try std.testing.expectEqual(0x3.f1235a29d7748p-1024, pow(@as(f64, 0x7.fff88p-4), @as(f64, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f21f452c96b1cp-1024, pow(@as(f64, -0x7.fff9p-4), @as(f64, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f31b6f02e5c24p-1024, pow(@as(f64, 0x7.fff98p-4), @as(f64, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f417d7bc6bd5p-1024, pow(@as(f64, -0x7.fffap-4), @as(f64, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f5147f68d3fecp-1024, pow(@as(f64, 0x7.fffa8p-4), @as(f64, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f6116617cd3a4p-1024, pow(@as(f64, -0x7.fffbp-4), @as(f64, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f70e8bd90a69cp-1024, pow(@as(f64, 0x7.fffb8p-4), @as(f64, 0x3.fep+8)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x7.fff88p-4), @as(f64, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x7.fff9p-4), @as(f64, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x7.fff98p-4), @as(f64, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x7.fffap-4), @as(f64, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x7.fffa8p-4), @as(f64, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, -0x7.fffbp-4), @as(f64, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x7.fffb8p-4), @as(f64, 0x3.ffep+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x7.fff88p-4), @as(f64, 0x3.fffp+12)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x7.fff9p-4), @as(f64, 0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x7.fff98p-4), @as(f64, 0x3.fffp+12)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x7.fffap-4), @as(f64, 0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x7.fffa8p-4), @as(f64, 0x3.fffp+12)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f64, -0x7.fffbp-4), @as(f64, 0x3.fffp+12)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f64, 0x7.fffb8p-4), @as(f64, 0x3.fffp+12)));
    try std.testing.expectEqual(0x3.aa76a38cf5d88p-1024, pow(@as(f64, 0x2.000b3p+0), @as(f64, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.d4e5475408a4p-1024, pow(@as(f64, 0x2.000584p+0), @as(f64, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.d503df508fb8p-1024, pow(@as(f64, 0x2.00058p+0), @as(f64, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.d4f49333bc2bcp-1024, pow(@as(f64, 0x2.000582p+0), @as(f64, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.35ec906f22fbcp-1024, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fe513p+8)));
    try std.testing.expectEqual(0x3.3bed4179f82bcp-1024, pow(@as(f64, 0x2p+0), @as(f64, -0x3.fe4e8p+8)));
    try std.testing.expectEqual(0x1.999999999999ap-4, pow(@as(f64, 0xap+0), @as(f64, -0x1p+0)));
    try std.testing.expectEqual(0x2.8f5c28f5c28f6p-8, pow(@as(f64, 0xap+0), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(0x4.189374bc6a7fp-12, pow(@as(f64, 0xap+0), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0x6.8db8bac710cb4p-16, pow(@as(f64, 0xap+0), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(0xa.7c5ac471b4788p-20, pow(@as(f64, 0xap+0), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(0x1.0c6f7a0b5ed8dp-20, pow(@as(f64, 0xap+0), @as(f64, -0x6p+0)));
    try std.testing.expectEqual(0x1.ad7f29abcaf48p-24, pow(@as(f64, 0xap+0), @as(f64, -0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x1p+0)));
    try std.testing.expectEqual(0xf.fffffp-4, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x1p+0)));
    try std.testing.expectEqual(0xf.ffffffffffff8p-4, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffe000001p-4, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffp-4, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffd000003p-4, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(0xf.fffffffffffe8p-4, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p-4, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffep-4, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(0xf.ffffb00000ap-4, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(0xf.fffffffffffd8p-4, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x6p+0)));
    try std.testing.expectEqual(0xf.ffffa00000fp-4, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x6p+0)));
    try std.testing.expectEqual(0xf.fffffffffffdp-4, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x7p+0)));
    try std.testing.expectEqual(0xf.ffff9000015p-4, pow(@as(f64, 0xf.fffffp-4), @as(f64, 0x7p+0)));
    try std.testing.expectEqual(0xf.fffffffffffc8p-4, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, 0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x1p+0)));
    try std.testing.expectEqual(0x1.000001000001p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x1p+0)));
    // try std.testing.expectEqual(0x1.0000000000001p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(0x1.000002000003p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(0x1.0000000000001p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0x1.000003000006p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0x1.0000000000002p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(0x1.00000400000ap+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(0x1.0000000000002p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(0x1.00000500000fp+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(0x1.0000000000003p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x6p+0)));
    try std.testing.expectEqual(0x1.000006000015p+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x6p+0)));
    try std.testing.expectEqual(0x1.0000000000003p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x7p+0)));
    try std.testing.expectEqual(0x1.00000700001cp+0, pow(@as(f64, 0xf.fffffp-4), @as(f64, -0x7p+0)));
    try std.testing.expectEqual(0x1.0000000000004p+0, pow(@as(f64, 0xf.ffffffffffff8p-4), @as(f64, -0x7p+0)));
    try std.testing.expectEqual(0x1.000002p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, 0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x1p+0)));
    try std.testing.expectEqual(0x1.0000000000001p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x1p+0)));
    try std.testing.expectEqual(0x1.000004000004p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(0x1.0000000000002p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x2p+0)));
    try std.testing.expectEqual(0x1.00000600000cp+0, pow(@as(f64, 0x1.000002p+0), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(0x1.0000000000003p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x3p+0)));
    try std.testing.expectEqual(0x1.000008000018p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(0x1.0000000000004p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x4p+0)));
    try std.testing.expectEqual(0x1.00000a000028p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(0x1.0000000000005p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x5p+0)));
    try std.testing.expectEqual(0x1.00000c00003cp+0, pow(@as(f64, 0x1.000002p+0), @as(f64, 0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x6p+0)));
    try std.testing.expectEqual(0x1.0000000000006p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x6p+0)));
    try std.testing.expectEqual(0x1.00000e000054p+0, pow(@as(f64, 0x1.000002p+0), @as(f64, 0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, 0x7p+0)));
    try std.testing.expectEqual(0x1.0000000000007p+0, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, 0x7p+0)));
    try std.testing.expectEqual(0xf.ffffe000004p-4, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x1p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffp-4, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x1p+0)));
    try std.testing.expectEqual(0xf.ffffc00000cp-4, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(0xf.fffffffffffep-4, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x2p+0)));
    try std.testing.expectEqual(0xf.ffffa000018p-4, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0xf.fffffffffffdp-4, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x3p+0)));
    try std.testing.expectEqual(0xf.ffff8000028p-4, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffcp-4, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x4p+0)));
    try std.testing.expectEqual(0xf.ffff600003cp-4, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(0xf.fffffffffffbp-4, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x5p+0)));
    try std.testing.expectEqual(0xf.ffff4000054p-4, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x6p+0)));
    try std.testing.expectEqual(0xf.fffffffffffap-4, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x6p+0)));
    try std.testing.expectEqual(0xf.ffff200007p-4, pow(@as(f64, 0x1.000002p+0), @as(f64, -0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f64, 0x1p+0), @as(f64, -0x7p+0)));
    try std.testing.expectEqual(0xf.fffffffffff9p-4, pow(@as(f64, 0x1.0000000000001p+0), @as(f64, -0x7p+0)));
    try std.testing.expectEqual(0x1.1211ae603c375p+0, pow(@as(f64, 0x1.1p+0), @as(f64, 0x1.2p+0)));
    try std.testing.expectEqual(0x1.84e58377727acp+0, pow(@as(f64, 0x1.8p+0), @as(f64, 0x1.08p+0)));
    try std.testing.expectEqual(0xf.ffffe8000006p+188, pow(@as(f64, 0xf.fffffp+124), @as(f64, 0x1.8p+0)));
    // try std.testing.expectEqual(0x5.232efee410298p+1020, pow(@as(f64, 0x2.fa3414de4p+680), @as(f64, 0x1.8p+0)));
    try std.testing.expectEqual(0x3.c74e2eeb2cdp-36, pow(@as(f64, 0x1.ce78f2p+0), @as(f64, -0x2.7f1f78p+4)));
    try std.testing.expectEqual(0x2.35bc23fdfc30cp-732, pow(@as(f64, 0xf.fffffp+124), @as(f64, -0x5.b5b648p+0)));
    try std.testing.expectEqual(0x8.df24532d4b7d8p+24, pow(@as(f64, 0x1.430d4cp+0), @as(f64, 0x5.0e462p+4)));
    try std.testing.expectEqual(std.math.inf(f64), pow(@as(f64, 0x9.8b82ap-4), @as(f64, -0x1.99907ap+12)));
    try std.testing.expectEqual(0x4.523987c590d3p+80, pow(@as(f64, 0xd.73035p-4), @as(f64, -0x1.47bb8p+8)));
    try std.testing.expectEqual(0xf.ffe5535a38f98p+124, pow(@as(f64, 0x1.059c76p+0), @as(f64, 0xf.fc05fp+8)));
    try std.testing.expectEqual(0xf.fffff29cf02fp+124, pow(@as(f64, 0x2.f58f8p+4), @as(f64, 0x1.7p+4)));
    try std.testing.expectEqual(-0xf.fffff29cf02fp+124, pow(@as(f64, -0x2.f58f8p+4), @as(f64, 0x1.7p+4)));

    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x0p+0), @as(f80, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x0p+0), @as(f80, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xap+0), @as(f80, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xap+0), @as(f80, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0xap+0), @as(f80, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0xap+0), @as(f80, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x1.4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x1.4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x8p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x1p+72)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x2.0cp+4), @as(f80, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x2.0cp+4), @as(f80, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x2.0cp+4), @as(f80, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x2.0cp+4), @as(f80, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+72), @as(f80, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+72), @as(f80, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p-72), @as(f80, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p-72), @as(f80, -0x0p+0)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1p+72), @as(f80, 0x1p+72)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xap+0), @as(f80, -0x1p+72)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp+124), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp+124), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp+124), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffffffffffffp+16380), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffffffffffffp+16380), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffffffffffffp+16380), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xap+0), @as(f80, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xap+0), @as(f80, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xap+0), @as(f80, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xbp+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xbp+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xb.1999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xb.19999p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xb.19999999999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xb.1999999999998p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xb.19999999999999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xb.199999999999999p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xb.1999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xb.19999p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xb.19999999999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xb.1999999999998p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xb.19999999999999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xb.199999999999999p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x1.bp+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1.bp+4)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x1p+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x8p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x0p+0), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x8p-4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x1p+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x8p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x0p+0), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x2p+0, pow(@as(f80, 0x1p+4), @as(f80, 0x4p-4)));
    try std.testing.expectEqual(0x1p+8, pow(@as(f80, 0x1p+64), @as(f80, 0x2p-4)));
    try std.testing.expectEqual(0x1p+4, pow(@as(f80, 0x2p+0), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0x1p+64, pow(@as(f80, 0x1p+8), @as(f80, 0x8p+0)));
    try std.testing.expectEqual(0xb.2ad170c81b4183dp-4, pow(@as(f80, 0xcp-4), @as(f80, 0x1.4p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.a64503155bc0fp+444), @as(f80, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.a64503155bc0fp+444), @as(f80, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.a64503155bc0fp+444), @as(f80, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.a64503155bc1p+444), @as(f80, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.a64503155bc1p+444), @as(f80, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.a64503155bc1p+444), @as(f80, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.a64503155bc0f67ap+444), @as(f80, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.a64503155bc0f67ap+444), @as(f80, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.a64503155bc0f67ap+444), @as(f80, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.a64503155bc0f67cp+444), @as(f80, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.a64503155bc0f67cp+444), @as(f80, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.a64503155bc0f67cp+444), @as(f80, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0xf.fffffp+20)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2p+52)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x4p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x4p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x4p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x4p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x4p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x4p+124, pow(@as(f80, -0x2p+0), @as(f80, 0x7.ep+4)));
    try std.testing.expectEqual(-0x8p+124, pow(@as(f80, -0x2p+0), @as(f80, 0x7.fp+4)));
    try std.testing.expectEqual(0x4p-128, pow(@as(f80, -0x2p+0), @as(f80, -0x7.ep+4)));
    try std.testing.expectEqual(-0x2p-128, pow(@as(f80, -0x2p+0), @as(f80, -0x7.fp+4)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p+0), @as(f80, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+0), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x1.000002000003p-256, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0x1.0000000000001p-2048, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(-0x1.000003000006p-384, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-0x1.00000000000018p-3072, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0xf.ffffe000001p+252, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffp+2044, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(-0xf.ffffd000003p+380, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffe8p+3068, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp+124), @as(f80, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp+124), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp+16380), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x4p+128, pow(@as(f80, -0x2p+64), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(-0x8p+192, pow(@as(f80, -0x2p+64), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0x1p+260, pow(@as(f80, -0x2p+64), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(-0x2p+324, pow(@as(f80, -0x2p+64), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0x2p+128, pow(@as(f80, -0x8p+40), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0x1p+172, pow(@as(f80, -0x8p+40), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(-0x8p+212, pow(@as(f80, -0x8p+40), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0x1p+132, pow(@as(f80, -0x2p+32), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(-0x2p+164, pow(@as(f80, -0x2p+32), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0x4p+128, pow(@as(f80, -0x4p+24), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0x4p+128, pow(@as(f80, -0x8p-68), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(-0x8p+192, pow(@as(f80, -0x8p-68), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0x1p+260, pow(@as(f80, -0x8p-68), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+324, pow(@as(f80, -0x8p-68), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+128, pow(@as(f80, -0x2p-44), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0x1p+172, pow(@as(f80, -0x2p-44), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(-0x8p+212, pow(@as(f80, -0x2p-44), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0x1p+132, pow(@as(f80, -0x8p-36), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+164, pow(@as(f80, -0x8p-36), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+128, pow(@as(f80, -0x4p-28), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0xf.ffffe000001p+252, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0x4p+1024, pow(@as(f80, -0x2p+512), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(-0xf.ffffd000003p+380, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-0x8p+1536, pow(@as(f80, -0x2p+512), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p+508, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0x1p+2052, pow(@as(f80, -0x2p+512), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0x2p+2564, pow(@as(f80, -0x2p+512), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0xf.ffffd000003p+380, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-0x4p+1024, pow(@as(f80, -0x4p+340), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p+508, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0x1p+1368, pow(@as(f80, -0x4p+340), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0x4p+1708, pow(@as(f80, -0x4p+340), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p+508, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0x1p+1028, pow(@as(f80, -0x2p+256), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0x2p+1284, pow(@as(f80, -0x2p+256), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0x2p+1024, pow(@as(f80, -0x2p+204), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0x4p+296, pow(@as(f80, -0x8p-152), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0x4p+1024, pow(@as(f80, -0x8p-516), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(-0x8p+444, pow(@as(f80, -0x8p-152), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-0x8p+1536, pow(@as(f80, -0x8p-516), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f80, -0x8p-152), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0x1p+2052, pow(@as(f80, -0x8p-516), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f80, -0x8p-152), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+2564, pow(@as(f80, -0x8p-516), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x8p+444, pow(@as(f80, -0x8p-152), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-0x4p+1024, pow(@as(f80, -0x4p-344), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f80, -0x8p-152), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0x1p+1368, pow(@as(f80, -0x4p-344), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f80, -0x8p-152), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+1708, pow(@as(f80, -0x4p-344), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f80, -0x8p-152), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0x1p+1028, pow(@as(f80, -0x8p-260), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f80, -0x8p-152), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+1284, pow(@as(f80, -0x8p-260), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f80, -0x8p-152), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+1024, pow(@as(f80, -0x8p-208), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0xf.ffffe000001p+252, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffp+2044, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1p+8192), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(-0xf.ffffd000003p+380, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffe8p+3068, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x1p+8192), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p+508, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffep+4092, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1p+8192), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffd8p+5116, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x1p+8192), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0xf.ffffd000003p+380, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffe8p+3068, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p+5460), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p+508, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffep+4092, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p+5460), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffd8p+5116, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p+5460), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p+508, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffep+4092, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p+4096), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffd8p+5116, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x2p+4096), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0xf.ffffb00000ap+636, pow(@as(f80, -0xf.fffffp+124), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffd8p+5116, pow(@as(f80, -0xf.ffffffffffff8p+1020), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x2p+3276), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x1p+64), @as(f80, 0x1.01p+8)));
    try std.testing.expectEqual(0x4p+296, pow(@as(f80, -0x8p-152), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0x1p+2148, pow(@as(f80, -0x4p-1076), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1p-8192), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(-0x8p+444, pow(@as(f80, -0x8p-152), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-0x4p+3220, pow(@as(f80, -0x4p-1076), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x1p-8192), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f80, -0x8p-152), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0x1p+4296, pow(@as(f80, -0x4p-1076), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1p-8192), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f80, -0x8p-152), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+5368, pow(@as(f80, -0x4p-1076), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x1p-8192), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x8p+444, pow(@as(f80, -0x8p-152), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-0x4p+3220, pow(@as(f80, -0x4p-1076), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p-5464), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f80, -0x8p-152), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0x1p+4296, pow(@as(f80, -0x4p-1076), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-5464), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f80, -0x8p-152), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+5368, pow(@as(f80, -0x4p-1076), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p-5464), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f80, -0x8p-152), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0x1p+4296, pow(@as(f80, -0x4p-1076), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4100), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f80, -0x8p-152), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+5368, pow(@as(f80, -0x4p-1076), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x8p-4100), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f80, -0x8p-152), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+5368, pow(@as(f80, -0x4p-1076), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x8p-3280), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x1p-64), @as(f80, -0x1.01p+8)));
    try std.testing.expectEqual(0x4p-128, pow(@as(f80, -0x8p-4), @as(f80, 0x7.ep+4)));
    try std.testing.expectEqual(-0x2p-128, pow(@as(f80, -0x8p-4), @as(f80, 0x7.fp+4)));
    try std.testing.expectEqual(0x4p+124, pow(@as(f80, -0x8p-4), @as(f80, -0x7.ep+4)));
    try std.testing.expectEqual(-0x8p+124, pow(@as(f80, -0x8p-4), @as(f80, -0x7.fp+4)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-4), @as(f80, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-4), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x1p+252, pow(@as(f80, -0x4p-128), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0x1p+2044, pow(@as(f80, -0x4p-1024), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0x4p+1936, pow(@as(f80, -0x8p-972), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(-0x4p+376, pow(@as(f80, -0x4p-128), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-0x4p+3064, pow(@as(f80, -0x4p-1024), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-0x8p+2904, pow(@as(f80, -0x8p-972), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(-0x4p-128, pow(@as(f80, -0x4p-128), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(-0x4p-1024, pow(@as(f80, -0x4p-1024), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(-0x4p-16384, pow(@as(f80, -0x4p-16384), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(-0x2p-16384, pow(@as(f80, -0x2p-16384), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(-0x8p-972, pow(@as(f80, -0x8p-972), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(0x1p-252, pow(@as(f80, -0x4p-128), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0x1p-2044, pow(@as(f80, -0x4p-1024), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0x4p-1940, pow(@as(f80, -0x8p-972), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(-0x4p-380, pow(@as(f80, -0x4p-128), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-0x4p-3068, pow(@as(f80, -0x4p-1024), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-0x2p-2908, pow(@as(f80, -0x8p-972), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-128), @as(f80, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-1024), @as(f80, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x4p-16384), @as(f80, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x2p-16384), @as(f80, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x8p-972), @as(f80, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-128), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-1024), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x4p-16384), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x2p-16384), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x8p-972), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0xf.ffff600002dp-4, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0xap+0)));
    try std.testing.expectEqual(0xf.fff9c001355fd88p-4, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x6.4p+4)));
    try std.testing.expectEqual(0xf.ffc18079f221888p-4, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x3.e8p+8)));
    try std.testing.expectEqual(0x5.e2d58a99d105f22p-4, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x1p+24)));
    try std.testing.expectEqual(0xc.b4e8a2f3c38e77bp-96, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x4p+28)));
    try std.testing.expectEqual(0x7.b4fa1e8fc264e5b8p-108, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x4.8d1598p+28)));
    try std.testing.expectEqual(0x1.00000a000037p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0xap+0)));
    try std.testing.expectEqual(0x1.0000640013ba029ep+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x6.4p+4)));
    try std.testing.expectEqual(0x1.0003e807a31df6cep+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x3.e8p+8)));
    try std.testing.expectEqual(0x2.b7e152be7b971aa4p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x1p+24)));
    try std.testing.expectEqual(0x1.4259ab1a8c764d24p+92, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x4p+28)));
    try std.testing.expectEqual(0x2.13780c1d4b1441b4p+104, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x4.8d1598p+28)));
    try std.testing.expectEqual(0x7.63991f6e0531841p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, 0x1p+24)));
    try std.testing.expectEqual(0x2.1377295ae8b6a038p+104, pow(@as(f80, 0x1.000002p+0), @as(f80, 0x2.468accp+28)));
    try std.testing.expectEqual(0x7.b4fd685e23a2b8a8p-108, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x2.468accp+28)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0xb.dea0deefbcfce6dp-844, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0xb.ded059d22e416edp-844, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0xb.deabd7ffdaef65fp-844, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x4.8d1598p+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x4.8d15ap+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1.590f9a6586a16cd8p+840, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1.5914feaeb8c2bb4p+840, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1.5913bfacf4af0236p+840, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x2.468adp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x2.468accp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1.5914feaeb89dec36p+840, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1.590f9a65867c9e62p+840, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1.5913bfacf48a334ep+840, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x2.468accp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x2.468adp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0xb.ded059d22f8592bp-844, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x2.468accp+60)));
    try std.testing.expectEqual(0xb.dea0deefbe4105ap-844, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x2.468adp+60)));
    try std.testing.expectEqual(0xb.deabd7ffdc3385fp-844, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x2.2785707939b37b4p-13448, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x2.468adp+76)));
    try std.testing.expectEqual(0x2.280f6312f34af8f4p-13448, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x2.468accp+76)));
    try std.testing.expectEqual(0x2.27a54f0197ba442p-13448, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x2.27a54f019c098ebcp-13448, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x2.27a54f0197fb7368p-13448, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x7.6b632ba5541b3648p+13444, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x2.468accp+76)));
    try std.testing.expectEqual(0x7.6d3e3fd0495eace8p+13444, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x2.468adp+76)));
    try std.testing.expectEqual(0x7.6cd0697cdc7d6f2p+13444, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x7.6cd0697ceb570ffp+13444, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x7.6cd0697cea76745p+13444, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x7.6d3e3fd0495d175p+13444, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x1.234568p+76)));
    try std.testing.expectEqual(0x7.6b632ba55419a118p+13444, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x1.234566p+76)));
    try std.testing.expectEqual(0x7.6cd0697ceb557a7p+13444, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x7.6cd0697cdc7bd9ap+13444, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x7.6cd0697cea74dedp+13444, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x2.280f6312f34b6eb8p-13448, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x1.234566p+76)));
    try std.testing.expectEqual(0x2.2785707939b3f0e8p-13448, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x1.234568p+76)));
    try std.testing.expectEqual(0x2.27a54f019c0a046cp-13448, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x2.27a54f0197bab9dp-13448, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x2.27a54f0197fbe918p-13448, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0xf.ffff600002dp-4, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0xap+0)));
    try std.testing.expectEqual(0xf.fff9c001355fd88p-4, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x6.4p+4)));
    try std.testing.expectEqual(0xf.ffc18079f221888p-4, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x3.e8p+8)));
    try std.testing.expectEqual(0x5.e2d58a99d105f22p-4, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x1p+24)));
    try std.testing.expectEqual(0xc.b4e8a2f3c38e77bp-96, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x4p+28)));
    try std.testing.expectEqual(0x7.b4fa1e8fc264e5b8p-108, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x4.8d1598p+28)));
    try std.testing.expectEqual(0x1.00000a000037p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, -0xap+0)));
    try std.testing.expectEqual(0x1.0000640013ba029ep+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x6.4p+4)));
    try std.testing.expectEqual(0x1.0003e807a31df6cep+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x3.e8p+8)));
    try std.testing.expectEqual(0x2.b7e152be7b971aa4p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x1p+24)));
    try std.testing.expectEqual(0x1.4259ab1a8c764d24p+92, pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x4p+28)));
    try std.testing.expectEqual(0x2.13780c1d4b1441b4p+104, pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x4.8d1598p+28)));
    try std.testing.expectEqual(0x7.63991f6e0531841p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, 0x1p+24)));
    try std.testing.expectEqual(0x2.1377295ae8b6a038p+104, pow(@as(f80, -0x1.000002p+0), @as(f80, 0x2.468accp+28)));
    try std.testing.expectEqual(0x7.b4fd685e23a2b8a8p-108, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x2.468accp+28)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0xb.dea0deefbcfce6dp-844, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0xb.ded059d22e416edp-844, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0xb.deabd7ffdaef65fp-844, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x4.8d1598p+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x4.8d15ap+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1.590f9a6586a16cd8p+840, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1.5914feaeb8c2bb4p+840, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1.5913bfacf4af0236p+840, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x2.468adp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x2.468accp+60)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1.5914feaeb89dec36p+840, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1.590f9a65867c9e62p+840, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1.5913bfacf48a334ep+840, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x2.468accp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x2.468adp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0xb.ded059d22f8592bp-844, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x2.468accp+60)));
    try std.testing.expectEqual(0xb.dea0deefbe4105ap-844, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x2.468adp+60)));
    try std.testing.expectEqual(0xb.deabd7ffdc3385fp-844, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x2.2785707939b37b4p-13448, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, 0x2.468adp+76)));
    try std.testing.expectEqual(0x2.280f6312f34af8f4p-13448, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, 0x2.468accp+76)));
    try std.testing.expectEqual(0x2.27a54f0197ba442p-13448, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x2.27a54f019c098ebcp-13448, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x2.27a54f0197fb7368p-13448, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x7.6b632ba5541b3648p+13444, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, -0x2.468accp+76)));
    try std.testing.expectEqual(0x7.6d3e3fd0495eace8p+13444, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, -0x2.468adp+76)));
    try std.testing.expectEqual(0x7.6cd0697cdc7d6f2p+13444, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x7.6cd0697ceb570ffp+13444, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x7.6cd0697cea76745p+13444, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x7.6d3e3fd0495d175p+13444, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, 0x1.234568p+76)));
    try std.testing.expectEqual(0x7.6b632ba55419a118p+13444, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, 0x1.234566p+76)));
    try std.testing.expectEqual(0x7.6cd0697ceb557a7p+13444, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x7.6cd0697cdc7bd9ap+13444, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x7.6cd0697cea74dedp+13444, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x2.280f6312f34b6eb8p-13448, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, -0x1.234566p+76)));
    try std.testing.expectEqual(0x2.2785707939b3f0e8p-13448, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, -0x1.234568p+76)));
    try std.testing.expectEqual(0x2.27a54f019c0a046cp-13448, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x2.27a54f0197bab9dp-13448, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x2.27a54f0197fbe918p-13448, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffp-4), @as(f80, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffp-4), @as(f80, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.ffffffffffff8p-4), @as(f80, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0xf.fffffffffffffffp-4), @as(f80, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000001p+0), @as(f80, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, -0x1p+0), @as(f80, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.000002p+0), @as(f80, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000001p+0), @as(f80, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, -0x1.0000000000000002p+0), @as(f80, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x1.95e4816b61bdc75p+184, pow(@as(f80, 0x1.000002p+0), @as(f80, 0x4p+28)));
    try std.testing.expectEqual(0x1.95e4816b61bdc75p+184, pow(@as(f80, -0x1.000002p+0), @as(f80, 0x4p+28)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.000002p+0), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.000002p+0), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x1.92e20f8dcb053ebp+1292, pow(@as(f80, 0x1.00000ep+0), @as(f80, 0x4p+28)));
    try std.testing.expectEqual(0x1.92e20f8dcb053ebp+1292, pow(@as(f80, -0x1.00000ep+0), @as(f80, 0x4p+28)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.00000ep+0), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.00000ep+0), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, 0x1.00000ep+0), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.00000ep+0), @as(f80, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.00000ep+0), @as(f80, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f80), pow(@as(f80, -0x1.00000ep+0), @as(f80, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0xf.fffff3fffffe8p+92, pow(@as(f80, 0xf.fffffp+124), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffffap+764, pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0xe.0b9d894b9a782d8p+12284, pow(@as(f80, 0xd.72cb2a95c7ef6cdp+16380), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0xe.0b9d894b9a782d7p+12284, pow(@as(f80, 0xd.72cb2a95c7ef6ccp+16380), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0xf.fffff3fffffe8p+92, pow(@as(f80, 0xf.fffffp+124), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffffap+764, pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0x3.987a3fd1d18736acp+12276, pow(@as(f80, 0x5.822b137da851af4p+16368), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0x3.987a3fd1d18736a8p+12276, pow(@as(f80, 0x5.822b137da851af38p+16368), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0xf.fffff3fffffe8p+92, pow(@as(f80, 0xf.fffffp+124), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffffap+764, pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0xe.ba46a73274d9f67p+12264, pow(@as(f80, 0x2.419adc280021754p+16356), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0xe.ba46a73274d9f66p+12264, pow(@as(f80, 0x2.419adc280021753cp+16356), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0xf.fffff3fffffe8p+92, pow(@as(f80, 0xf.fffffp+124), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffffap+764, pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0x3.c530cea47806a57cp+12256, pow(@as(f80, 0xe.c96440ebeed5893p+16340), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0x3.c530cea47806a578p+12256, pow(@as(f80, 0xe.c96440ebeed5892p+16340), @as(f80, 0xcp-4)));
    try std.testing.expectEqual(0xd.72cb2a95c7ef6cdp+16380, pow(@as(f80, 0xap+0), @as(f80, 0x1.344p+12)));
    try std.testing.expectEqual(0x1.584784422d97f148p+16380, pow(@as(f80, 0xap+0), @as(f80, 0x1.343p+12)));
    try std.testing.expectEqual(0x2.26d8d39d15bfe874p+16376, pow(@as(f80, 0xap+0), @as(f80, 0x1.342p+12)));
    try std.testing.expectEqual(0x3.715aec2e89330d84p+16372, pow(@as(f80, 0xap+0), @as(f80, 0x1.341p+12)));
    try std.testing.expectEqual(0xb.e5b66ecbce0b7b1p-16384, pow(@as(f80, 0xap+0), @as(f80, -0x1.343p+12)));
    try std.testing.expectEqual(0x7.6f92053f60c72ce8p-16380, pow(@as(f80, 0xap+0), @as(f80, -0x1.342p+12)));
    try std.testing.expectEqual(0x4.a5bb43479c7c7c1p-16376, pow(@as(f80, 0xap+0), @as(f80, -0x1.341p+12)));
    try std.testing.expectEqual(0xf.8150d73a5bad7b7p+16320, pow(@as(f80, 0x3.3b2e4p+88), @as(f80, 0xb.6p+4)));
    try std.testing.expectEqual(0xf.814331dd58d7f2p+16320, pow(@as(f80, 0x3.3b2e3cp+88), @as(f80, 0xb.6p+4)));
    try std.testing.expectEqual(0xf.814553110d16d4ap+16320, pow(@as(f80, 0x3.3b2e3c9fd0804p+88), @as(f80, 0xb.6p+4)));
    try std.testing.expectEqual(0xf.814553110ca9a9ep+16320, pow(@as(f80, 0x3.3b2e3c9fd0802p+88), @as(f80, 0xb.6p+4)));
    try std.testing.expectEqual(0xf.814553110d0c46cp+16320, pow(@as(f80, 0x3.3b2e3c9fd0803ce8p+88), @as(f80, 0xb.6p+4)));
    try std.testing.expectEqual(0x1.082ba3a73f5378ccp-16324, pow(@as(f80, 0x3.3b2e4p+88), @as(f80, -0xb.6p+4)));
    try std.testing.expectEqual(0x1.082c8c269868b886p-16324, pow(@as(f80, 0x3.3b2e3cp+88), @as(f80, -0xb.6p+4)));
    try std.testing.expectEqual(0x1.082c67dd6dca757ep-16324, pow(@as(f80, 0x3.3b2e3c9fd0804p+88), @as(f80, -0xb.6p+4)));
    try std.testing.expectEqual(0x1.082c67dd6dd1b97cp-16324, pow(@as(f80, 0x3.3b2e3c9fd0802p+88), @as(f80, -0xb.6p+4)));
    try std.testing.expectEqual(0x1.082c67dd6dcb2952p-16324, pow(@as(f80, 0x3.3b2e3c9fd0803ce8p+88), @as(f80, -0xb.6p+4)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x8p-152), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x8p-152), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x8p-152), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x4p-1076), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x4p-1076), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x4p-1076), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x8p-16448), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x8p-16448), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x8p-16448), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x8p-152), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x8p-152), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x8p-152), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x4p-1076), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x4p-1076), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x4p-1076), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x8p-16448), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x8p-16448), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x8p-16448), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.fffffp+124), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.fffffp+124), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.fffffp+124), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.fffffffffffffffp+16380), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.fffffffffffffffp+16380), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.fffffffffffffffp+16380), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.fffffp+124), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.fffffp+124), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.fffffp+124), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.ffffffffffff8p+1020), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.fffffffffffffffp+16380), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.fffffffffffffffp+16380), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.fffffffffffffffp+16380), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a4p-4), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a4p-4), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a4p-4), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3p-4), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3p-4), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3p-4), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d78p-4), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d78p-4), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d78p-4), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d7p-4), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d7p-4), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d7p-4), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d70a4p-4), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d70a4p-4), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d70a4p-4), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d70a3p-4), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d70a3p-4), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d70a3p-4), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a4p-4), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a4p-4), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a4p-4), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3p-4), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3p-4), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3p-4), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d78p-4), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d78p-4), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d78p-4), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d7p-4), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d7p-4), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d7p-4), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d70a4p-4), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d70a4p-4), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d70a4p-4), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d70a3p-4), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d70a3p-4), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0xf.d70a3d70a3d70a3p-4), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5ep+0), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5ep+0), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5ep+0), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5cp+0), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5cp+0), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5cp+0), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c29p+0), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c29p+0), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c29p+0), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28p+0), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28p+0), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28p+0), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28f5ep+0), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28f5ep+0), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28f5ep+0), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28f5cp+0), @as(f80, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28f5cp+0), @as(f80, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28f5cp+0), @as(f80, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5ep+0), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5ep+0), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5ep+0), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5cp+0), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5cp+0), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5cp+0), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c29p+0), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c29p+0), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c29p+0), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28p+0), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28p+0), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28p+0), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28f5ep+0), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28f5ep+0), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28f5ep+0), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28f5cp+0), @as(f80, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28f5cp+0), @as(f80, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1.028f5c28f5c28f5cp+0), @as(f80, -0x8p-16448)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f80, 0x2p+0), @as(f80, -0x1.86ap+16)));
    try std.testing.expectEqual(0x3.ab031b9f7490e4bcp-128, pow(@as(f80, 0x2p+0), @as(f80, -0x7.e2p+4)));
    try std.testing.expectEqual(0x3.5d13f32b5a75abdp-128, pow(@as(f80, 0x2p+0), @as(f80, -0x7.e4p+4)));
    try std.testing.expectEqual(0x3.159ca845541b6b74p-128, pow(@as(f80, 0x2p+0), @as(f80, -0x7.e6p+4)));
    try std.testing.expectEqual(0x2.d413cccfe779921p-128, pow(@as(f80, 0x2p+0), @as(f80, -0x7.e8p+4)));
    try std.testing.expectEqual(0x2.97fb5aa6c544e3a8p-128, pow(@as(f80, 0x2p+0), @as(f80, -0x7.eap+4)));
    try std.testing.expectEqual(0x2.60dfc14636e2a5bcp-128, pow(@as(f80, 0x2p+0), @as(f80, -0x7.ecp+4)));
    try std.testing.expectEqual(0x2.2e57078faa2f5b9cp-128, pow(@as(f80, 0x2p+0), @as(f80, -0x7.eep+4)));
    try std.testing.expectEqual(0x7.5606373ee921c978p-972, pow(@as(f80, 0x2p+0), @as(f80, -0x3.c92p+8)));
    try std.testing.expectEqual(0x6.ba27e656b4eb57ap-972, pow(@as(f80, 0x2p+0), @as(f80, -0x3.c94p+8)));
    try std.testing.expectEqual(0x6.2b39508aa836d6e8p-972, pow(@as(f80, 0x2p+0), @as(f80, -0x3.c96p+8)));
    try std.testing.expectEqual(0x5.a827999fcef3242p-972, pow(@as(f80, 0x2p+0), @as(f80, -0x3.c98p+8)));
    try std.testing.expectEqual(0x5.2ff6b54d8a89c75p-972, pow(@as(f80, 0x2p+0), @as(f80, -0x3.c9ap+8)));
    try std.testing.expectEqual(0x4.c1bf828c6dc54b78p-972, pow(@as(f80, 0x2p+0), @as(f80, -0x3.c9cp+8)));
    try std.testing.expectEqual(0x4.5cae0f1f545eb738p-972, pow(@as(f80, 0x2p+0), @as(f80, -0x3.c9ep+8)));
    try std.testing.expectEqual(0x3.ab031b9f7490e4bcp-1024, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fe2p+8)));
    try std.testing.expectEqual(0x3.5d13f32b5a75abdp-1024, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fe4p+8)));
    try std.testing.expectEqual(0x3.159ca845541b6b74p-1024, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fe6p+8)));
    try std.testing.expectEqual(0x2.d413cccfe779921p-1024, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fe8p+8)));
    try std.testing.expectEqual(0x2.97fb5aa6c544e3a8p-1024, pow(@as(f80, 0x2p+0), @as(f80, -0x3.feap+8)));
    try std.testing.expectEqual(0x2.60dfc14636e2a5bcp-1024, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fecp+8)));
    try std.testing.expectEqual(0x2.2e57078faa2f5b9cp-1024, pow(@as(f80, 0x2p+0), @as(f80, -0x3.feep+8)));
    try std.testing.expectEqual(0x3.ab031b9f7490e4b8p-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.ffe2p+12)));
    try std.testing.expectEqual(0x3.5d13f32b5a75abdp-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.ffe4p+12)));
    try std.testing.expectEqual(0x3.159ca845541b6b78p-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.ffe6p+12)));
    try std.testing.expectEqual(0x2.d413cccfe779921p-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.ffe8p+12)));
    try std.testing.expectEqual(0x2.97fb5aa6c544e3a8p-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.ffeap+12)));
    try std.testing.expectEqual(0x2.60dfc14636e2a5cp-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.ffecp+12)));
    try std.testing.expectEqual(0x2.2e57078faa2f5b98p-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.ffeep+12)));
    try std.testing.expectEqual(0x1.d5818dcfba48726p-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fff2p+12)));
    try std.testing.expectEqual(0x1.ae89f995ad3ad5e8p-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fff4p+12)));
    try std.testing.expectEqual(0x1.8ace5422aa0db5b8p-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fff6p+12)));
    try std.testing.expectEqual(0x1.6a09e667f3bcc908p-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fff8p+12)));
    try std.testing.expectEqual(0x1.4bfdad5362a271d8p-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fffap+12)));
    try std.testing.expectEqual(0x1.306fe0a31b7152ep-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fffcp+12)));
    try std.testing.expectEqual(0x1.172b83c7d517addp-16384, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fffep+12)));
    try std.testing.expectEqual(0x3.ab031b9f7490e4bcp-128, pow(@as(f80, 0x8p-4), @as(f80, 0x7.e2p+4)));
    try std.testing.expectEqual(0x3.5d13f32b5a75abdp-128, pow(@as(f80, 0x8p-4), @as(f80, 0x7.e4p+4)));
    try std.testing.expectEqual(0x3.159ca845541b6b74p-128, pow(@as(f80, 0x8p-4), @as(f80, 0x7.e6p+4)));
    try std.testing.expectEqual(0x2.d413cccfe779921p-128, pow(@as(f80, 0x8p-4), @as(f80, 0x7.e8p+4)));
    try std.testing.expectEqual(0x2.97fb5aa6c544e3a8p-128, pow(@as(f80, 0x8p-4), @as(f80, 0x7.eap+4)));
    try std.testing.expectEqual(0x2.60dfc14636e2a5bcp-128, pow(@as(f80, 0x8p-4), @as(f80, 0x7.ecp+4)));
    try std.testing.expectEqual(0x2.2e57078faa2f5b9cp-128, pow(@as(f80, 0x8p-4), @as(f80, 0x7.eep+4)));
    try std.testing.expectEqual(0x7.5606373ee921c978p-972, pow(@as(f80, 0x8p-4), @as(f80, 0x3.c92p+8)));
    try std.testing.expectEqual(0x6.ba27e656b4eb57ap-972, pow(@as(f80, 0x8p-4), @as(f80, 0x3.c94p+8)));
    try std.testing.expectEqual(0x6.2b39508aa836d6e8p-972, pow(@as(f80, 0x8p-4), @as(f80, 0x3.c96p+8)));
    try std.testing.expectEqual(0x5.a827999fcef3242p-972, pow(@as(f80, 0x8p-4), @as(f80, 0x3.c98p+8)));
    try std.testing.expectEqual(0x5.2ff6b54d8a89c75p-972, pow(@as(f80, 0x8p-4), @as(f80, 0x3.c9ap+8)));
    try std.testing.expectEqual(0x4.c1bf828c6dc54b78p-972, pow(@as(f80, 0x8p-4), @as(f80, 0x3.c9cp+8)));
    try std.testing.expectEqual(0x4.5cae0f1f545eb738p-972, pow(@as(f80, 0x8p-4), @as(f80, 0x3.c9ep+8)));
    try std.testing.expectEqual(0x3.ab031b9f7490e4bcp-1024, pow(@as(f80, 0x8p-4), @as(f80, 0x3.fe2p+8)));
    try std.testing.expectEqual(0x3.5d13f32b5a75abdp-1024, pow(@as(f80, 0x8p-4), @as(f80, 0x3.fe4p+8)));
    try std.testing.expectEqual(0x3.159ca845541b6b74p-1024, pow(@as(f80, 0x8p-4), @as(f80, 0x3.fe6p+8)));
    try std.testing.expectEqual(0x2.d413cccfe779921p-1024, pow(@as(f80, 0x8p-4), @as(f80, 0x3.fe8p+8)));
    try std.testing.expectEqual(0x2.97fb5aa6c544e3a8p-1024, pow(@as(f80, 0x8p-4), @as(f80, 0x3.feap+8)));
    try std.testing.expectEqual(0x2.60dfc14636e2a5bcp-1024, pow(@as(f80, 0x8p-4), @as(f80, 0x3.fecp+8)));
    try std.testing.expectEqual(0x2.2e57078faa2f5b9cp-1024, pow(@as(f80, 0x8p-4), @as(f80, 0x3.feep+8)));
    try std.testing.expectEqual(0x3.ab031b9f7490e4b8p-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.ffe2p+12)));
    try std.testing.expectEqual(0x3.5d13f32b5a75abdp-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.ffe4p+12)));
    try std.testing.expectEqual(0x3.159ca845541b6b78p-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.ffe6p+12)));
    try std.testing.expectEqual(0x2.d413cccfe779921p-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.ffe8p+12)));
    try std.testing.expectEqual(0x2.97fb5aa6c544e3a8p-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.ffeap+12)));
    try std.testing.expectEqual(0x2.60dfc14636e2a5cp-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.ffecp+12)));
    try std.testing.expectEqual(0x2.2e57078faa2f5b98p-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.ffeep+12)));
    try std.testing.expectEqual(0x1.d5818dcfba48726p-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.fff2p+12)));
    try std.testing.expectEqual(0x1.ae89f995ad3ad5e8p-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.fff4p+12)));
    try std.testing.expectEqual(0x1.8ace5422aa0db5b8p-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.fff6p+12)));
    try std.testing.expectEqual(0x1.6a09e667f3bcc908p-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.fff8p+12)));
    try std.testing.expectEqual(0x1.4bfdad5362a271d8p-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.fffap+12)));
    try std.testing.expectEqual(0x1.306fe0a31b7152ep-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.fffcp+12)));
    try std.testing.expectEqual(0x1.172b83c7d517addp-16384, pow(@as(f80, 0x8p-4), @as(f80, 0x3.fffep+12)));
    try std.testing.expectEqual(0x3.ffe0807d02b2a2ap-128, pow(@as(f80, 0x2.00002p+0), @as(f80, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ffc101f405952ap-128, pow(@as(f80, -0x2.00004p+0), @as(f80, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ffa1846500d7b498p-128, pow(@as(f80, 0x2.00006p+0), @as(f80, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff8207cfecaa9fe4p-128, pow(@as(f80, -0x2.00008p+0), @as(f80, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff628c34c13e8854p-128, pow(@as(f80, 0x2.0000ap+0), @as(f80, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff43119376c44948p-128, pow(@as(f80, -0x2.0000cp+0), @as(f80, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff2397ec056cfd24p-128, pow(@as(f80, 0x2.0000ep+0), @as(f80, -0x7.ep+4)));
    try std.testing.expectEqual(0x7.fe1bb959dfbf13a8p-972, pow(@as(f80, 0x2.00002p+0), @as(f80, -0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.fc37e555601f1a5p-972, pow(@as(f80, -0x2.00004p+0), @as(f80, -0x3.c9p+8)));
    try std.testing.expectEqual(0x7.fa5483d757aa2e48p-972, pow(@as(f80, 0x2.00006p+0), @as(f80, -0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.f87194c4a35bbc08p-972, pow(@as(f80, -0x2.00008p+0), @as(f80, -0x3.c9p+8)));
    try std.testing.expectEqual(0x7.f68f1802269efaap-972, pow(@as(f80, 0x2.0000ap+0), @as(f80, -0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.f4ad0d74cb4d6488p-972, pow(@as(f80, -0x2.0000cp+0), @as(f80, -0x3.c9p+8)));
    try std.testing.expectEqual(0x7.f2cb750181ad309p-972, pow(@as(f80, 0x2.0000ep+0), @as(f80, -0x3.c9p+8)));
    try std.testing.expectEqual(0x3.ff009fe55b7f933p-1024, pow(@as(f80, 0x2.00002p+0), @as(f80, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fe017f8acd5110ecp-1024, pow(@as(f80, -0x2.00004p+0), @as(f80, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fd029ee0676e3904p-1024, pow(@as(f80, 0x2.00006p+0), @as(f80, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fc03fdd63fcccb94p-1024, pow(@as(f80, -0x2.00008p+0), @as(f80, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fb059c5c705d89a4p-1024, pow(@as(f80, 0x2.0000ap+0), @as(f80, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fa077a63170b360cp-1024, pow(@as(f80, -0x2.0000cp+0), @as(f80, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.f90997da55b9968cp-1024, pow(@as(f80, 0x2.0000ep+0), @as(f80, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.f0205401e099e618p-16384, pow(@as(f80, 0x2.00002p+0), @as(f80, -0x3.ffep+12)));
    try std.testing.expectEqual(0x3.e07fa761113b0c6p-16384, pow(@as(f80, -0x2.00004p+0), @as(f80, -0x3.ffep+12)));
    try std.testing.expectEqual(0x3.d11d0015916a25ep-16384, pow(@as(f80, 0x2.00006p+0), @as(f80, -0x3.ffep+12)));
    try std.testing.expectEqual(0x3.c1f767f7c9b806p-16384, pow(@as(f80, -0x2.00008p+0), @as(f80, -0x3.ffep+12)));
    try std.testing.expectEqual(0x3.b30decb1287dd0e8p-16384, pow(@as(f80, 0x2.0000ap+0), @as(f80, -0x3.ffep+12)));
    try std.testing.expectEqual(0x3.a45f9facfbb087a8p-16384, pow(@as(f80, -0x2.0000cp+0), @as(f80, -0x3.ffep+12)));
    try std.testing.expectEqual(0x3.95eb960986d7736p-16384, pow(@as(f80, 0x2.0000ep+0), @as(f80, -0x3.ffep+12)));
    try std.testing.expectEqual(0x1.f8100a7fefa4f41p-16384, pow(@as(f80, 0x2.00002p+0), @as(f80, -0x3.fffp+12)));
    try std.testing.expectEqual(-0x1.f03f95a895e87378p-16384, pow(@as(f80, -0x2.00004p+0), @as(f80, -0x3.fffp+12)));
    try std.testing.expectEqual(0x1.e88e247021e00c98p-16384, pow(@as(f80, 0x2.00006p+0), @as(f80, -0x3.fffp+12)));
    try std.testing.expectEqual(-0x1.e0fb3bbd15ecbd88p-16384, pow(@as(f80, -0x2.00008p+0), @as(f80, -0x3.fffp+12)));
    try std.testing.expectEqual(0x1.d986625e958159b8p-16384, pow(@as(f80, 0x2.0000ap+0), @as(f80, -0x3.fffp+12)));
    try std.testing.expectEqual(-0x1.d22f2104d1767548p-16384, pow(@as(f80, -0x2.0000cp+0), @as(f80, -0x3.fffp+12)));
    try std.testing.expectEqual(0x1.caf50239927289ap-16384, pow(@as(f80, 0x2.0000ep+0), @as(f80, -0x3.fffp+12)));
    try std.testing.expectEqual(0x3.fe27ec152f28ce64p-128, pow(@as(f80, 0x7.fff88p-4), @as(f80, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fe475e27e237b498p-128, pow(@as(f80, -0x7.fff9p-4), @as(f80, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fe66d130450f5d4p-128, pow(@as(f80, 0x7.fff98p-4), @as(f80, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fe86452e5f1ffdc8p-128, pow(@as(f80, -0x7.fffap-4), @as(f80, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fea5ba2237da04c8p-128, pow(@as(f80, 0x7.fffa8p-4), @as(f80, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fec5300bd6ae1a1p-128, pow(@as(f80, -0x7.fffbp-4), @as(f80, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fee4a6eb430d1ea4p-128, pow(@as(f80, 0x7.fffb8p-4), @as(f80, 0x7.ep+4)));
    try std.testing.expectEqual(0x7.e3ce962b18aedd9p-972, pow(@as(f80, 0x7.fff88p-4), @as(f80, 0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.e5aca4f5b1c68a98p-972, pow(@as(f80, -0x7.fff9p-4), @as(f80, 0x3.c9p+8)));
    try std.testing.expectEqual(0x7.e78b24c88758eef8p-972, pow(@as(f80, 0x7.fff98p-4), @as(f80, 0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.e96a15be4c04fe8p-972, pow(@as(f80, -0x7.fffap-4), @as(f80, 0x3.c9p+8)));
    try std.testing.expectEqual(0x7.eb4977f1b8b65088p-972, pow(@as(f80, 0x7.fffa8p-4), @as(f80, 0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.ed294b7d8ca69bfp-972, pow(@as(f80, -0x7.fffbp-4), @as(f80, 0x3.c9p+8)));
    try std.testing.expectEqual(0x7.ef09907c8d5f33bp-972, pow(@as(f80, 0x7.fffb8p-4), @as(f80, 0x3.c9p+8)));
    try std.testing.expectEqual(0x3.f1235a29d7746f1cp-1024, pow(@as(f80, 0x7.fff88p-4), @as(f80, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f21f452c96b1bcdp-1024, pow(@as(f80, -0x7.fff9p-4), @as(f80, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f31b6f02e5c23c54p-1024, pow(@as(f80, 0x7.fff98p-4), @as(f80, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f417d7bc6bd50fd4p-1024, pow(@as(f80, -0x7.fffap-4), @as(f80, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f5147f68d3fec038p-1024, pow(@as(f80, 0x7.fffa8p-4), @as(f80, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f6116617cd3a352p-1024, pow(@as(f80, -0x7.fffbp-4), @as(f80, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f70e8bd90a69ad4p-1024, pow(@as(f80, 0x7.fffb8p-4), @as(f80, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.2a128ed19377ba9p-16384, pow(@as(f80, 0x7.fff88p-4), @as(f80, 0x3.ffep+12)));
    try std.testing.expectEqual(0x3.36d3f04fdca749b8p-16384, pow(@as(f80, -0x7.fff9p-4), @as(f80, 0x3.ffep+12)));
    try std.testing.expectEqual(0x3.43c8bba7318cc618p-16384, pow(@as(f80, 0x7.fff98p-4), @as(f80, 0x3.ffep+12)));
    try std.testing.expectEqual(0x3.50f1c0100d963158p-16384, pow(@as(f80, -0x7.fffap-4), @as(f80, 0x3.ffep+12)));
    try std.testing.expectEqual(0x3.5e4fd0061173229p-16384, pow(@as(f80, 0x7.fffa8p-4), @as(f80, 0x3.ffep+12)));
    try std.testing.expectEqual(0x3.6be3c15528b22258p-16384, pow(@as(f80, -0x7.fffbp-4), @as(f80, 0x3.ffep+12)));
    try std.testing.expectEqual(0x3.79ae6d26e458869p-16384, pow(@as(f80, 0x7.fffb8p-4), @as(f80, 0x3.ffep+12)));
    try std.testing.expectEqual(0x1.9507cbb016c9a028p-16384, pow(@as(f80, 0x7.fff88p-4), @as(f80, 0x3.fffp+12)));
    try std.testing.expectEqual(-0x1.9b68902b3530b45p-16384, pow(@as(f80, -0x7.fff9p-4), @as(f80, 0x3.fffp+12)));
    try std.testing.expectEqual(0x1.a1e30a4a0c8a76fp-16384, pow(@as(f80, 0x7.fff98p-4), @as(f80, 0x3.fffp+12)));
    try std.testing.expectEqual(-0x1.a877a1ad5ec51398p-16384, pow(@as(f80, -0x7.fffap-4), @as(f80, 0x3.fffp+12)));
    try std.testing.expectEqual(0x1.af26bf9799377b48p-16384, pow(@as(f80, 0x7.fffa8p-4), @as(f80, 0x3.fffp+12)));
    try std.testing.expectEqual(-0x1.b5f0cef367ee7478p-16384, pow(@as(f80, -0x7.fffbp-4), @as(f80, 0x3.fffp+12)));
    try std.testing.expectEqual(0x1.bcd63c5a6379531p-16384, pow(@as(f80, 0x7.fffb8p-4), @as(f80, 0x3.fffp+12)));
    try std.testing.expectEqual(0x3.aa76a38cf5d87fccp-1024, pow(@as(f80, 0x2.000b3p+0), @as(f80, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.d4e5475408a3f6e8p-1024, pow(@as(f80, 0x2.000584p+0), @as(f80, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.d503df508fb8195cp-1024, pow(@as(f80, 0x2.00058p+0), @as(f80, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.d4f49333bc2baaecp-1024, pow(@as(f80, 0x2.000582p+0), @as(f80, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.35ec906f22fbcp-1024, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fe513p+8)));
    try std.testing.expectEqual(0x3.3bed4179f82bc004p-1024, pow(@as(f80, 0x2p+0), @as(f80, -0x3.fe4e8p+8)));
    try std.testing.expectEqual(0x1.999999999999999ap-4, pow(@as(f80, 0xap+0), @as(f80, -0x1p+0)));
    try std.testing.expectEqual(0x2.8f5c28f5c28f5c28p-8, pow(@as(f80, 0xap+0), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0x4.189374bc6a7ef9d8p-12, pow(@as(f80, 0xap+0), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0x6.8db8bac710cb296p-16, pow(@as(f80, 0xap+0), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0xa.7c5ac471b478423p-20, pow(@as(f80, 0xap+0), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0x1.0c6f7a0b5ed8d36cp-20, pow(@as(f80, 0xap+0), @as(f80, -0x6p+0)));
    try std.testing.expectEqual(0x1.ad7f29abcaf48578p-24, pow(@as(f80, 0xap+0), @as(f80, -0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(0xf.fffffp-4, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(0xf.ffffffffffff8p-4, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(0xf.fffffffffffffffp-4, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffe000001p-4, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffp-4, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffep-4, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffd000003p-4, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0xf.fffffffffffe8p-4, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffdp-4, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0xf.ffffc000006p-4, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffep-4, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffcp-4, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0xf.ffffb00000ap-4, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0xf.fffffffffffd8p-4, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffbp-4, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x6p+0)));
    try std.testing.expectEqual(0xf.ffffa00000fp-4, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x6p+0)));
    try std.testing.expectEqual(0xf.fffffffffffdp-4, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x6p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffap-4, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x7p+0)));
    try std.testing.expectEqual(0xf.ffff9000015p-4, pow(@as(f80, 0xf.fffffp-4), @as(f80, 0x7p+0)));
    try std.testing.expectEqual(0xf.fffffffffffc8p-4, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, 0x7p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffff9p-4, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, 0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x1p+0)));
    try std.testing.expectEqual(0x1.000001000001p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x1p+0)));
    try std.testing.expectEqual(0x1.00000000000008p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x1p+0)));
    // try std.testing.expectEqual(0x1.0000000000000002p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0x1.000002000003p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0x1.0000000000001p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0x1.0000000000000002p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0x1.000003000006p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0x1.00000000000018p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0x1.0000000000000004p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0x1.00000400000ap+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0x1.0000000000002p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0x1.0000000000000004p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0x1.00000500000fp+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0x1.00000000000028p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x5p+0)));
    // try std.testing.expectEqual(0x1.0000000000000006p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x6p+0)));
    try std.testing.expectEqual(0x1.000006000015p+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x6p+0)));
    try std.testing.expectEqual(0x1.0000000000003p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x6p+0)));
    try std.testing.expectEqual(0x1.0000000000000006p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x7p+0)));
    try std.testing.expectEqual(0x1.00000700001cp+0, pow(@as(f80, 0xf.fffffp-4), @as(f80, -0x7p+0)));
    try std.testing.expectEqual(0x1.00000000000038p+0, pow(@as(f80, 0xf.ffffffffffff8p-4), @as(f80, -0x7p+0)));
    try std.testing.expectEqual(0x1.0000000000000008p+0, pow(@as(f80, 0xf.fffffffffffffffp-4), @as(f80, -0x7p+0)));
    try std.testing.expectEqual(0x1.000002p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(0x1.0000000000001p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(0x1.0000000000000002p+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x1p+0)));
    try std.testing.expectEqual(0x1.000004000004p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0x1.0000000000002p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0x1.0000000000000004p+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x2p+0)));
    try std.testing.expectEqual(0x1.00000600000cp+0, pow(@as(f80, 0x1.000002p+0), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0x1.0000000000003p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0x1.0000000000000006p+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x3p+0)));
    try std.testing.expectEqual(0x1.000008000018p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0x1.0000000000004p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0x1.0000000000000008p+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x4p+0)));
    try std.testing.expectEqual(0x1.00000a000028p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0x1.0000000000005p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0x1.000000000000000ap+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x5p+0)));
    try std.testing.expectEqual(0x1.00000c00003cp+0, pow(@as(f80, 0x1.000002p+0), @as(f80, 0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x6p+0)));
    try std.testing.expectEqual(0x1.0000000000006p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x6p+0)));
    try std.testing.expectEqual(0x1.000000000000000cp+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x6p+0)));
    try std.testing.expectEqual(0x1.00000e0000540002p+0, pow(@as(f80, 0x1.000002p+0), @as(f80, 0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, 0x7p+0)));
    try std.testing.expectEqual(0x1.0000000000007p+0, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, 0x7p+0)));
    try std.testing.expectEqual(0x1.000000000000000ep+0, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, 0x7p+0)));
    try std.testing.expectEqual(0xf.ffffe000004p-4, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x1p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffp-4, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x1p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffep-4, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x1p+0)));
    try std.testing.expectEqual(0xf.ffffc00000cp-4, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0xf.fffffffffffep-4, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffcp-4, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x2p+0)));
    try std.testing.expectEqual(0xf.ffffa000018p-4, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0xf.fffffffffffdp-4, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffap-4, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x3p+0)));
    try std.testing.expectEqual(0xf.ffff8000027ffffp-4, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffcp-4, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffff8p-4, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x4p+0)));
    try std.testing.expectEqual(0xf.ffff600003bffffp-4, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0xf.fffffffffffbp-4, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffff6p-4, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x5p+0)));
    try std.testing.expectEqual(0xf.ffff4000053fffep-4, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x6p+0)));
    try std.testing.expectEqual(0xf.fffffffffffap-4, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x6p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffff4p-4, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x6p+0)));
    try std.testing.expectEqual(0xf.ffff200006ffffdp-4, pow(@as(f80, 0x1.000002p+0), @as(f80, -0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f80, 0x1p+0), @as(f80, -0x7p+0)));
    try std.testing.expectEqual(0xf.fffffffffff9p-4, pow(@as(f80, 0x1.0000000000001p+0), @as(f80, -0x7p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffff2p-4, pow(@as(f80, 0x1.0000000000000002p+0), @as(f80, -0x7p+0)));
    try std.testing.expectEqual(0x1.1211ae603c374d4p+0, pow(@as(f80, 0x1.1p+0), @as(f80, 0x1.2p+0)));
    try std.testing.expectEqual(0x1.84e58377727ac18cp+0, pow(@as(f80, 0x1.8p+0), @as(f80, 0x1.08p+0)));
    try std.testing.expectEqual(0xf.ffffe8000006p+188, pow(@as(f80, 0xf.fffffp+124), @as(f80, 0x1.8p+0)));
    try std.testing.expectEqual(0x5.232efee41029ap+1020, pow(@as(f80, 0x2.fa3414de4p+680), @as(f80, 0x1.8p+0)));
    try std.testing.expectEqual(0x3.c74e2eeb2cd00268p-36, pow(@as(f80, 0x1.ce78f2p+0), @as(f80, -0x2.7f1f78p+4)));
    try std.testing.expectEqual(0x2.35bc23fdfc30b038p-732, pow(@as(f80, 0xf.fffffp+124), @as(f80, -0x5.b5b648p+0)));
    try std.testing.expectEqual(0x8.df24532d4b7d75fp+24, pow(@as(f80, 0x1.430d4cp+0), @as(f80, 0x5.0e462p+4)));
    try std.testing.expectEqual(0xd.20e27f191eac857p+4880, pow(@as(f80, 0x9.8b82ap-4), @as(f80, -0x1.99907ap+12)));
    try std.testing.expectEqual(0x4.523987c590d31928p+80, pow(@as(f80, 0xd.73035p-4), @as(f80, -0x1.47bb8p+8)));
    try std.testing.expectEqual(0xf.ffe5535a38f9be6p+124, pow(@as(f80, 0x1.059c76p+0), @as(f80, 0xf.fc05fp+8)));
    try std.testing.expectEqual(0xf.fffff29cf02eeecp+124, pow(@as(f80, 0x2.f58f8p+4), @as(f80, 0x1.7p+4)));
    try std.testing.expectEqual(-0xf.fffff29cf02eeecp+124, pow(@as(f80, -0x2.f58f8p+4), @as(f80, 0x1.7p+4)));

    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x0p+0), @as(f128, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x0p+0), @as(f128, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xap+0), @as(f128, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xap+0), @as(f128, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0xap+0), @as(f128, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0xap+0), @as(f128, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x1.4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x1.4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x8p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x1p+72)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x2.0cp+4), @as(f128, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x2.0cp+4), @as(f128, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x2.0cp+4), @as(f128, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x2.0cp+4), @as(f128, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+72), @as(f128, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+72), @as(f128, -0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p-72), @as(f128, 0x0p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p-72), @as(f128, -0x0p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1p+72), @as(f128, 0x1p+72)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xap+0), @as(f128, -0x1p+72)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp+124), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp+124), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp+124), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp+124), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp+124), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xap+0), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xap+0), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xap+0), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xap+0), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xap+0), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xbp+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xbp+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xb.1999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xb.19999p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xb.19999999999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xb.1999999999998p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xb.19999999999999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xb.199999999999999p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xb.19999999999999999999999999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xb.1999999999999999999999999998p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xb.1999999999999999999999999cp+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xb.19999999999999999999999998p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xb.1999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xb.19999p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xb.19999999999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xb.1999999999998p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xb.19999999999999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xb.199999999999999p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xb.19999999999999999999999999ap+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xb.1999999999999999999999999998p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xb.1999999999999999999999999cp+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xb.19999999999999999999999998p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x1.bp+4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1.bp+4)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x1p+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x8p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x0p+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x8p-4)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x1p+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x8p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x0p+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x2p+0, pow(@as(f128, 0x1p+4), @as(f128, 0x4p-4)));
    try std.testing.expectEqual(0x1p+8, pow(@as(f128, 0x1p+64), @as(f128, 0x2p-4)));
    try std.testing.expectEqual(0x1p+4, pow(@as(f128, 0x2p+0), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0x1p+64, pow(@as(f128, 0x1p+8), @as(f128, 0x8p+0)));
    try std.testing.expectEqual(0xb.2ad170c81b4183d3186cfafaccc8p-4, pow(@as(f128, 0xcp-4), @as(f128, 0x1.4p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0fp+444), @as(f128, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0fp+444), @as(f128, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0fp+444), @as(f128, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc1p+444), @as(f128, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc1p+444), @as(f128, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc1p+444), @as(f128, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67ap+444), @as(f128, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67ap+444), @as(f128, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67ap+444), @as(f128, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67cp+444), @as(f128, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67cp+444), @as(f128, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67cp+444), @as(f128, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67a206bd9b6c507p+444), @as(f128, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67a206bd9b6c507p+444), @as(f128, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67a206bd9b6c507p+444), @as(f128, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67a206bd9b6c508p+444), @as(f128, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67a206bd9b6c508p+444), @as(f128, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67a206bd9b6c508p+444), @as(f128, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67a206bd9b6c5p+444), @as(f128, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67a206bd9b6c5p+444), @as(f128, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67a206bd9b6c5p+444), @as(f128, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67a206bd9b6c58p+444), @as(f128, -0x1.5c74ep+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67a206bd9b6c58p+444), @as(f128, -0x1.5c74e2p+56)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.a64503155bc0f67a206bd9b6c58p+444), @as(f128, -0x1.5c74e09fee5p+56)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x4p+124, pow(@as(f128, -0x2p+0), @as(f128, 0x7.ep+4)));
    try std.testing.expectEqual(-0x8p+124, pow(@as(f128, -0x2p+0), @as(f128, 0x7.fp+4)));
    try std.testing.expectEqual(0x4p-128, pow(@as(f128, -0x2p+0), @as(f128, -0x7.ep+4)));
    try std.testing.expectEqual(-0x2p-128, pow(@as(f128, -0x2p+0), @as(f128, -0x7.fp+4)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p+0), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+0), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x1.000002000003000004000005p-256, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x1.00000000000010000000000000cp-2048, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x1.00000000000008000000000000bp-2048, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(-0x1.00000300000600000a00000fp-384, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-0x1.000000000000180000000000018p-3072, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-0x1.0000000000000c0000000000012p-3072, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0xf.ffffe000001p+252, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffff00000000000004p+2044, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffff7ffffffffffff9p+2044, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(-0xf.ffffd000002ffffffp+380, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffe8000000000000cp+3068, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0xf.ffffffffffff3ffffffffffff7p+3068, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp+124), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp+124), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp+16380), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x4p+128, pow(@as(f128, -0x2p+64), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(-0x8p+192, pow(@as(f128, -0x2p+64), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0x1p+260, pow(@as(f128, -0x2p+64), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(-0x2p+324, pow(@as(f128, -0x2p+64), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0x2p+128, pow(@as(f128, -0x8p+40), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0x1p+172, pow(@as(f128, -0x8p+40), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(-0x8p+212, pow(@as(f128, -0x8p+40), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0x1p+132, pow(@as(f128, -0x2p+32), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(-0x2p+164, pow(@as(f128, -0x2p+32), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0x4p+128, pow(@as(f128, -0x4p+24), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0x4p+128, pow(@as(f128, -0x8p-68), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(-0x8p+192, pow(@as(f128, -0x8p-68), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0x1p+260, pow(@as(f128, -0x8p-68), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+324, pow(@as(f128, -0x8p-68), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+128, pow(@as(f128, -0x2p-44), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0x1p+172, pow(@as(f128, -0x2p-44), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(-0x8p+212, pow(@as(f128, -0x2p-44), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0x1p+132, pow(@as(f128, -0x8p-36), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+164, pow(@as(f128, -0x8p-36), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+128, pow(@as(f128, -0x4p-28), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0xf.ffffe000001p+252, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0x4p+1024, pow(@as(f128, -0x2p+512), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(-0xf.ffffd000002ffffffp+380, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0x8p+1536, pow(@as(f128, -0x2p+512), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffc000005fffffc000001p+508, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0x1p+2052, pow(@as(f128, -0x2p+512), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb000009fffff6000005p+636, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0x2p+2564, pow(@as(f128, -0x2p+512), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0xf.ffffd000002ffffffp+380, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0x4p+1024, pow(@as(f128, -0x4p+340), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffc000005fffffc000001p+508, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0x1p+1368, pow(@as(f128, -0x4p+340), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb000009fffff6000005p+636, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0x4p+1708, pow(@as(f128, -0x4p+340), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0xf.ffffc000005fffffc000001p+508, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0x1p+1028, pow(@as(f128, -0x2p+256), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb000009fffff6000005p+636, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0x2p+1284, pow(@as(f128, -0x2p+256), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0xf.ffffb000009fffff6000005p+636, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0x2p+1024, pow(@as(f128, -0x2p+204), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0x4p+296, pow(@as(f128, -0x8p-152), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x4p+1024, pow(@as(f128, -0x8p-516), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(-0x8p+444, pow(@as(f128, -0x8p-152), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-0x8p+1536, pow(@as(f128, -0x8p-516), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f128, -0x8p-152), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0x1p+2052, pow(@as(f128, -0x8p-516), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f128, -0x8p-152), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+2564, pow(@as(f128, -0x8p-516), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x8p+444, pow(@as(f128, -0x8p-152), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-0x4p+1024, pow(@as(f128, -0x4p-344), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f128, -0x8p-152), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0x1p+1368, pow(@as(f128, -0x4p-344), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f128, -0x8p-152), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+1708, pow(@as(f128, -0x4p-344), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f128, -0x8p-152), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0x1p+1028, pow(@as(f128, -0x8p-260), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f128, -0x8p-152), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+1284, pow(@as(f128, -0x8p-260), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f128, -0x8p-152), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+1024, pow(@as(f128, -0x8p-208), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0xf.ffffe000001p+252, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffff00000000000004p+2044, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1p+8192), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffff7ffffffffffff9p+2044, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(-0xf.ffffd000002ffffffp+380, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffe8000000000000cp+3068, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x1p+8192), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0xf.ffffffffffff3ffffffffffff7p+3068, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffc000005fffffc000001p+508, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffe00000000000018p+4092, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1p+8192), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffefffffffffffff6p+4092, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb000009fffff6000005p+636, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffd80000000000028p+5116, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x1p+8192), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffebffffffffffff6p+5116, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0xf.ffffd000002ffffffp+380, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffe8000000000000cp+3068, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p+5460), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0xf.ffffffffffff3ffffffffffff7p+3068, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffc000005fffffc000001p+508, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffe00000000000018p+4092, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p+5460), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffefffffffffffff6p+4092, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb000009fffff6000005p+636, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffd80000000000028p+5116, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p+5460), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffebffffffffffff6p+5116, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0xf.ffffc000005fffffc000001p+508, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffe00000000000018p+4092, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p+4096), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffefffffffffffff6p+4092, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(-0xf.ffffb000009fffff6000005p+636, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffd80000000000028p+5116, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p+4096), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffebffffffffffff6p+5116, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0xf.ffffb000009fffff6000005p+636, pow(@as(f128, -0xf.fffffp+124), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffd80000000000028p+5116, pow(@as(f128, -0xf.ffffffffffff8p+1020), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p+3276), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-0xf.fffffffffffebffffffffffff6p+5116, pow(@as(f128, -0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x1p+64), @as(f128, 0x1.01p+8)));
    try std.testing.expectEqual(0x4p+296, pow(@as(f128, -0x8p-152), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x1p+2148, pow(@as(f128, -0x4p-1076), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1p-8192), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(-0x8p+444, pow(@as(f128, -0x8p-152), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-0x4p+3220, pow(@as(f128, -0x4p-1076), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x1p-8192), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f128, -0x8p-152), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0x1p+4296, pow(@as(f128, -0x4p-1076), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1p-8192), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f128, -0x8p-152), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+5368, pow(@as(f128, -0x4p-1076), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x1p-8192), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x8p+444, pow(@as(f128, -0x8p-152), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-0x4p+3220, pow(@as(f128, -0x4p-1076), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-5464), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f128, -0x8p-152), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0x1p+4296, pow(@as(f128, -0x4p-1076), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-5464), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f128, -0x8p-152), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+5368, pow(@as(f128, -0x4p-1076), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-5464), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0x1p+596, pow(@as(f128, -0x8p-152), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0x1p+4296, pow(@as(f128, -0x4p-1076), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4100), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f128, -0x8p-152), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+5368, pow(@as(f128, -0x4p-1076), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x8p-4100), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x2p+744, pow(@as(f128, -0x8p-152), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-0x4p+5368, pow(@as(f128, -0x4p-1076), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x8p-3280), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x1p-64), @as(f128, -0x1.01p+8)));
    try std.testing.expectEqual(0x4p-128, pow(@as(f128, -0x8p-4), @as(f128, 0x7.ep+4)));
    try std.testing.expectEqual(-0x2p-128, pow(@as(f128, -0x8p-4), @as(f128, 0x7.fp+4)));
    try std.testing.expectEqual(0x4p+124, pow(@as(f128, -0x8p-4), @as(f128, -0x7.ep+4)));
    try std.testing.expectEqual(-0x8p+124, pow(@as(f128, -0x8p-4), @as(f128, -0x7.fp+4)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-4), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-4), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x1p+252, pow(@as(f128, -0x4p-128), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x1p+2044, pow(@as(f128, -0x4p-1024), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x4p+1936, pow(@as(f128, -0x8p-972), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(-0x4p+376, pow(@as(f128, -0x4p-128), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-0x4p+3064, pow(@as(f128, -0x4p-1024), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-0x8p+2904, pow(@as(f128, -0x8p-972), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(-0x4p-128, pow(@as(f128, -0x4p-128), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(-0x4p-1024, pow(@as(f128, -0x4p-1024), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(-0x4p-16384, pow(@as(f128, -0x4p-16384), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(-0x2p-16384, pow(@as(f128, -0x2p-16384), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(-0x8p-972, pow(@as(f128, -0x8p-972), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(0x1p-252, pow(@as(f128, -0x4p-128), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0x1p-2044, pow(@as(f128, -0x4p-1024), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0x4p-1940, pow(@as(f128, -0x8p-972), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(-0x4p-380, pow(@as(f128, -0x4p-128), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0x4p-3068, pow(@as(f128, -0x4p-1024), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-0x2p-2908, pow(@as(f128, -0x8p-972), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0xf.fffffp+20)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x1.fffffep+24)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x1.fffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x2p+52)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x3.fffffcp+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x4p+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0xf.fffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x1p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x1.fffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x2p+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x3.fffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x4p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x7.fffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x1.fffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x2p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x3.fffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x4p+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-128), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-1024), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x4p-16384), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x2p-16384), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x8p-972), @as(f128, -0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0xf.fffffp+20)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x1.fffffep+24)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x2p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x1.fffffep+52)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x1.fffffffffffffp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x4p+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x3.fffffcp+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x3.ffffffffffffep+52)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x1p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0xf.fffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0xf.ffffffffffff8p+60)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0xf.fffffffffffffffp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x2p+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x1.fffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x1.fffffffffffffp+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x1.fffffffffffffffep+64)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x4p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x3.fffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x3.ffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x3.fffffffffffffffcp+104)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x3.ffffffffffffffffffffffffffp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x7.fffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x7.ffffffffffffcp+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x7.fffffffffffffff8p+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x7.fffffffffffffffffffffffffep+104)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x2p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x1.fffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x1.fffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x1.fffffffffffffffep+112)));
    try std.testing.expectEqual(-0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x1.ffffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x1.ffffffffffffffffffffffffff8p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x4p+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x3.fffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x3.ffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x3.fffffffffffffffcp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x3.fffffffffffffffffffffffffffep+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0x3.ffffffffffffffffffffffffffp+112)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-128), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-1024), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x4p-16384), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x2p-16384), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x8p-972), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0xf.ffff600002cffff880000d1ffffp-4, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0xap+0)));
    try std.testing.expectEqual(0xf.fff9c001355fd885c3bd54483348p-4, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x6.4p+4)));
    try std.testing.expectEqual(0xf.ffc18079f221887cc9faaa72e72p-4, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x3.e8p+8)));
    try std.testing.expectEqual(0x5.e2d58a99d105f22148d9aa4810bcp-4, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x1p+24)));
    try std.testing.expectEqual(0xc.b4e8a2f3c38e77ad07f54c04c79p-96, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4p+28)));
    try std.testing.expectEqual(0x7.b4fa1e8fc264e5b778223ea471ap-108, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d1598p+28)));
    try std.testing.expectEqual(0x1.00000a0000370000dc0002cb0008p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0xap+0)));
    try std.testing.expectEqual(0x1.0000640013ba029eb44376a07b3dp+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x6.4p+4)));
    try std.testing.expectEqual(0x1.0003e807a31df6cdda7c3a40d85fp+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x3.e8p+8)));
    // try std.testing.expectEqual(0x2.b7e152be7b971aa2272ed5772126p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x1p+24)));
    try std.testing.expectEqual(0x1.4259ab1a8c764d243a58c5120fa2p+92, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4p+28)));
    try std.testing.expectEqual(0x2.13780c1d4b1441b2aba1fdfa168ap+104, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d1598p+28)));
    try std.testing.expectEqual(0x7.63991f6e0531841345850fad35fcp+0, pow(@as(f128, 0x1.000002p+0), @as(f128, 0x1p+24)));
    try std.testing.expectEqual(0x2.1377295ae8b6a0384e9b11247d06p+104, pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468accp+28)));
    try std.testing.expectEqual(0x7.b4fd685e23a2b8a632449d5b10b4p-108, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468accp+28)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0xb.dea0deefbcfce6d489bb0f8fe778p-844, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0xb.ded059d22e416eceb14d3bd3a31p-844, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0xb.deabd7ffdaef65f284a1ad1d5b5p-844, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d1598p+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d15ap+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1.590f9a6586a16cd8802ac0e10965p+840, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1.5914feaeb8c2bb3f4dc103bc9a17p+840, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4.8d15ap+60)));
    // try std.testing.expectEqual(0x1.5913bfacf4af023616e6e4d86b73p+840, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468adp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468accp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1.5914feaeb89dec35255637d0b4e2p+840, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1.590f9a65867c9e61d3750ccab8a7p+840, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1.5913bfacf48a334e04740e2bacb9p+840, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468accp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468adp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0xb.ded059d22f8592ad9a28ad84a2ap-844, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2.468accp+60)));
    // try std.testing.expectEqual(0xb.dea0deefbe4105a526fa1915e998p-844, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2.468adp+60)));
    try std.testing.expectEqual(0xb.deabd7ffdc3385ee405985fd8ef8p-844, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x2.2785707939b37b4143e88e857df2p-13448, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x2.468adp+76)));
    try std.testing.expectEqual(0x2.280f6312f34af8f40d2812a4964p-13448, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x2.468accp+76)));
    try std.testing.expectEqual(0x2.27a54f0197ba441f36a9ee2dd268p-13448, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x2.27a54f019c098ebd39ddb200b1p-13448, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x2.27a54f0197fb7367cc9a1fca4a62p-13448, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x7.6b632ba5541b364949a01fc586dcp+13444, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x2.468accp+76)));
    try std.testing.expectEqual(0x7.6d3e3fd0495eace796c53e935074p+13444, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x2.468adp+76)));
    try std.testing.expectEqual(0x7.6cd0697cdc7d6f1ed93a2bfa5e28p+13444, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x7.6cd0697ceb570ff1d3020079764p+13444, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x7.6cd0697cea7674515bff3eb50558p+13444, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x7.6d3e3fd0495d174e5c23d27d2b3p+13444, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x1.234568p+76)));
    try std.testing.expectEqual(0x7.6b632ba55419a1156b69e5bafb4cp+13444, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x1.234566p+76)));
    try std.testing.expectEqual(0x7.6cd0697ceb557a700798d8825d5cp+13444, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x7.6cd0697cdc7bd99d0dd1072e5f2p+13444, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x7.6cd0697cea74decf909616edd85cp+13444, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x2.280f6312f34b6eb9e43b04ab4386p-13448, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x1.234566p+76)));
    try std.testing.expectEqual(0x2.2785707939b3f0e9ae026e1371dcp-13448, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x1.234568p+76)));
    try std.testing.expectEqual(0x2.27a54f019c0a046c7044704dd8ecp-13448, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x2.27a54f0197bab9ce6d10ab8fa25ep-13448, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x2.27a54f0197fbe9170300dd3a01ecp-13448, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x2.2785707939b3a279674683b4b8dap-13448, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x2.280f6312f34b2035ff83b8a6b996p-13448, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x2.27a54f0197ba6b599e2182a3abfep-13448, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x2.27a54f019c09b5f7a15546c4fd3ep-13448, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x2.27a54f0197fed61a2a9418409b0cp-13448, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff60037e547e4061dp-13448, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff118eaf65554afc4p-13448, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff118eaf65553d3f82p-13448, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff118eaf65555fb9d6p-13448, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af37bc048d159e26bp+124)));
    // try std.testing.expectEqual(0x7.6b632ba5541aaf37ff8e0c6ce79cp+13444, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d1598p+124)));
    try std.testing.expectEqual(0x7.6d3e3fd0495e25b4833a1a8c28bp+13444, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d15ap+124)));
    try std.testing.expectEqual(0x7.6cd0697cdc7ce7f3956c750bedc8p+13444, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x7.6cd0697ceb5688c68f34487ca7ecp+13444, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x7.6cd0697cea68eeb95f96ec852ffp+13444, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x7.6cd0697cea6ac9ed79f6271fa704p+13444, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x7.6cd0697cea69fd0fe7325c5cb3ccp+13444, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x7.6cd0697cea69fd0fe7325c153c78p+13444, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x7.6cd0697cea69fd0fe7325c8c097cp+13444, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x7.6d3e3fd0495e25b4833a1a8b5de4p+13444, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468adp+124)));
    try std.testing.expectEqual(0x7.6b632ba5541aaf37ff8e0c6c1dp+13444, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468accp+124)));
    try std.testing.expectEqual(0x7.6cd0697ceb5688c68f34487bdd2cp+13444, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x7.6cd0697cdc7ce7f3956c750b2308p+13444, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bcp+124)));
    // try std.testing.expectEqual(0x7.6cd0697cea6ac9ed79f6271edc44p+13444, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x7.6cd0697cea68eeb95f96ec84652cp+13444, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x7.6cd0697cea69fd0fe7325c5be90cp+13444, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x7.6cd0697cea69fd0fe7325c8b3ebcp+13444, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bde02468acf1358p+124)));
    // try std.testing.expectEqual(0x7.6cd0697cea69fd0fe7325c1471b4p+13444, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x2.280f6312f34b2035ff83b8a6f47ap-13448, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468accp+124)));
    try std.testing.expectEqual(0x2.2785707939b3a279674683b4f3aep-13448, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468adp+124)));
    try std.testing.expectEqual(0x2.27a54f019c09b5f7a15546c53814p-13448, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x2.27a54f0197ba6b599e2182a3e6d6p-13448, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff60037e547e409ca8p-13448, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x2.27a54f0197fed61a2a941840d5e4p-13448, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff118eaf65554b3718p-13448, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff118eaf65555ff4aep-13448, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff118eaf65553d7a5ap-13448, pow(@as(f128, 0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0xf.ffff600002cffff880000d1ffffp-4, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0xap+0)));
    try std.testing.expectEqual(0xf.fff9c001355fd885c3bd54483348p-4, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x6.4p+4)));
    try std.testing.expectEqual(0xf.ffc18079f221887cc9faaa72e72p-4, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x3.e8p+8)));
    try std.testing.expectEqual(0x5.e2d58a99d105f22148d9aa4810bcp-4, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x1p+24)));
    try std.testing.expectEqual(0xc.b4e8a2f3c38e77ad07f54c04c79p-96, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4p+28)));
    try std.testing.expectEqual(0x7.b4fa1e8fc264e5b778223ea471ap-108, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d1598p+28)));
    try std.testing.expectEqual(0x1.00000a0000370000dc0002cb0008p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, -0xap+0)));
    try std.testing.expectEqual(0x1.0000640013ba029eb44376a07b3dp+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x6.4p+4)));
    try std.testing.expectEqual(0x1.0003e807a31df6cdda7c3a40d85fp+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x3.e8p+8)));
    // try std.testing.expectEqual(0x2.b7e152be7b971aa2272ed5772126p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x1p+24)));
    try std.testing.expectEqual(0x1.4259ab1a8c764d243a58c5120fa2p+92, pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4p+28)));
    try std.testing.expectEqual(0x2.13780c1d4b1441b2aba1fdfa168ap+104, pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d1598p+28)));
    try std.testing.expectEqual(0x7.63991f6e0531841345850fad35fcp+0, pow(@as(f128, -0x1.000002p+0), @as(f128, 0x1p+24)));
    try std.testing.expectEqual(0x2.1377295ae8b6a0384e9b11247d06p+104, pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468accp+28)));
    try std.testing.expectEqual(0x7.b4fd685e23a2b8a632449d5b10b4p-108, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468accp+28)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0xb.dea0deefbcfce6d489bb0f8fe778p-844, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x4.8d15ap+60)));
    try std.testing.expectEqual(0xb.ded059d22e416eceb14d3bd3a31p-844, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x4.8d1598p+60)));
    try std.testing.expectEqual(0xb.deabd7ffdaef65f284a1ad1d5b5p-844, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d1598p+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d15ap+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4.8d15ap+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1.590f9a6586a16cd8802ac0e10965p+840, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x4.8d1598p+60)));
    try std.testing.expectEqual(0x1.5914feaeb8c2bb3f4dc103bc9a17p+840, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x4.8d15ap+60)));
    // try std.testing.expectEqual(0x1.5913bfacf4af023616e6e4d86b73p+840, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37cp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468adp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468accp+60)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1.5914feaeb89dec35255637d0b4e2p+840, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x2.468adp+60)));
    try std.testing.expectEqual(0x1.590f9a65867c9e61d3750ccab8a7p+840, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x2.468accp+60)));
    try std.testing.expectEqual(0x1.5913bfacf48a334e04740e2bacb9p+840, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468accp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468adp+60)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468accp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468adp+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0xb.ded059d22f8592ad9a28ad84a2ap-844, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x2.468accp+60)));
    // try std.testing.expectEqual(0xb.dea0deefbe4105a526fa1915e998p-844, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x2.468adp+60)));
    try std.testing.expectEqual(0xb.deabd7ffdc3385ee405985fd8ef8p-844, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bep+60)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x2.468adp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x2.468accp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x2.2785707939b37b4143e88e857df2p-13448, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x2.468adp+76)));
    try std.testing.expectEqual(0x2.280f6312f34af8f40d2812a4964p-13448, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x2.468accp+76)));
    try std.testing.expectEqual(0x2.27a54f0197ba441f36a9ee2dd268p-13448, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x2.27a54f019c098ebd39ddb200b1p-13448, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x2.27a54f0197fb7367cc9a1fca4a62p-13448, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468accp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468adp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x2.468accp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x2.468adp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x7.6b632ba5541b364949a01fc586dcp+13444, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x2.468accp+76)));
    try std.testing.expectEqual(0x7.6d3e3fd0495eace796c53e935074p+13444, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x2.468adp+76)));
    try std.testing.expectEqual(0x7.6cd0697cdc7d6f1ed93a2bfa5e28p+13444, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x2.468acf13579bcp+76)));
    try std.testing.expectEqual(0x7.6cd0697ceb570ff1d3020079764p+13444, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x2.468acf13579bep+76)));
    try std.testing.expectEqual(0x7.6cd0697cea7674515bff3eb50558p+13444, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x2.468acf13579bde1cp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x1.234568p+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x1.234566p+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x7.6d3e3fd0495d174e5c23d27d2b3p+13444, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x1.234568p+76)));
    try std.testing.expectEqual(0x7.6b632ba55419a1156b69e5bafb4cp+13444, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x1.234566p+76)));
    try std.testing.expectEqual(0x7.6cd0697ceb557a700798d8825d5cp+13444, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x7.6cd0697cdc7bd99d0dd1072e5f2p+13444, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x7.6cd0697cea74decf909616edd85cp+13444, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.234566p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.234568p+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x1.234566p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x1.234568p+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x2.280f6312f34b6eb9e43b04ab4386p-13448, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x1.234566p+76)));
    try std.testing.expectEqual(0x2.2785707939b3f0e9ae026e1371dcp-13448, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x1.234568p+76)));
    try std.testing.expectEqual(0x2.27a54f019c0a046c7044704dd8ecp-13448, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x1.23456789abcdep+76)));
    try std.testing.expectEqual(0x2.27a54f0197bab9ce6d10ab8fa25ep-13448, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x1.23456789abcdfp+76)));
    try std.testing.expectEqual(0x2.27a54f0197fbe9170300dd3a01ecp-13448, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x1.23456789abcdef0ep+76)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffp-4), @as(f128, 0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, 0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x2.2785707939b3a279674683b4b8dap-13448, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x2.280f6312f34b2035ff83b8a6b996p-13448, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x2.27a54f0197ba6b599e2182a3abfep-13448, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x2.27a54f019c09b5f7a15546c4fd3ep-13448, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x2.27a54f0197fed61a2a9418409b0cp-13448, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff60037e547e4061dp-13448, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff118eaf65554afc4p-13448, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff118eaf65553d3f82p-13448, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff118eaf65555fb9d6p-13448, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, 0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d15ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d1598p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, 0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffp-4), @as(f128, -0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4.8d1598p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4.8d15ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.ffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffp-4), @as(f128, -0x4.8d159e26af37bc048d159e26bp+124)));
    // try std.testing.expectEqual(0x7.6b632ba5541aaf37ff8e0c6ce79cp+13444, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d1598p+124)));
    try std.testing.expectEqual(0x7.6d3e3fd0495e25b4833a1a8c28bp+13444, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d15ap+124)));
    try std.testing.expectEqual(0x7.6cd0697cdc7ce7f3956c750bedc8p+13444, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(0x7.6cd0697ceb5688c68f34487ca7ecp+13444, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(0x7.6cd0697cea68eeb95f96ec852ffp+13444, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(0x7.6cd0697cea6ac9ed79f6271fa704p+13444, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(0x7.6cd0697cea69fd0fe7325c5cb3ccp+13444, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(0x7.6cd0697cea69fd0fe7325c153c78p+13444, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(0x7.6cd0697cea69fd0fe7325c8c097cp+13444, pow(@as(f128, -0xf.fffffffffffffffffffffffffff8p-4), @as(f128, -0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d1598p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d15ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af378p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af37cp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af37bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af37bc08p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af37bc048d159e26af34p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af37bc048d159e26aep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0xf.fffffffffffffffffffffffffcp-4), @as(f128, -0x4.8d159e26af37bc048d159e26bp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, 0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000001p+0), @as(f128, 0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, 0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x7.6d3e3fd0495e25b4833a1a8b5de4p+13444, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468adp+124)));
    try std.testing.expectEqual(0x7.6b632ba5541aaf37ff8e0c6c1dp+13444, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468accp+124)));
    try std.testing.expectEqual(0x7.6cd0697ceb5688c68f34487bdd2cp+13444, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x7.6cd0697cdc7ce7f3956c750b2308p+13444, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bcp+124)));
    // try std.testing.expectEqual(0x7.6cd0697cea6ac9ed79f6271edc44p+13444, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x7.6cd0697cea68eeb95f96ec84652cp+13444, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x7.6cd0697cea69fd0fe7325c5be90cp+13444, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x7.6cd0697cea69fd0fe7325c8b3ebcp+13444, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bde02468acf1358p+124)));
    // try std.testing.expectEqual(0x7.6cd0697cea69fd0fe7325c1471b4p+13444, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, 0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, 0x2.468adp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, 0x2.468accp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, 0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468accp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468adp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, -0x1p+0), @as(f128, -0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000002p+0), @as(f128, -0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000001p+0), @as(f128, -0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.0000000000000002p+0), @as(f128, -0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x2.280f6312f34b2035ff83b8a6f47ap-13448, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468accp+124)));
    try std.testing.expectEqual(0x2.2785707939b3a279674683b4f3aep-13448, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468adp+124)));
    try std.testing.expectEqual(0x2.27a54f019c09b5f7a15546c53814p-13448, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x2.27a54f0197ba6b599e2182a3e6d6p-13448, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff60037e547e409ca8p-13448, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x2.27a54f0197fed61a2a941840d5e4p-13448, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff118eaf65554b3718p-13448, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff118eaf65555ff4aep-13448, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x2.27a54f0197ff118eaf65553d7a5ap-13448, pow(@as(f128, -0x1.0000000000000000000000000001p+0), @as(f128, -0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, -0x2.468accp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, -0x2.468adp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bcp+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bdep+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bde04p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bde02468acf13579ap+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bde02468acf1357p+124)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, -0x1.000000000000000000000000008p+0), @as(f128, -0x2.468acf13579bde02468acf1358p+124)));
    try std.testing.expectEqual(0x1.95e4816b61bdc75029aa808e804cp+184, pow(@as(f128, 0x1.000002p+0), @as(f128, 0x4p+28)));
    try std.testing.expectEqual(0x1.95e4816b61bdc75029aa808e804cp+184, pow(@as(f128, -0x1.000002p+0), @as(f128, 0x4p+28)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.000002p+0), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.000002p+0), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0x1.92e20f8dcb053eb0aed4d308bbbap+1292, pow(@as(f128, 0x1.00000ep+0), @as(f128, 0x4p+28)));
    try std.testing.expectEqual(0x1.92e20f8dcb053eb0aed4d308bbbap+1292, pow(@as(f128, -0x1.00000ep+0), @as(f128, 0x4p+28)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.00000ep+0), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.00000ep+0), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.00000ep+0), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.00000ep+0), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, 0x1.00000ep+0), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.00000ep+0), @as(f128, 0xf.fffffp+124)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.00000ep+0), @as(f128, 0xf.ffffffffffff8p+1020)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.00000ep+0), @as(f128, 0xf.fffffffffffffffp+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.00000ep+0), @as(f128, 0xf.fffffffffffffffffffffffffff8p+16380)));
    try std.testing.expectEqual(std.math.inf(f128), pow(@as(f128, -0x1.00000ep+0), @as(f128, 0xf.ffffffffffffbffffffffffffcp+1020)));
    try std.testing.expectEqual(0xf.fffff3fffffe7fffff5fffffa6p+92, pow(@as(f128, 0xf.fffffp+124), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffff9fffffffffffffap+764, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xe.0b9d894b9a782d7f974f16449c28p+12284, pow(@as(f128, 0xd.72cb2a95c7ef6cdp+16380), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xe.0b9d894b9a782d730ef2400ce768p+12284, pow(@as(f128, 0xd.72cb2a95c7ef6ccp+16380), @as(f128, 0xcp-4)));
    // try std.testing.expectEqual(0xe.0b9d894b9a782d7e6be49bb6cdb8p+12284, pow(@as(f128, 0xd.72cb2a95c7ef6cce81bf1e825ba8p+16380), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xe.0b9d894b9a782d7e6be49bb6cdb8p+12284, pow(@as(f128, 0xd.72cb2a95c7ef6cce81bf1e825bap+16380), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffffcffffffffffffce8p+764, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xf.fffff3fffffe7fffff5fffffa6p+92, pow(@as(f128, 0xf.fffffp+124), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffff9fffffffffffffap+764, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0x3.987a3fd1d18736aa1652034cbe48p+12276, pow(@as(f128, 0x5.822b137da851af4p+16368), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0x3.987a3fd1d18736a62bb5005b55cap+12276, pow(@as(f128, 0x5.822b137da851af38p+16368), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0x3.987a3fd1d18736a7882a23c44d4p+12276, pow(@as(f128, 0x5.822b137da851af3ac7c7ef01602p+16368), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0x3.987a3fd1d18736a7882a23c44d3ep+12276, pow(@as(f128, 0x5.822b137da851af3ac7c7ef01601cp+16368), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffffcffffffffffffce8p+764, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xf.fffff3fffffe7fffff5fffffa6p+92, pow(@as(f128, 0xf.fffffp+124), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffff9fffffffffffffap+764, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xe.ba46a73274d9f67174a6137ed36p+12264, pow(@as(f128, 0x2.419adc280021754p+16356), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xe.ba46a73274d9f65ddf9504c7c8e8p+12264, pow(@as(f128, 0x2.419adc280021753cp+16356), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xe.ba46a73274d9f6647b8de25f71a8p+12264, pow(@as(f128, 0x2.419adc280021753d599cd97ff2f2p+16356), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xe.ba46a73274d9f6647b8de25f71ap+12264, pow(@as(f128, 0x2.419adc280021753d599cd97ff2fp+16356), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffffcffffffffffffce8p+764, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xf.fffff3fffffe7fffff5fffffa6p+92, pow(@as(f128, 0xf.fffffp+124), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffff9fffffffffffffap+764, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0x3.c530cea47806a57be7c8faeb1b1p+12256, pow(@as(f128, 0xe.c96440ebeed5893p+16340), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0x3.c530cea47806a578d87e509e816ep+12256, pow(@as(f128, 0xe.c96440ebeed5892p+16340), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0x3.c530cea47806a579fac410fdcf44p+12256, pow(@as(f128, 0xe.c96440ebeed58925ede59e838e9p+16340), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0x3.c530cea47806a579fac410fdcf44p+12256, pow(@as(f128, 0xe.c96440ebeed58925ede59e838e88p+16340), @as(f128, 0xcp-4)));
    try std.testing.expectEqual(0xf.ffffffffffffcffffffffffffce8p+764, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0xcp-4)));
    // try std.testing.expectEqual(0xd.72cb2a95c7ef6cce81bf1e825ba8p+16380, pow(@as(f128, 0xap+0), @as(f128, 0x1.344p+12)));
    // try std.testing.expectEqual(0x1.584784422d97f147d9c64fd9d5f7p+16380, pow(@as(f128, 0xap+0), @as(f128, 0x1.343p+12)));
    // try std.testing.expectEqual(0x2.26d8d39d15bfe872f60a195c898cp+16376, pow(@as(f128, 0xap+0), @as(f128, 0x1.342p+12)));
    // try std.testing.expectEqual(0x3.715aec2e89330d84bcdcf560dc12p+16372, pow(@as(f128, 0xap+0), @as(f128, 0x1.341p+12)));
    try std.testing.expectEqual(0xb.e5b66ecbce0b7b0e32e43935809p-16384, pow(@as(f128, 0xap+0), @as(f128, -0x1.343p+12)));
    // try std.testing.expectEqual(0x7.6f92053f60c72ce8dfcea3c17058p-16380, pow(@as(f128, 0xap+0), @as(f128, -0x1.342p+12)));
    try std.testing.expectEqual(0x4.a5bb43479c7c7c118be12658e638p-16376, pow(@as(f128, 0xap+0), @as(f128, -0x1.341p+12)));
    try std.testing.expectEqual(0xf.8150d73a5bad7b733ee7fcf03568p+16320, pow(@as(f128, 0x3.3b2e4p+88), @as(f128, 0xb.6p+4)));
    try std.testing.expectEqual(0xf.814331dd58d7f1fe3091f957b808p+16320, pow(@as(f128, 0x3.3b2e3cp+88), @as(f128, 0xb.6p+4)));
    try std.testing.expectEqual(0xf.814553110d16d49f982ecfb4a5ap+16320, pow(@as(f128, 0x3.3b2e3c9fd0804p+88), @as(f128, 0xb.6p+4)));
    try std.testing.expectEqual(0xf.814553110ca9a9d85e5c85e60aep+16320, pow(@as(f128, 0x3.3b2e3c9fd0802p+88), @as(f128, 0xb.6p+4)));
    try std.testing.expectEqual(0xf.814553110d0c46bcd557baf08b4p+16320, pow(@as(f128, 0x3.3b2e3c9fd0803ce8p+88), @as(f128, 0xb.6p+4)));
    try std.testing.expectEqual(0x1.082ba3a73f5378cb5c00d333fc56p-16324, pow(@as(f128, 0x3.3b2e4p+88), @as(f128, -0xb.6p+4)));
    try std.testing.expectEqual(0x1.082c8c269868b8855031b7dcc993p-16324, pow(@as(f128, 0x3.3b2e3cp+88), @as(f128, -0xb.6p+4)));
    try std.testing.expectEqual(0x1.082c67dd6dca757ea9a3d6b23513p-16324, pow(@as(f128, 0x3.3b2e3c9fd0804p+88), @as(f128, -0xb.6p+4)));
    try std.testing.expectEqual(0x1.082c67dd6dd1b97ba866a31b29bdp-16324, pow(@as(f128, 0x3.3b2e3c9fd0802p+88), @as(f128, -0xb.6p+4)));
    try std.testing.expectEqual(0x1.082c67dd6dcb29515f452bf31bbep-16324, pow(@as(f128, 0x3.3b2e3c9fd0803ce8p+88), @as(f128, -0xb.6p+4)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-152), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-152), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-152), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-152), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-152), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-1076), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-1076), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-1076), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-1076), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-1076), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-16448), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-16448), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-16448), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-16448), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-16448), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16448), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16448), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16448), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16448), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16448), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16496), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16496), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16496), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16496), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16496), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-152), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-152), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-152), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-152), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-152), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-1076), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-1076), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-1076), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-1076), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-1076), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-16448), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-16448), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-16448), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-16448), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x8p-16448), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16448), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16448), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16448), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16448), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16448), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16496), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16496), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16496), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16496), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x4p-16496), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffp+124), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffp+124), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffp+124), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffp+124), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffp+124), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffp+124), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffp+124), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffp+124), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffp+124), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffp+124), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffff8p+1020), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffp+16380), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.fffffffffffffffffffffffffff8p+16380), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.ffffffffffffbffffffffffffcp+1020), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a4p-4), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a4p-4), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a4p-4), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a4p-4), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a4p-4), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3p-4), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3p-4), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3p-4), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3p-4), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3p-4), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d78p-4), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d78p-4), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d78p-4), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d78p-4), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d78p-4), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d7p-4), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d7p-4), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d7p-4), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d7p-4), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d7p-4), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a4p-4), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a4p-4), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a4p-4), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a4p-4), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a4p-4), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3p-4), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3p-4), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3p-4), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3p-4), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3p-4), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d78p-4), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d78p-4), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d78p-4), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d78p-4), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d78p-4), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d7p-4), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d7p-4), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d7p-4), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d7p-4), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d7p-4), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a4p-4), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a4p-4), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a4p-4), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a4p-4), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a4p-4), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3cp-4), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3cp-4), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3cp-4), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3cp-4), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3cp-4), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a4p-4), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a4p-4), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a4p-4), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a4p-4), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a4p-4), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3p-4), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3p-4), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3p-4), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3p-4), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3p-4), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d78p-4), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d78p-4), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d78p-4), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d78p-4), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d78p-4), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d7p-4), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d7p-4), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d7p-4), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d7p-4), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d7p-4), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a4p-4), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a4p-4), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a4p-4), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a4p-4), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a4p-4), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3p-4), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3p-4), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3p-4), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3p-4), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3p-4), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d78p-4), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d78p-4), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d78p-4), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d78p-4), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d78p-4), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d7p-4), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d7p-4), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d7p-4), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d7p-4), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3d7p-4), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a4p-4), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a4p-4), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a4p-4), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a4p-4), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a4p-4), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3cp-4), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3cp-4), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3cp-4), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3cp-4), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0xf.d70a3d70a3d70a3d70a3d70a3cp-4), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5ep+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5ep+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5ep+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5ep+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5ep+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5cp+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5cp+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5cp+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5cp+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5cp+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c29p+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c29p+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c29p+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c29p+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c29p+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28p+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28p+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28p+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28p+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28p+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5ep+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5ep+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5ep+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5ep+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5ep+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5cp+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5cp+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5cp+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5cp+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5cp+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c29p+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c29p+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c29p+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c29p+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c29p+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c28p+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c28p+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c28p+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c28p+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c28p+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c8p+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c8p+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c8p+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c8p+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c8p+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5cp+0), @as(f128, 0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5cp+0), @as(f128, 0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5cp+0), @as(f128, 0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5cp+0), @as(f128, 0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5cp+0), @as(f128, 0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5ep+0), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5ep+0), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5ep+0), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5ep+0), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5ep+0), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5cp+0), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5cp+0), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5cp+0), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5cp+0), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5cp+0), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c29p+0), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c29p+0), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c29p+0), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c29p+0), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c29p+0), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28p+0), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28p+0), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28p+0), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28p+0), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28p+0), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5ep+0), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5ep+0), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5ep+0), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5ep+0), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5ep+0), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5cp+0), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5cp+0), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5cp+0), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5cp+0), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5cp+0), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c29p+0), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c29p+0), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c29p+0), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c29p+0), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c29p+0), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c28p+0), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c28p+0), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c28p+0), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c28p+0), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c28p+0), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c8p+0), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c8p+0), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c8p+0), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c8p+0), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5c8p+0), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5cp+0), @as(f128, -0x8p-152)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5cp+0), @as(f128, -0x4p-1076)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5cp+0), @as(f128, -0x8p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5cp+0), @as(f128, -0x4p-16448)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1.028f5c28f5c28f5c28f5c28f5cp+0), @as(f128, -0x4p-16496)));
    try std.testing.expectEqual(0x0p+0, pow(@as(f128, 0x2p+0), @as(f128, -0x1.86ap+16)));
    try std.testing.expectEqual(0x3.ab031b9f7490e4bb40b5d6cdc1bap-128, pow(@as(f128, 0x2p+0), @as(f128, -0x7.e2p+4)));
    try std.testing.expectEqual(0x3.5d13f32b5a75abd0e69a2ee640b4p-128, pow(@as(f128, 0x2p+0), @as(f128, -0x7.e4p+4)));
    try std.testing.expectEqual(0x3.159ca845541b6b74f8ab43259376p-128, pow(@as(f128, 0x2p+0), @as(f128, -0x7.e6p+4)));
    // try std.testing.expectEqual(0x2.d413cccfe779921165f626cdd52ap-128, pow(@as(f128, 0x2p+0), @as(f128, -0x7.e8p+4)));
    try std.testing.expectEqual(0x2.97fb5aa6c544e3a872f5fd885c42p-128, pow(@as(f128, 0x2p+0), @as(f128, -0x7.eap+4)));
    try std.testing.expectEqual(0x2.60dfc14636e2a5bd1ab48c60b90cp-128, pow(@as(f128, 0x2p+0), @as(f128, -0x7.ecp+4)));
    try std.testing.expectEqual(0x2.2e57078faa2f5b9bef918a1d6294p-128, pow(@as(f128, 0x2p+0), @as(f128, -0x7.eep+4)));
    try std.testing.expectEqual(0x7.5606373ee921c976816bad9b8374p-972, pow(@as(f128, 0x2p+0), @as(f128, -0x3.c92p+8)));
    try std.testing.expectEqual(0x6.ba27e656b4eb57a1cd345dcc8168p-972, pow(@as(f128, 0x2p+0), @as(f128, -0x3.c94p+8)));
    try std.testing.expectEqual(0x6.2b39508aa836d6e9f156864b26ecp-972, pow(@as(f128, 0x2p+0), @as(f128, -0x3.c96p+8)));
    // try std.testing.expectEqual(0x5.a827999fcef32422cbec4d9baa54p-972, pow(@as(f128, 0x2p+0), @as(f128, -0x3.c98p+8)));
    try std.testing.expectEqual(0x5.2ff6b54d8a89c750e5ebfb10b884p-972, pow(@as(f128, 0x2p+0), @as(f128, -0x3.c9ap+8)));
    try std.testing.expectEqual(0x4.c1bf828c6dc54b7a356918c17218p-972, pow(@as(f128, 0x2p+0), @as(f128, -0x3.c9cp+8)));
    try std.testing.expectEqual(0x4.5cae0f1f545eb737df23143ac528p-972, pow(@as(f128, 0x2p+0), @as(f128, -0x3.c9ep+8)));
    try std.testing.expectEqual(0x3.ab031b9f7490e4bb40b5d6cdc1bap-1024, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fe2p+8)));
    try std.testing.expectEqual(0x3.5d13f32b5a75abd0e69a2ee640b4p-1024, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fe4p+8)));
    try std.testing.expectEqual(0x3.159ca845541b6b74f8ab43259376p-1024, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fe6p+8)));
    // try std.testing.expectEqual(0x2.d413cccfe779921165f626cdd52ap-1024, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fe8p+8)));
    try std.testing.expectEqual(0x2.97fb5aa6c544e3a872f5fd885c42p-1024, pow(@as(f128, 0x2p+0), @as(f128, -0x3.feap+8)));
    try std.testing.expectEqual(0x2.60dfc14636e2a5bd1ab48c60b90cp-1024, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fecp+8)));
    try std.testing.expectEqual(0x2.2e57078faa2f5b9bef918a1d6294p-1024, pow(@as(f128, 0x2p+0), @as(f128, -0x3.feep+8)));
    try std.testing.expectEqual(0x3.ab031b9f7490e4bb40b5d6cdc1b8p-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.ffe2p+12)));
    try std.testing.expectEqual(0x3.5d13f32b5a75abd0e69a2ee640b4p-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.ffe4p+12)));
    try std.testing.expectEqual(0x3.159ca845541b6b74f8ab43259378p-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.ffe6p+12)));
    try std.testing.expectEqual(0x2.d413cccfe779921165f626cdd52cp-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.ffe8p+12)));
    try std.testing.expectEqual(0x2.97fb5aa6c544e3a872f5fd885c4p-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.ffeap+12)));
    try std.testing.expectEqual(0x2.60dfc14636e2a5bd1ab48c60b90cp-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.ffecp+12)));
    try std.testing.expectEqual(0x2.2e57078faa2f5b9bef918a1d6294p-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.ffeep+12)));
    try std.testing.expectEqual(0x1.d5818dcfba48725da05aeb66e0dcp-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fff2p+12)));
    // try std.testing.expectEqual(0x1.ae89f995ad3ad5e8734d1773205cp-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fff4p+12)));
    try std.testing.expectEqual(0x1.8ace5422aa0db5ba7c55a192c9bcp-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fff6p+12)));
    // try std.testing.expectEqual(0x1.6a09e667f3bcc908b2fb1366ea94p-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fff8p+12)));
    try std.testing.expectEqual(0x1.4bfdad5362a271d4397afec42e2p-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fffap+12)));
    // try std.testing.expectEqual(0x1.306fe0a31b7152de8d5a46305c84p-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fffcp+12)));
    // try std.testing.expectEqual(0x1.172b83c7d517adcdf7c8c50eb14cp-16384, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fffep+12)));
    try std.testing.expectEqual(0x3.ab031b9f7490e4bb40b5d6cdc1bap-128, pow(@as(f128, 0x8p-4), @as(f128, 0x7.e2p+4)));
    try std.testing.expectEqual(0x3.5d13f32b5a75abd0e69a2ee640b4p-128, pow(@as(f128, 0x8p-4), @as(f128, 0x7.e4p+4)));
    try std.testing.expectEqual(0x3.159ca845541b6b74f8ab43259376p-128, pow(@as(f128, 0x8p-4), @as(f128, 0x7.e6p+4)));
    // try std.testing.expectEqual(0x2.d413cccfe779921165f626cdd52ap-128, pow(@as(f128, 0x8p-4), @as(f128, 0x7.e8p+4)));
    try std.testing.expectEqual(0x2.97fb5aa6c544e3a872f5fd885c42p-128, pow(@as(f128, 0x8p-4), @as(f128, 0x7.eap+4)));
    try std.testing.expectEqual(0x2.60dfc14636e2a5bd1ab48c60b90cp-128, pow(@as(f128, 0x8p-4), @as(f128, 0x7.ecp+4)));
    try std.testing.expectEqual(0x2.2e57078faa2f5b9bef918a1d6294p-128, pow(@as(f128, 0x8p-4), @as(f128, 0x7.eep+4)));
    try std.testing.expectEqual(0x7.5606373ee921c976816bad9b8374p-972, pow(@as(f128, 0x8p-4), @as(f128, 0x3.c92p+8)));
    try std.testing.expectEqual(0x6.ba27e656b4eb57a1cd345dcc8168p-972, pow(@as(f128, 0x8p-4), @as(f128, 0x3.c94p+8)));
    try std.testing.expectEqual(0x6.2b39508aa836d6e9f156864b26ecp-972, pow(@as(f128, 0x8p-4), @as(f128, 0x3.c96p+8)));
    // try std.testing.expectEqual(0x5.a827999fcef32422cbec4d9baa54p-972, pow(@as(f128, 0x8p-4), @as(f128, 0x3.c98p+8)));
    try std.testing.expectEqual(0x5.2ff6b54d8a89c750e5ebfb10b884p-972, pow(@as(f128, 0x8p-4), @as(f128, 0x3.c9ap+8)));
    try std.testing.expectEqual(0x4.c1bf828c6dc54b7a356918c17218p-972, pow(@as(f128, 0x8p-4), @as(f128, 0x3.c9cp+8)));
    try std.testing.expectEqual(0x4.5cae0f1f545eb737df23143ac528p-972, pow(@as(f128, 0x8p-4), @as(f128, 0x3.c9ep+8)));
    try std.testing.expectEqual(0x3.ab031b9f7490e4bb40b5d6cdc1bap-1024, pow(@as(f128, 0x8p-4), @as(f128, 0x3.fe2p+8)));
    try std.testing.expectEqual(0x3.5d13f32b5a75abd0e69a2ee640b4p-1024, pow(@as(f128, 0x8p-4), @as(f128, 0x3.fe4p+8)));
    try std.testing.expectEqual(0x3.159ca845541b6b74f8ab43259376p-1024, pow(@as(f128, 0x8p-4), @as(f128, 0x3.fe6p+8)));
    // try std.testing.expectEqual(0x2.d413cccfe779921165f626cdd52ap-1024, pow(@as(f128, 0x8p-4), @as(f128, 0x3.fe8p+8)));
    try std.testing.expectEqual(0x2.97fb5aa6c544e3a872f5fd885c42p-1024, pow(@as(f128, 0x8p-4), @as(f128, 0x3.feap+8)));
    try std.testing.expectEqual(0x2.60dfc14636e2a5bd1ab48c60b90cp-1024, pow(@as(f128, 0x8p-4), @as(f128, 0x3.fecp+8)));
    try std.testing.expectEqual(0x2.2e57078faa2f5b9bef918a1d6294p-1024, pow(@as(f128, 0x8p-4), @as(f128, 0x3.feep+8)));
    try std.testing.expectEqual(0x3.ab031b9f7490e4bb40b5d6cdc1b8p-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.ffe2p+12)));
    try std.testing.expectEqual(0x3.5d13f32b5a75abd0e69a2ee640b4p-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.ffe4p+12)));
    try std.testing.expectEqual(0x3.159ca845541b6b74f8ab43259378p-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.ffe6p+12)));
    try std.testing.expectEqual(0x2.d413cccfe779921165f626cdd52cp-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.ffe8p+12)));
    try std.testing.expectEqual(0x2.97fb5aa6c544e3a872f5fd885c4p-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.ffeap+12)));
    try std.testing.expectEqual(0x2.60dfc14636e2a5bd1ab48c60b90cp-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.ffecp+12)));
    try std.testing.expectEqual(0x2.2e57078faa2f5b9bef918a1d6294p-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.ffeep+12)));
    try std.testing.expectEqual(0x1.d5818dcfba48725da05aeb66e0dcp-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.fff2p+12)));
    // try std.testing.expectEqual(0x1.ae89f995ad3ad5e8734d1773205cp-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.fff4p+12)));
    try std.testing.expectEqual(0x1.8ace5422aa0db5ba7c55a192c9bcp-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.fff6p+12)));
    // try std.testing.expectEqual(0x1.6a09e667f3bcc908b2fb1366ea94p-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.fff8p+12)));
    try std.testing.expectEqual(0x1.4bfdad5362a271d4397afec42e2p-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.fffap+12)));
    // try std.testing.expectEqual(0x1.306fe0a31b7152de8d5a46305c84p-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.fffcp+12)));
    // try std.testing.expectEqual(0x1.172b83c7d517adcdf7c8c50eb14cp-16384, pow(@as(f128, 0x8p-4), @as(f128, 0x3.fffep+12)));
    try std.testing.expectEqual(0x3.ffe0807d02b2a29ff13c16e201dcp-128, pow(@as(f128, 0x2.00002p+0), @as(f128, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ffc101f4059529fecf83967ebfd8p-128, pow(@as(f128, -0x2.00004p+0), @as(f128, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ffa1846500d7b498a114c51038dap-128, pow(@as(f128, 0x2.00006p+0), @as(f128, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff8207cfecaa9fe470a15ed477fcp-128, pow(@as(f128, -0x2.00008p+0), @as(f128, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff628c34c13e88524d9f8098bfb8p-128, pow(@as(f128, 0x2.0000ap+0), @as(f128, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff43119376c449494caaef68258cp-128, pow(@as(f128, -0x2.0000cp+0), @as(f128, -0x7.ep+4)));
    try std.testing.expectEqual(0x3.ff2397ec056cfd2587f6bcd6a036p-128, pow(@as(f128, 0x2.0000ep+0), @as(f128, -0x7.ep+4)));
    try std.testing.expectEqual(0x7.fe1bb959dfbf13aa39caf5de1ffcp-972, pow(@as(f128, 0x2.00002p+0), @as(f128, -0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.fc37e555601f1a53bf6fe56a0f7cp-972, pow(@as(f128, -0x2.00004p+0), @as(f128, -0x3.c9p+8)));
    try std.testing.expectEqual(0x7.fa5483d757aa2e48a51ff3df148p-972, pow(@as(f128, 0x2.00006p+0), @as(f128, -0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.f87194c4a35bbc073f36fb0a500cp-972, pow(@as(f128, -0x2.00008p+0), @as(f128, -0x3.c9p+8)));
    try std.testing.expectEqual(0x7.f68f1802269efaa38e22972f687cp-972, pow(@as(f128, 0x2.0000ap+0), @as(f128, -0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.f4ad0d74cb4d6487be81f15df95cp-972, pow(@as(f128, -0x2.0000cp+0), @as(f128, -0x3.c9p+8)));
    try std.testing.expectEqual(0x7.f2cb750181ad3091a758edab162cp-972, pow(@as(f128, 0x2.0000ep+0), @as(f128, -0x3.c9p+8)));
    try std.testing.expectEqual(0x3.ff009fe55b7f9330a15a2d132d62p-1024, pow(@as(f128, 0x2.00002p+0), @as(f128, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fe017f8acd5110ec4545db5d78ap-1024, pow(@as(f128, -0x2.00004p+0), @as(f128, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fd029ee0676e39039deec8bda828p-1024, pow(@as(f128, 0x2.00006p+0), @as(f128, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fc03fdd63fcccb93152a9770a0ep-1024, pow(@as(f128, -0x2.00008p+0), @as(f128, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fb059c5c705d89a35ea085fb704cp-1024, pow(@as(f128, 0x2.0000ap+0), @as(f128, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.fa077a63170b360a099c370be52ap-1024, pow(@as(f128, -0x2.0000cp+0), @as(f128, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.f90997da55b9968a027da5f79892p-1024, pow(@as(f128, 0x2.0000ep+0), @as(f128, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.f0205401e099e614abd1924fbff8p-16384, pow(@as(f128, 0x2.00002p+0), @as(f128, -0x3.ffep+12)));
    try std.testing.expectEqual(0x3.e07fa761113b0c6305755cac71e4p-16384, pow(@as(f128, -0x2.00004p+0), @as(f128, -0x3.ffep+12)));
    try std.testing.expectEqual(0x3.d11d0015916a25dd5265f8196d6cp-16384, pow(@as(f128, 0x2.00006p+0), @as(f128, -0x3.ffep+12)));
    try std.testing.expectEqual(0x3.c1f767f7c9b80603846acf44b57p-16384, pow(@as(f128, -0x2.00008p+0), @as(f128, -0x3.ffep+12)));
    try std.testing.expectEqual(0x3.b30decb1287dd0e528febd9fa828p-16384, pow(@as(f128, 0x2.0000ap+0), @as(f128, -0x3.ffep+12)));
    try std.testing.expectEqual(0x3.a45f9facfbb087a5b004cee3fe44p-16384, pow(@as(f128, -0x2.0000cp+0), @as(f128, -0x3.ffep+12)));
    try std.testing.expectEqual(0x3.95eb960986d7735ea9c19df75928p-16384, pow(@as(f128, 0x2.0000ep+0), @as(f128, -0x3.ffep+12)));
    try std.testing.expectEqual(0x1.f8100a7fefa4f41006a7c8bd637p-16384, pow(@as(f128, 0x2.00002p+0), @as(f128, -0x3.fffp+12)));
    try std.testing.expectEqual(-0x1.f03f95a895e87374744c1fccb4f8p-16384, pow(@as(f128, -0x2.00004p+0), @as(f128, -0x3.fffp+12)));
    try std.testing.expectEqual(0x1.e88e247021e00c94a6d71cc4615p-16384, pow(@as(f128, 0x2.00006p+0), @as(f128, -0x3.fffp+12)));
    try std.testing.expectEqual(-0x1.e0fb3bbd15ecbd8692d3c2ed69fcp-16384, pow(@as(f128, -0x2.00008p+0), @as(f128, -0x3.fffp+12)));
    try std.testing.expectEqual(0x1.d986625e958159ba2875322b3468p-16384, pow(@as(f128, 0x2.0000ap+0), @as(f128, -0x3.fffp+12)));
    try std.testing.expectEqual(-0x1.d22f2104d17675466c07feeeff88p-16384, pow(@as(f128, -0x2.0000cp+0), @as(f128, -0x3.fffp+12)));
    try std.testing.expectEqual(0x1.caf502399272899d38ac063069ep-16384, pow(@as(f128, 0x2.0000ep+0), @as(f128, -0x3.fffp+12)));
    try std.testing.expectEqual(0x3.fe27ec152f28ce635a4ddb4b318ep-128, pow(@as(f128, 0x7.fff88p-4), @as(f128, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fe475e27e237b499ce72ab8bda36p-128, pow(@as(f128, -0x7.fff9p-4), @as(f128, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fe66d130450f5d410fb40ded4e42p-128, pow(@as(f128, 0x7.fff98p-4), @as(f128, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fe86452e5f1ffdc65744aa5e085ap-128, pow(@as(f128, -0x7.fffap-4), @as(f128, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fea5ba2237da04c68353884b5374p-128, pow(@as(f128, 0x7.fffa8p-4), @as(f128, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fec5300bd6ae1a0fcb1f2bd4ebc8p-128, pow(@as(f128, -0x7.fffbp-4), @as(f128, 0x7.ep+4)));
    try std.testing.expectEqual(0x3.fee4a6eb430d1ea37315950b8c82p-128, pow(@as(f128, 0x7.fffb8p-4), @as(f128, 0x7.ep+4)));
    try std.testing.expectEqual(0x7.e3ce962b18aedd93709d31f31884p-972, pow(@as(f128, 0x7.fff88p-4), @as(f128, 0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.e5aca4f5b1c68a9a15b0fe12f604p-972, pow(@as(f128, -0x7.fff9p-4), @as(f128, 0x3.c9p+8)));
    try std.testing.expectEqual(0x7.e78b24c88758eef8d6e0d4e2c4cp-972, pow(@as(f128, 0x7.fff98p-4), @as(f128, 0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.e96a15be4c04fe82631d38dec668p-972, pow(@as(f128, -0x7.fffap-4), @as(f128, 0x3.c9p+8)));
    try std.testing.expectEqual(0x7.eb4977f1b8b6508676d426b1b398p-972, pow(@as(f128, 0x7.fffa8p-4), @as(f128, 0x3.c9p+8)));
    try std.testing.expectEqual(-0x7.ed294b7d8ca69bee0e3bb05eb5fp-972, pow(@as(f128, -0x7.fffbp-4), @as(f128, 0x3.c9p+8)));
    try std.testing.expectEqual(0x7.ef09907c8d5f33b1180a6168baa8p-972, pow(@as(f128, 0x7.fffb8p-4), @as(f128, 0x3.c9p+8)));
    try std.testing.expectEqual(0x3.f1235a29d7746f1b732778a27de6p-1024, pow(@as(f128, 0x7.fff88p-4), @as(f128, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f21f452c96b1bcceb5cc098dc0dp-1024, pow(@as(f128, -0x7.fff9p-4), @as(f128, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f31b6f02e5c23c557fab459cda38p-1024, pow(@as(f128, 0x7.fff98p-4), @as(f128, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f417d7bc6bd50fd5eb5a594b1ccp-1024, pow(@as(f128, -0x7.fffap-4), @as(f128, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f5147f68d3fec0361ceb311d7a9ep-1024, pow(@as(f128, 0x7.fffa8p-4), @as(f128, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f6116617cd3a351f7dc82115ebp-1024, pow(@as(f128, -0x7.fffbp-4), @as(f128, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.f70e8bd90a69ad3f94b10694961cp-1024, pow(@as(f128, 0x7.fffb8p-4), @as(f128, 0x3.fep+8)));
    try std.testing.expectEqual(0x3.2a128ed19377ba8f0466310c9014p-16384, pow(@as(f128, 0x7.fff88p-4), @as(f128, 0x3.ffep+12)));
    try std.testing.expectEqual(0x3.36d3f04fdca749b54478bb0e9354p-16384, pow(@as(f128, -0x7.fff9p-4), @as(f128, 0x3.ffep+12)));
    try std.testing.expectEqual(0x3.43c8bba7318cc61a9fa889c57578p-16384, pow(@as(f128, 0x7.fff98p-4), @as(f128, 0x3.ffep+12)));
    try std.testing.expectEqual(0x3.50f1c0100d96315bdcf7fd580c4p-16384, pow(@as(f128, -0x7.fffap-4), @as(f128, 0x3.ffep+12)));
    try std.testing.expectEqual(0x3.5e4fd0061173228f65aa356b4f3p-16384, pow(@as(f128, 0x7.fffa8p-4), @as(f128, 0x3.ffep+12)));
    try std.testing.expectEqual(0x3.6be3c15528b2225b98b33081b634p-16384, pow(@as(f128, -0x7.fffbp-4), @as(f128, 0x3.ffep+12)));
    try std.testing.expectEqual(0x3.79ae6d26e45886933722a2cd3cb4p-16384, pow(@as(f128, 0x7.fffb8p-4), @as(f128, 0x3.ffep+12)));
    try std.testing.expectEqual(0x1.9507cbb016c9a02762c00e76610cp-16384, pow(@as(f128, 0x7.fff88p-4), @as(f128, 0x3.fffp+12)));
    try std.testing.expectEqual(-0x1.9b68902b3530b45171fd0f9277d4p-16384, pow(@as(f128, -0x7.fff9p-4), @as(f128, 0x3.fffp+12)));
    try std.testing.expectEqual(0x1.a1e30a4a0c8a76ec1f59740642c4p-16384, pow(@as(f128, 0x7.fff98p-4), @as(f128, 0x3.fffp+12)));
    try std.testing.expectEqual(-0x1.a877a1ad5ec513959bf98bcf072p-16384, pow(@as(f128, -0x7.fffap-4), @as(f128, 0x3.fffp+12)));
    try std.testing.expectEqual(0x1.af26bf9799377b481ef3cfc3253cp-16384, pow(@as(f128, 0x7.fffa8p-4), @as(f128, 0x3.fffp+12)));
    try std.testing.expectEqual(-0x1.b5f0cef367ee7476219cf888dbfp-16384, pow(@as(f128, -0x7.fffbp-4), @as(f128, 0x3.fffp+12)));
    try std.testing.expectEqual(0x1.bcd63c5a63795310b5b7e9e4e09p-16384, pow(@as(f128, 0x7.fffb8p-4), @as(f128, 0x3.fffp+12)));
    try std.testing.expectEqual(0x3.aa76a38cf5d87fca390f911a880ap-1024, pow(@as(f128, 0x2.000b3p+0), @as(f128, -0x3.fep+8)));
    // try std.testing.expectEqual(0x3.d4e5475408a3f6e609288c887bfep-1024, pow(@as(f128, 0x2.000584p+0), @as(f128, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.d503df508fb8195a8cb512092438p-1024, pow(@as(f128, 0x2.00058p+0), @as(f128, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.d4f49333bc2baaed11303c000cf4p-1024, pow(@as(f128, 0x2.000582p+0), @as(f128, -0x3.fep+8)));
    try std.testing.expectEqual(0x3.35ec906f22fbbffeffc0d272938p-1024, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fe513p+8)));
    // try std.testing.expectEqual(0x3.3bed4179f82bc002979648b91cfap-1024, pow(@as(f128, 0x2p+0), @as(f128, -0x3.fe4e8p+8)));
    try std.testing.expectEqual(0x1.999999999999999999999999999ap-4, pow(@as(f128, 0xap+0), @as(f128, -0x1p+0)));
    try std.testing.expectEqual(0x2.8f5c28f5c28f5c28f5c28f5c28f6p-8, pow(@as(f128, 0xap+0), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x4.189374bc6a7ef9db22d0e5604188p-12, pow(@as(f128, 0xap+0), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0x6.8db8bac710cb295e9e1b089a0274p-16, pow(@as(f128, 0xap+0), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0xa.7c5ac471b4784230fcf80dc3372p-20, pow(@as(f128, 0xap+0), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0x1.0c6f7a0b5ed8d36b4c7f34938583p-20, pow(@as(f128, 0xap+0), @as(f128, -0x6p+0)));
    try std.testing.expectEqual(0x1.ad7f29abcaf485787a6520ec08d2p-24, pow(@as(f128, 0xap+0), @as(f128, -0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(0xf.fffffp-4, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(0xf.ffffffffffff8p-4, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(0xf.fffffffffffffffp-4, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffe000001p-4, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffff00000000000004p-4, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffep-4, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffd000002ffffffp-4, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0xf.fffffffffffe8000000000000cp-4, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffdp-4, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0xf.ffffc000005fffffc000001p-4, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffe00000000000018p-4, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffcp-4, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0xf.ffffb000009fffff6000005p-4, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0xf.fffffffffffd80000000000028p-4, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffbp-4, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x6p+0)));
    try std.testing.expectEqual(0xf.ffffa00000effffec00000fp-4, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x6p+0)));
    try std.testing.expectEqual(0xf.fffffffffffd0000000000003cp-4, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x6p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffap-4, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x7p+0)));
    try std.testing.expectEqual(0xf.ffff9000014ffffdd000023p-4, pow(@as(f128, 0xf.fffffp-4), @as(f128, 0x7p+0)));
    try std.testing.expectEqual(0xf.fffffffffffc80000000000054p-4, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, 0x7p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffff9p-4, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, 0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x1p+0)));
    try std.testing.expectEqual(0x1.000001000001000001000001p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x1p+0)));
    try std.testing.expectEqual(0x1.000000000000080000000000004p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x1p+0)));
    try std.testing.expectEqual(0x1.0000000000000001p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x1.000002000003000004000005p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x1.00000000000010000000000000cp+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x1.0000000000000002p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0x1.00000300000600000a00000fp+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0x1.000000000000180000000000018p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0x1.0000000000000003p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0x1.00000400000a000014000023p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0x1.000000000000200000000000028p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0x1.0000000000000004p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0x1.00000500000f000023000046p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0x1.00000000000028000000000003cp+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0x1.0000000000000005p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x6p+0)));
    try std.testing.expectEqual(0x1.00000600001500003800007e0001p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x6p+0)));
    try std.testing.expectEqual(0x1.000000000000300000000000054p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x6p+0)));
    try std.testing.expectEqual(0x1.0000000000000006p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x7p+0)));
    try std.testing.expectEqual(0x1.00000700001c0000540000d20002p+0, pow(@as(f128, 0xf.fffffp-4), @as(f128, -0x7p+0)));
    try std.testing.expectEqual(0x1.00000000000038000000000007p+0, pow(@as(f128, 0xf.ffffffffffff8p-4), @as(f128, -0x7p+0)));
    try std.testing.expectEqual(0x1.0000000000000007p+0, pow(@as(f128, 0xf.fffffffffffffffp-4), @as(f128, -0x7p+0)));
    try std.testing.expectEqual(0x1.000002p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(0x1.0000000000001p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(0x1.0000000000000002p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x1p+0)));
    try std.testing.expectEqual(0x1.000004000004p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0x1.00000000000020000000000001p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0x1.0000000000000004p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x2p+0)));
    try std.testing.expectEqual(0x1.00000600000c000008p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0x1.00000000000030000000000003p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0x1.0000000000000006p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x3p+0)));
    try std.testing.expectEqual(0x1.00000800001800002000001p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0x1.00000000000040000000000006p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0x1.0000000000000008p+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x4p+0)));
    try std.testing.expectEqual(0x1.00000a00002800005000005p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0x1.0000000000005000000000000ap+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0x1.000000000000000ap+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x5p+0)));
    try std.testing.expectEqual(0x1.00000c00003c0000a00000f00001p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, 0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x6p+0)));
    try std.testing.expectEqual(0x1.0000000000006000000000000fp+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x6p+0)));
    try std.testing.expectEqual(0x1.000000000000000cp+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x6p+0)));
    try std.testing.expectEqual(0x1.00000e0000540001180002300003p+0, pow(@as(f128, 0x1.000002p+0), @as(f128, 0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, 0x7p+0)));
    try std.testing.expectEqual(0x1.00000000000070000000000015p+0, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, 0x7p+0)));
    try std.testing.expectEqual(0x1.000000000000000ep+0, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, 0x7p+0)));
    try std.testing.expectEqual(0xf.ffffe000003fffff800001p-4, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x1p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x1p+0)));
    try std.testing.expectEqual(0xf.ffffffffffff0000000000001p-4, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x1p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffep-4, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x1p+0)));
    try std.testing.expectEqual(0xf.ffffc00000bffffe000004fffff8p-4, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0xf.fffffffffffe0000000000003p-4, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffcp-4, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x2p+0)));
    try std.testing.expectEqual(0xf.ffffa000017ffffb00000effffd8p-4, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0xf.fffffffffffd0000000000006p-4, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffffap-4, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x3p+0)));
    try std.testing.expectEqual(0xf.ffff8000027ffff6000022ffff9p-4, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0xf.fffffffffffc000000000000ap-4, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffff8p-4, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x4p+0)));
    try std.testing.expectEqual(0xf.ffff600003bfffee800045ffff08p-4, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0xf.fffffffffffb000000000000fp-4, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffff6p-4, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x5p+0)));
    try std.testing.expectEqual(0xf.ffff4000053fffe400007dfffe08p-4, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x6p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x6p+0)));
    try std.testing.expectEqual(0xf.fffffffffffa0000000000015p-4, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x6p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffff4p-4, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x6p+0)));
    try std.testing.expectEqual(0xf.ffff200006ffffd60000d1fffc68p-4, pow(@as(f128, 0x1.000002p+0), @as(f128, -0x7p+0)));
    try std.testing.expectEqual(0x1p+0, pow(@as(f128, 0x1p+0), @as(f128, -0x7p+0)));
    try std.testing.expectEqual(0xf.fffffffffff9000000000001cp-4, pow(@as(f128, 0x1.0000000000001p+0), @as(f128, -0x7p+0)));
    try std.testing.expectEqual(0xf.ffffffffffffff2p-4, pow(@as(f128, 0x1.0000000000000002p+0), @as(f128, -0x7p+0)));
    try std.testing.expectEqual(0x1.1211ae603c374d40159530102074p+0, pow(@as(f128, 0x1.1p+0), @as(f128, 0x1.2p+0)));
    try std.testing.expectEqual(0x1.84e58377727ac18c4b0e8b54f091p+0, pow(@as(f128, 0x1.8p+0), @as(f128, 0x1.08p+0)));
    try std.testing.expectEqual(0xf.ffffe80000060000010000006p+188, pow(@as(f128, 0xf.fffffp+124), @as(f128, 0x1.8p+0)));
    try std.testing.expectEqual(0x5.232efee41029ap+1020, pow(@as(f128, 0x2.fa3414de4p+680), @as(f128, 0x1.8p+0)));
    try std.testing.expectEqual(0x3.c74e2eeb2cd0026957cffeb3a1f4p-36, pow(@as(f128, 0x1.ce78f2p+0), @as(f128, -0x2.7f1f78p+4)));
    try std.testing.expectEqual(0x2.35bc23fdfc30b0399e26d6c287bcp-732, pow(@as(f128, 0xf.fffffp+124), @as(f128, -0x5.b5b648p+0)));
    try std.testing.expectEqual(0x8.df24532d4b7d75f382e88fde63a8p+24, pow(@as(f128, 0x1.430d4cp+0), @as(f128, 0x5.0e462p+4)));
    // try std.testing.expectEqual(0xd.20e27f191eac856f26aecd57757p+4880, pow(@as(f128, 0x9.8b82ap-4), @as(f128, -0x1.99907ap+12)));
    try std.testing.expectEqual(0x4.523987c590d3192757b32fb92c74p+80, pow(@as(f128, 0xd.73035p-4), @as(f128, -0x1.47bb8p+8)));
    try std.testing.expectEqual(0xf.ffe5535a38f9be648255c105d568p+124, pow(@as(f128, 0x1.059c76p+0), @as(f128, 0xf.fc05fp+8)));
    try std.testing.expectEqual(0xf.fffff29cf02eeec4a7cde7b5a2ep+124, pow(@as(f128, 0x2.f58f8p+4), @as(f128, 0x1.7p+4)));
    try std.testing.expectEqual(-0xf.fffff29cf02eeec4a7cde7b5a2ep+124, pow(@as(f128, -0x2.f58f8p+4), @as(f128, 0x1.7p+4)));
}
