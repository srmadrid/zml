const std = @import("std");
const zml = @import("zml");
const Coerce = zml.types.Coerce;

test Coerce {
    comptime {
        const data: [135][3]type = .{
            .{ u8, u8, u8 },
            .{ u8, u16, u16 },
            .{ u8, u32, u32 },
            .{ u8, u64, u64 },
            .{ u8, u128, u128 },
            .{ u8, i8, i16 },
            .{ u8, i16, i16 },
            .{ u8, i32, i32 },
            .{ u8, i64, i64 },
            .{ u8, i128, i128 },
            .{ u8, comptime_int, u8 },
            .{ u8, f16, f16 },
            .{ u8, f32, f32 },
            .{ u8, f64, f64 },
            .{ u8, f80, f80 },
            .{ u8, f128, f128 },
            .{ u8, comptime_float, f16 },
            .{ u8, zml.cf16, zml.cf16 },
            .{ u8, zml.cf32, zml.cf32 },
            .{ u8, zml.cf64, zml.cf64 },
            .{ u8, zml.cf80, zml.cf80 },
            .{ u8, zml.cf128, zml.cf128 },
            .{ u8, zml.comptime_complex, zml.cf16 },
            .{ u8, zml.Integer, zml.Integer },
            .{ u8, zml.Rational, zml.Rational },
            .{ u8, zml.Real, zml.Real },
            .{ u8, zml.Complex(zml.Rational), zml.Complex(zml.Rational) },
            .{ u8, zml.Complex(zml.Real), zml.Complex(zml.Real) },
            //.{ u8, zml.Expression, zml.Expression },
            .{ u16, u8, u16 },
            .{ u16, u16, u16 },
            .{ u16, u32, u32 },
            .{ u16, u64, u64 },
            .{ u16, u128, u128 },
            .{ u16, i8, i32 },
            .{ u16, i16, i32 },
            .{ u16, i32, i32 },
            .{ u16, i64, i64 },
            .{ u16, i128, i128 },
            .{ u16, comptime_int, u16 },
            .{ u16, f16, f32 },
            .{ u16, f32, f32 },
            .{ u16, f64, f64 },
            .{ u16, f80, f80 },
            .{ u16, f128, f128 },
            .{ u16, comptime_float, f32 },
            .{ u16, zml.cf16, zml.cf32 },
            .{ u16, zml.cf32, zml.cf32 },
            .{ u16, zml.cf64, zml.cf64 },
            .{ u16, zml.cf80, zml.cf80 },
            .{ u16, zml.cf128, zml.cf128 },
            .{ u16, zml.comptime_complex, zml.cf32 },
            .{ u16, zml.Integer, zml.Integer },
            .{ u16, zml.Rational, zml.Rational },
            .{ u16, zml.Real, zml.Real },
            .{ u16, zml.Complex(zml.Rational), zml.Complex(zml.Rational) },
            .{ u16, zml.Complex(zml.Real), zml.Complex(zml.Real) },
            //.{ u16, zml.Expression, zml.Expression },
            .{ u32, u8, u32 },
            .{ u32, u16, u32 },
            .{ u32, u32, u32 },
            .{ u32, u64, u64 },
            .{ u32, u128, u128 },
            .{ u32, i8, i64 },
            .{ u32, i16, i64 },
            .{ u32, i32, i64 },
            .{ u32, i64, i64 },
            .{ u32, i128, i128 },
            .{ u32, comptime_int, u32 },
            .{ u32, f16, f64 },
            .{ u32, f32, f64 },
            .{ u32, f64, f64 },
            .{ u32, f80, f80 },
            .{ u32, f128, f128 },
            .{ u32, comptime_float, f64 },
            .{ u32, zml.cf16, zml.cf64 },
            .{ u32, zml.cf32, zml.cf64 },
            .{ u32, zml.cf64, zml.cf64 },
            .{ u32, zml.cf80, zml.cf80 },
            .{ u32, zml.cf128, zml.cf128 },
            .{ u32, zml.comptime_complex, zml.cf64 },
            .{ u32, zml.Integer, zml.Integer },
            .{ u32, zml.Rational, zml.Rational },
            .{ u32, zml.Real, zml.Real },
            .{ u32, zml.Complex(zml.Rational), zml.Complex(zml.Rational) },
            .{ u32, zml.Complex(zml.Real), zml.Complex(zml.Real) },
            //.{ u32, zml.Expression, zml.Expression },
            .{ u64, u8, u64 },
            .{ u64, u16, u64 },
            .{ u64, u32, u64 },
            .{ u64, u64, u64 },
            .{ u64, u128, u128 },
            .{ u64, i8, i128 },
            .{ u64, i16, i128 },
            .{ u64, i32, i128 },
            .{ u64, i64, i128 },
            .{ u64, i128, i128 },
            .{ u64, comptime_int, u64 },
            .{ u64, f16, f128 },
            .{ u64, f32, f128 },
            .{ u64, f64, f128 },
            .{ u64, f80, f128 },
            .{ u64, f128, f128 },
            .{ u64, comptime_float, f128 },
            .{ u64, zml.cf16, zml.cf128 },
            .{ u64, zml.cf32, zml.cf128 },
            .{ u64, zml.cf64, zml.cf128 },
            .{ u64, zml.cf80, zml.cf128 },
            .{ u64, zml.cf128, zml.cf128 },
            .{ u64, zml.comptime_complex, zml.cf128 },
            .{ u64, zml.Integer, zml.Integer },
            .{ u64, zml.Rational, zml.Rational },
            .{ u64, zml.Real, zml.Real },
            .{ u64, zml.Complex(zml.Rational), zml.Complex(zml.Rational) },
            .{ u64, zml.Complex(zml.Real), zml.Complex(zml.Real) },
            //.{ u64, zml.Expression, zml.Expression },
            .{ u128, u8, u128 },
            .{ u128, u16, u128 },
            .{ u128, u32, u128 },
            .{ u128, u64, u128 },
            .{ u128, u128, u128 },
            //.{ u128, f16, f128 },
            //.{ u128, f32, f128 },
            //.{ u128, f64, f128 },
            //.{ u128, f80, f128 },
            //.{ u128, f128, f128 },
            //.{ u128, comptime_float, comptime_float },
            //.{ u128, zml.cf16, zml.cf128 },
            //.{ u128, zml.cf32, zml.cf128 },
            //.{ u128, zml.cf64, zml.cf128 },
            //.{ u128, zml.cf80, zml.cf128 },
            //.{ u128, zml.cf128, zml.cf128 },
            //.{ u128, zml.comptime_complex, zml.comptime_complex },
            .{ u128, zml.Integer, zml.Integer },
            .{ u128, zml.Rational, zml.Rational },
            .{ u128, zml.Real, zml.Real },
            .{ u128, zml.Complex(zml.Rational), zml.Complex(zml.Rational) },
            .{ u128, zml.Complex(zml.Real), zml.Complex(zml.Real) },
            //.{ u128, zml.Expression, zml.Expression },
            .{ i8, u8, i16 },
            .{ i8, u16, i16 },
            .{ i8, u32, i32 },
            .{ i8, u64, i64 },
            .{ i8, u128, i128 },
            .{ i8, i8, i16 },
            .{ i8, i16, i16 },
            .{ i8, i32, i32 },
            .{ i8, i64, i64 },
            .{ i8, i128, i128 },
            .{ i8, comptime_int, i8 },
            //.{ i8, f16, f32 },
            .{ i8, f32, f32 },
            .{ i8, f64, f64 },
            // FINISH
        };

        for (data) |triple| {
            try std.testing.expectEqual(triple[2], Coerce(triple[0], triple[1]));
        }
    }
}
