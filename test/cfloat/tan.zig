const std = @import("std");
const zml = @import("zml");
const cf32 = zml.cf32;
const cf64 = zml.cf64;
const cf80 = zml.cf80;
const cf128 = zml.cf128;
const tan = zml.cfloat.tan;

test tan {
    try std.testing.expectEqual(cf32.init(0x0p+0, 0x0p+0), tan(cf32.init(0x0p+0, 0x0p+0)));
    try std.testing.expectEqual(cf32.init(0x0p+0, -0x0p+0), tan(cf32.init(0x0p+0, -0x0p+0)));
    try std.testing.expectEqual(cf32.init(-0x0p+0, 0x0p+0), tan(cf32.init(-0x0p+0, 0x0p+0)));
    try std.testing.expectEqual(cf32.init(-0x0p+0, -0x0p+0), tan(cf32.init(-0x0p+0, -0x0p+0)));
    try std.testing.expectEqual(cf32.init(0x2.92ab3p-4, 0xf.9b169p-4), tan(cf32.init(0xcp-4, 0x1.4p+0)));
    // try std.testing.expectEqual(cf32.init(0xf.6addfp-12, -0x1.00d44p+0), tan(cf32.init(-0x2p+0, -0x3p+0)));
    try std.testing.expectEqual(cf32.init(0x8.1cfa8p-132, 0x1p+0), tan(cf32.init(0x1p+0, 0x2.dp+4)));
    try std.testing.expectEqual(cf32.init(0x2.60a8p-136, 0x1p+0), tan(cf32.init(0x1p+0, 0x2.fp+4)));
    try std.testing.expectEqual(cf32.init(0x0p+0, 0x1p+0), tan(cf32.init(0x1p+0, 0x1.63p+8)));
    try std.testing.expectEqual(cf32.init(0x0p+0, 0x1p+0), tan(cf32.init(0x1p+0, 0x1.6dp+8)));
    try std.testing.expectEqual(cf32.init(0x0p+0, 0x1p+0), tan(cf32.init(0x1p+0, 0x1.63p+12)));
    try std.testing.expectEqual(cf32.init(0x0p+0, 0x1p+0), tan(cf32.init(0x1p+0, 0x1.63ap+12)));
    // try std.testing.expectEqual(cf32.init(-0x1.5d1494p+24, 0x0p+0), tan(cf32.init(0x1.921fb6p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf32.init(0x3.ea076p-4, 0xe.8fe81p-4), tan(cf32.init(0x8p+124, 0x1p+0)));
    try std.testing.expectEqual(cf32.init(-0x3.60b26p-4, 0xd.c2635p-4), tan(cf32.init(0xf.fffffp+124, 0x1p+0)));
    try std.testing.expectEqual(cf32.init(-0x3.60b26p-4, 0xd.c2635p-4), tan(cf32.init(0xf.fffffp+124, 0x1p+0)));
    try std.testing.expectEqual(cf32.init(0x0p+0, 0x1p+0), tan(cf32.init(0xc.35p+12, 0xc.35p+12)));
    try std.testing.expectEqual(cf32.init(0x0p+0, -0x1p+0), tan(cf32.init(0xc.35p+12, -0xc.35p+12)));
    try std.testing.expectEqual(cf32.init(-0x0p+0, 0x1p+0), tan(cf32.init(-0xc.35p+12, 0xc.35p+12)));
    try std.testing.expectEqual(cf32.init(-0x0p+0, -0x1p+0), tan(cf32.init(-0xc.35p+12, -0xc.35p+12)));
    // try std.testing.expectEqual(cf32.init(-0x1.5d1494p+24, 0xe.e008fp-104), tan(cf32.init(0x1.921fb6p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf32.init(-0x1.5d1494p+24, 0xe.e008fp-104), tan(cf32.init(0x1.921fb6p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf32.init(-0x1.5d1494p+24, 0x0p+0), tan(cf32.init(0x1.921fb6p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf32.init(0xc.a1bdap+20, 0x4.fc7fbp-104), tan(cf32.init(0x1.921fb4p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf32.init(0xc.a1bdap+20, 0x0p+0), tan(cf32.init(0x1.921fb4p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf32.init(-0x1.5d1494p+24, 0xe.e008fp-104), tan(cf32.init(0x1.921fb6p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf32.init(-0x1.5d1494p+24, 0x0p+0), tan(cf32.init(0x1.921fb6p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf32.init(0xc.a1bdap+20, 0x4.fc7fbp-104), tan(cf32.init(0x1.921fb4p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf32.init(0xc.a1bdap+20, 0x0p+0), tan(cf32.init(0x1.921fb4p+0, 0x0p+0)));
    try std.testing.expectEqual(cf32.init(0x4p-128, 0x0p+0), tan(cf32.init(0x4p-128, 0x0p+0)));
    try std.testing.expectEqual(cf32.init(-0x4p-128, 0x0p+0), tan(cf32.init(-0x4p-128, 0x0p+0)));
    try std.testing.expectEqual(cf32.init(0x8p-152, 0x0p+0), tan(cf32.init(0x8p-152, 0x0p+0)));
    try std.testing.expectEqual(cf32.init(-0x8p-152, 0x0p+0), tan(cf32.init(-0x8p-152, 0x0p+0)));
    try std.testing.expectEqual(cf32.init(0x0p+0, 0x4p-128), tan(cf32.init(0x0p+0, 0x4p-128)));
    try std.testing.expectEqual(cf32.init(0x0p+0, -0x4p-128), tan(cf32.init(0x0p+0, -0x4p-128)));
    try std.testing.expectEqual(cf32.init(0x0p+0, 0x8p-152), tan(cf32.init(0x0p+0, 0x8p-152)));
    try std.testing.expectEqual(cf32.init(0x0p+0, -0x8p-152), tan(cf32.init(0x0p+0, -0x8p-152)));

    try std.testing.expectEqual(cf64.init(0x0p+0, 0x0p+0), tan(cf64.init(0x0p+0, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(0x0p+0, -0x0p+0), tan(cf64.init(0x0p+0, -0x0p+0)));
    try std.testing.expectEqual(cf64.init(-0x0p+0, 0x0p+0), tan(cf64.init(-0x0p+0, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(-0x0p+0, -0x0p+0), tan(cf64.init(-0x0p+0, -0x0p+0)));
    // try std.testing.expectEqual(cf64.init(0x2.92ab2f573c85cp-4, 0xf.9b16882eda3f8p-4), tan(cf64.init(0xcp-4, 0x1.4p+0)));
    // try std.testing.expectEqual(cf64.init(0xf.6addf0814b868p-12, -0x1.00d43f269153dp+0), tan(cf64.init(-0x2p+0, -0x3p+0)));
    try std.testing.expectEqual(cf64.init(0x8.1cfa783d16f48p-132, 0x1p+0), tan(cf64.init(0x1p+0, 0x2.dp+4)));
    try std.testing.expectEqual(cf64.init(0x2.60a8b2f7f5242p-136, 0x1p+0), tan(cf64.init(0x1p+0, 0x2.fp+4)));
    try std.testing.expectEqual(cf64.init(0x1.76a2c6f034b4cp-1024, 0x1p+0), tan(cf64.init(0x1p+0, 0x1.63p+8)));
    try std.testing.expectEqual(cf64.init(0xc.f47f4p-1056, 0x1p+0), tan(cf64.init(0x1p+0, 0x1.6dp+8)));
    try std.testing.expectEqual(cf64.init(0x0p+0, 0x1p+0), tan(cf64.init(0x1p+0, 0x1.63p+12)));
    try std.testing.expectEqual(cf64.init(0x0p+0, 0x1p+0), tan(cf64.init(0x1p+0, 0x1.63ap+12)));
    try std.testing.expectEqual(cf64.init(-0x1.5d14946dc9897p+24, 0x0p+0), tan(cf64.init(0x1.921fb6p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf64.init(0x3.ea075fdf18c8ap-4, 0xe.8fe80b8795b7p-4), tan(cf64.init(0x8p+124, 0x1p+0)));
    // try std.testing.expectEqual(cf64.init(-0x3.60b2616c1339ap-4, 0xd.c26353c0682p-4), tan(cf64.init(0xf.fffffp+124, 0x1p+0)));
    // try std.testing.expectEqual(cf64.init(-0x3.9b7edf84053dep-4, 0xe.0ec57df9e9488p-4), tan(cf64.init(0x8p+1020, 0x1p+0)));
    // try std.testing.expectEqual(cf64.init(-0x3.60b2616c1339ap-4, 0xd.c26353c0682p-4), tan(cf64.init(0xf.fffffp+124, 0x1p+0)));
    // try std.testing.expectEqual(cf64.init(-0x8.891dda2c06578p-12, 0xc.2f859c7fb353p-4), tan(cf64.init(0xf.ffffffffffff8p+1020, 0x1p+0)));
    try std.testing.expectEqual(cf64.init(0x0p+0, 0x1p+0), tan(cf64.init(0xc.35p+12, 0xc.35p+12)));
    try std.testing.expectEqual(cf64.init(0x0p+0, -0x1p+0), tan(cf64.init(0xc.35p+12, -0xc.35p+12)));
    try std.testing.expectEqual(cf64.init(-0x0p+0, 0x1p+0), tan(cf64.init(-0xc.35p+12, 0xc.35p+12)));
    try std.testing.expectEqual(cf64.init(-0x0p+0, -0x1p+0), tan(cf64.init(-0xc.35p+12, -0xc.35p+12)));
    try std.testing.expectEqual(cf64.init(-0x1.5d14946dc9897p+24, 0xe.e008f2d6f5c38p-104), tan(cf64.init(0x1.921fb6p+0, 0x8p-152)));
    try std.testing.expectEqual(cf64.init(-0x1.5d14946dc9897p+24, 0xe.e008f2d6f5c38p-104), tan(cf64.init(0x1.921fb6p+0, 0x8p-152)));
    try std.testing.expectEqual(cf64.init(-0x1.5d14946dc9897p+24, 0x0p+0), tan(cf64.init(0x1.921fb6p+0, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(-0x1.5d14946dc9897p+24, 0x7.7004796b7aep-1028), tan(cf64.init(0x1.921fb6p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf64.init(0xc.a1bd99b5b586p+20, 0x4.fc7fb3865f34p-104), tan(cf64.init(0x1.921fb4p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf64.init(0xc.a1bd99b5b586p+20, 0x0p+0), tan(cf64.init(0x1.921fb4p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf64.init(0xc.a1bd99b5b586p+20, 0x2.7e3fd9c32f98p-1028), tan(cf64.init(0x1.921fb4p+0, 0x4p-1076)));
    try std.testing.expectEqual(cf64.init(0x3.a052cf8639b6ap+52, 0x6.932c3dab5e518p-44), tan(cf64.init(0x1.921fb54442d18p+0, 0x8p-152)));
    try std.testing.expectEqual(cf64.init(0x3.a052cf8639b6ap+52, 0x0p+0), tan(cf64.init(0x1.921fb54442d18p+0, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(0x3.a052cf8639b6ap+52, 0x3.49961ed5af28cp-968), tan(cf64.init(0x1.921fb54442d18p+0, 0x4p-1076)));
    try std.testing.expectEqual(cf64.init(-0x1.5d14946dc9897p+24, 0xe.e008f2d6f5c38p-104), tan(cf64.init(0x1.921fb6p+0, 0x8p-152)));
    try std.testing.expectEqual(cf64.init(-0x1.5d14946dc9897p+24, 0x0p+0), tan(cf64.init(0x1.921fb6p+0, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(-0x1.5d14946dc9897p+24, 0x7.7004796b7aep-1028), tan(cf64.init(0x1.921fb6p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf64.init(0xc.a1bd99b5b586p+20, 0x4.fc7fb3865f34p-104), tan(cf64.init(0x1.921fb4p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf64.init(0xc.a1bd99b5b586p+20, 0x0p+0), tan(cf64.init(0x1.921fb4p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf64.init(0xc.a1bd99b5b586p+20, 0x2.7e3fd9c32f98p-1028), tan(cf64.init(0x1.921fb4p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf64.init(-0x1.617a15494767ap+52, 0xf.408f476314478p-48), tan(cf64.init(0x1.921fb54442d19p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf64.init(-0x1.617a15494767ap+52, 0x0p+0), tan(cf64.init(0x1.921fb54442d19p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf64.init(-0x1.617a15494767ap+52, 0x7.a047a3b18a23cp-972), tan(cf64.init(0x1.921fb54442d19p+0, 0x4p-1076)));
    try std.testing.expectEqual(cf64.init(0x3.a052cf8639b6ap+52, 0x6.932c3dab5e518p-44), tan(cf64.init(0x1.921fb54442d18p+0, 0x8p-152)));
    try std.testing.expectEqual(cf64.init(0x3.a052cf8639b6ap+52, 0x0p+0), tan(cf64.init(0x1.921fb54442d18p+0, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(0x3.a052cf8639b6ap+52, 0x3.49961ed5af28cp-968), tan(cf64.init(0x1.921fb54442d18p+0, 0x4p-1076)));
    try std.testing.expectEqual(cf64.init(0x4p-128, 0x0p+0), tan(cf64.init(0x4p-128, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(0x4p-1024, 0x0p+0), tan(cf64.init(0x4p-1024, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(0x8p-972, 0x0p+0), tan(cf64.init(0x8p-972, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(-0x4p-128, 0x0p+0), tan(cf64.init(-0x4p-128, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(-0x4p-1024, 0x0p+0), tan(cf64.init(-0x4p-1024, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(-0x8p-972, 0x0p+0), tan(cf64.init(-0x8p-972, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(0x8p-152, 0x0p+0), tan(cf64.init(0x8p-152, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(0x4p-1076, 0x0p+0), tan(cf64.init(0x4p-1076, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(-0x8p-152, 0x0p+0), tan(cf64.init(-0x8p-152, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(-0x4p-1076, 0x0p+0), tan(cf64.init(-0x4p-1076, 0x0p+0)));
    try std.testing.expectEqual(cf64.init(0x0p+0, 0x4p-128), tan(cf64.init(0x0p+0, 0x4p-128)));
    try std.testing.expectEqual(cf64.init(0x0p+0, 0x4p-1024), tan(cf64.init(0x0p+0, 0x4p-1024)));
    try std.testing.expectEqual(cf64.init(0x0p+0, 0x8p-972), tan(cf64.init(0x0p+0, 0x8p-972)));
    try std.testing.expectEqual(cf64.init(0x0p+0, -0x4p-128), tan(cf64.init(0x0p+0, -0x4p-128)));
    try std.testing.expectEqual(cf64.init(0x0p+0, -0x4p-1024), tan(cf64.init(0x0p+0, -0x4p-1024)));
    try std.testing.expectEqual(cf64.init(0x0p+0, -0x8p-972), tan(cf64.init(0x0p+0, -0x8p-972)));
    try std.testing.expectEqual(cf64.init(0x0p+0, 0x8p-152), tan(cf64.init(0x0p+0, 0x8p-152)));
    try std.testing.expectEqual(cf64.init(0x0p+0, 0x4p-1076), tan(cf64.init(0x0p+0, 0x4p-1076)));
    try std.testing.expectEqual(cf64.init(0x0p+0, -0x8p-152), tan(cf64.init(0x0p+0, -0x8p-152)));
    try std.testing.expectEqual(cf64.init(0x0p+0, -0x4p-1076), tan(cf64.init(0x0p+0, -0x4p-1076)));

    try std.testing.expectEqual(cf80.init(0x0p+0, 0x0p+0), tan(cf80.init(0x0p+0, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(0x0p+0, -0x0p+0), tan(cf80.init(0x0p+0, -0x0p+0)));
    try std.testing.expectEqual(cf80.init(-0x0p+0, 0x0p+0), tan(cf80.init(-0x0p+0, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(-0x0p+0, -0x0p+0), tan(cf80.init(-0x0p+0, -0x0p+0)));
    // try std.testing.expectEqual(cf80.init(0x2.92ab2f573c85c214p-4, 0xf.9b16882eda3fbc3p-4), tan(cf80.init(0xcp-4, 0x1.4p+0)));
    // try std.testing.expectEqual(cf80.init(0xf.6addf0814b8657ap-12, -0x1.00d43f269153cff6p+0), tan(cf80.init(-0x2p+0, -0x3p+0)));
    // try std.testing.expectEqual(cf80.init(0x8.1cfa783d16f462ap-132, 0x1p+0), tan(cf80.init(0x1p+0, 0x2.dp+4)));
    // try std.testing.expectEqual(cf80.init(0x2.60a8b2f7f5241554p-136, 0x1p+0), tan(cf80.init(0x1p+0, 0x2.fp+4)));
    try std.testing.expectEqual(cf80.init(0x1.76a2c6f034b4a7fcp-1024, 0x1p+0), tan(cf80.init(0x1p+0, 0x1.63p+8)));
    try std.testing.expectEqual(cf80.init(0xc.f47f20686b62b7p-1056, 0x1p+0), tan(cf80.init(0x1p+0, 0x1.6dp+8)));
    try std.testing.expectEqual(cf80.init(0xe.6442e59c9ba2ap-16392, 0x1p+0), tan(cf80.init(0x1p+0, 0x1.63p+12)));
    try std.testing.expectEqual(cf80.init(0x7.f673edp-16420, 0x1p+0), tan(cf80.init(0x1p+0, 0x1.63ap+12)));
    try std.testing.expectEqual(cf80.init(-0x1.5d14946dc98975d6p+24, 0x0p+0), tan(cf80.init(0x1.921fb6p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf80.init(0x3.ea075fdf18c8a74cp-4, 0xe.8fe80b8795b6ed3p-4), tan(cf80.init(0x8p+124, 0x1p+0)));
    // try std.testing.expectEqual(cf80.init(-0x3.60b2616c13399068p-4, 0xd.c26353c068203bfp-4), tan(cf80.init(0xf.fffffp+124, 0x1p+0)));
    // try std.testing.expectEqual(cf80.init(-0x3.9b7edf84053dda48p-4, 0xe.0ec57df9e9489b8p-4), tan(cf80.init(0x8p+1020, 0x1p+0)));
    // try std.testing.expectEqual(cf80.init(-0x3.60b2616c13399068p-4, 0xd.c26353c068203bfp-4), tan(cf80.init(0xf.fffffp+124, 0x1p+0)));
    // try std.testing.expectEqual(cf80.init(-0x8.891dda2c0657714p-12, 0xc.2f859c7fb353152p-4), tan(cf80.init(0xf.ffffffffffff8p+1020, 0x1p+0)));
    // try std.testing.expectEqual(cf80.init(0x2.92e1ce9b08cb660cp-4, 0xd.039cb06618c08cp-4), tan(cf80.init(0x8p+16380, 0x1p+0)));
    try std.testing.expectEqual(cf80.init(0x0p+0, 0x1p+0), tan(cf80.init(0xc.35p+12, 0xc.35p+12)));
    try std.testing.expectEqual(cf80.init(0x0p+0, -0x1p+0), tan(cf80.init(0xc.35p+12, -0xc.35p+12)));
    try std.testing.expectEqual(cf80.init(-0x0p+0, 0x1p+0), tan(cf80.init(-0xc.35p+12, 0xc.35p+12)));
    try std.testing.expectEqual(cf80.init(-0x0p+0, -0x1p+0), tan(cf80.init(-0xc.35p+12, -0xc.35p+12)));
    // try std.testing.expectEqual(cf80.init(-0x1.5d14946dc98975d6p+24, 0xe.e008f2d6f5c347p-104), tan(cf80.init(0x1.921fb6p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf80.init(-0x1.5d14946dc98975d6p+24, 0xe.e008f2d6f5c347p-104), tan(cf80.init(0x1.921fb6p+0, 0x8p-152)));
    try std.testing.expectEqual(cf80.init(-0x1.5d14946dc98975d6p+24, 0x0p+0), tan(cf80.init(0x1.921fb6p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf80.init(-0x1.5d14946dc98975d6p+24, 0x7.7004796b7ae1a38p-1028), tan(cf80.init(0x1.921fb6p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf80.init(0xc.a1bd99b5b58623dp+20, 0x4.fc7fb3865f33f68p-104), tan(cf80.init(0x1.921fb4p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf80.init(0xc.a1bd99b5b58623dp+20, 0x0p+0), tan(cf80.init(0x1.921fb4p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf80.init(0xc.a1bd99b5b58623dp+20, 0x2.7e3fd9c32f99fb4p-1028), tan(cf80.init(0x1.921fb4p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf80.init(0x3.a052cf8639b69c18p+52, 0x6.932c3dab5e519e3p-44), tan(cf80.init(0x1.921fb54442d18p+0, 0x8p-152)));
    try std.testing.expectEqual(cf80.init(0x3.a052cf8639b69c18p+52, 0x0p+0), tan(cf80.init(0x1.921fb54442d18p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf80.init(0x3.a052cf8639b69c18p+52, 0x3.49961ed5af28cf18p-968), tan(cf80.init(0x1.921fb54442d18p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf80.init(-0x1.5d14946dc98975d6p+24, 0xe.e008f2d6f5c347p-104), tan(cf80.init(0x1.921fb6p+0, 0x8p-152)));
    try std.testing.expectEqual(cf80.init(-0x1.5d14946dc98975d6p+24, 0x0p+0), tan(cf80.init(0x1.921fb6p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf80.init(-0x1.5d14946dc98975d6p+24, 0x7.7004796b7ae1a38p-1028), tan(cf80.init(0x1.921fb6p+0, 0x4p-1076)));
    try std.testing.expectEqual(cf80.init(-0x1.5d14946dc98975d6p+24, 0xe.e008f2d6f5cp-16400), tan(cf80.init(0x1.921fb6p+0, 0x8p-16448)));
    // try std.testing.expectEqual(cf80.init(0xc.a1bd99b5b58623dp+20, 0x4.fc7fb3865f33f68p-104), tan(cf80.init(0x1.921fb4p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf80.init(0xc.a1bd99b5b58623dp+20, 0x0p+0), tan(cf80.init(0x1.921fb4p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf80.init(0xc.a1bd99b5b58623dp+20, 0x2.7e3fd9c32f99fb4p-1028), tan(cf80.init(0x1.921fb4p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf80.init(0xc.a1bd99b5b58623dp+20, 0x4.fc7fb3865f3p-16400), tan(cf80.init(0x1.921fb4p+0, 0x8p-16448)));
    // try std.testing.expectEqual(cf80.init(-0x1.617a15494767a048p+52, 0xf.408f476314478bfp-48), tan(cf80.init(0x1.921fb54442d19p+0, 0x8p-152)));
    try std.testing.expectEqual(cf80.init(-0x1.617a15494767a048p+52, 0x0p+0), tan(cf80.init(0x1.921fb54442d19p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf80.init(-0x1.617a15494767a048p+52, 0x7.a047a3b18a23c5f8p-972), tan(cf80.init(0x1.921fb54442d19p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf80.init(-0x1.617a15494767a048p+52, 0xf.408f476314478bfp-16344), tan(cf80.init(0x1.921fb54442d19p+0, 0x8p-16448)));
    // try std.testing.expectEqual(cf80.init(0x3.a052cf8639b69c18p+52, 0x6.932c3dab5e519e3p-44), tan(cf80.init(0x1.921fb54442d18p+0, 0x8p-152)));
    try std.testing.expectEqual(cf80.init(0x3.a052cf8639b69c18p+52, 0x0p+0), tan(cf80.init(0x1.921fb54442d18p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf80.init(0x3.a052cf8639b69c18p+52, 0x3.49961ed5af28cf18p-968), tan(cf80.init(0x1.921fb54442d18p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf80.init(0x3.a052cf8639b69c18p+52, 0x6.932c3dab5e519e3p-16340), tan(cf80.init(0x1.921fb54442d18p+0, 0x8p-16448)));
    // try std.testing.expectEqual(cf80.init(-0x2.29478136aaf68d7cp+64, 0x2.55e3001b8e1413fcp-20), tan(cf80.init(0x1.921fb54442d1846ap+0, 0x8p-152)));
    try std.testing.expectEqual(cf80.init(-0x2.29478136aaf68d7cp+64, 0x0p+0), tan(cf80.init(0x1.921fb54442d1846ap+0, 0x0p+0)));
    // try std.testing.expectEqual(cf80.init(-0x2.29478136aaf68d7cp+64, 0x1.2af1800dc70a09fep-944), tan(cf80.init(0x1.921fb54442d1846ap+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf80.init(-0x2.29478136aaf68d7cp+64, 0x2.55e3001b8e1413fcp-16316), tan(cf80.init(0x1.921fb54442d1846ap+0, 0x8p-16448)));
    try std.testing.expectEqual(cf80.init(0x4p-128, 0x0p+0), tan(cf80.init(0x4p-128, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(0x4p-1024, 0x0p+0), tan(cf80.init(0x4p-1024, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(0x4p-16384, 0x0p+0), tan(cf80.init(0x4p-16384, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(0x2p-16384, 0x0p+0), tan(cf80.init(0x2p-16384, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(0x8p-972, 0x0p+0), tan(cf80.init(0x8p-972, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(-0x4p-128, 0x0p+0), tan(cf80.init(-0x4p-128, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(-0x4p-1024, 0x0p+0), tan(cf80.init(-0x4p-1024, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(-0x4p-16384, 0x0p+0), tan(cf80.init(-0x4p-16384, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(-0x2p-16384, 0x0p+0), tan(cf80.init(-0x2p-16384, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(-0x8p-972, 0x0p+0), tan(cf80.init(-0x8p-972, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(0x8p-152, 0x0p+0), tan(cf80.init(0x8p-152, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(0x4p-1076, 0x0p+0), tan(cf80.init(0x4p-1076, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(0x8p-16448, 0x0p+0), tan(cf80.init(0x8p-16448, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(-0x8p-152, 0x0p+0), tan(cf80.init(-0x8p-152, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(-0x4p-1076, 0x0p+0), tan(cf80.init(-0x4p-1076, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(-0x8p-16448, 0x0p+0), tan(cf80.init(-0x8p-16448, 0x0p+0)));
    try std.testing.expectEqual(cf80.init(0x0p+0, 0x4p-128), tan(cf80.init(0x0p+0, 0x4p-128)));
    try std.testing.expectEqual(cf80.init(0x0p+0, 0x4p-1024), tan(cf80.init(0x0p+0, 0x4p-1024)));
    try std.testing.expectEqual(cf80.init(0x0p+0, 0x4p-16384), tan(cf80.init(0x0p+0, 0x4p-16384)));
    try std.testing.expectEqual(cf80.init(0x0p+0, 0x2p-16384), tan(cf80.init(0x0p+0, 0x2p-16384)));
    try std.testing.expectEqual(cf80.init(0x0p+0, 0x8p-972), tan(cf80.init(0x0p+0, 0x8p-972)));
    try std.testing.expectEqual(cf80.init(0x0p+0, -0x4p-128), tan(cf80.init(0x0p+0, -0x4p-128)));
    try std.testing.expectEqual(cf80.init(0x0p+0, -0x4p-1024), tan(cf80.init(0x0p+0, -0x4p-1024)));
    try std.testing.expectEqual(cf80.init(0x0p+0, -0x4p-16384), tan(cf80.init(0x0p+0, -0x4p-16384)));
    try std.testing.expectEqual(cf80.init(0x0p+0, -0x2p-16384), tan(cf80.init(0x0p+0, -0x2p-16384)));
    try std.testing.expectEqual(cf80.init(0x0p+0, -0x8p-972), tan(cf80.init(0x0p+0, -0x8p-972)));
    try std.testing.expectEqual(cf80.init(0x0p+0, 0x8p-152), tan(cf80.init(0x0p+0, 0x8p-152)));
    try std.testing.expectEqual(cf80.init(0x0p+0, 0x4p-1076), tan(cf80.init(0x0p+0, 0x4p-1076)));
    try std.testing.expectEqual(cf80.init(0x0p+0, 0x8p-16448), tan(cf80.init(0x0p+0, 0x8p-16448)));
    try std.testing.expectEqual(cf80.init(0x0p+0, -0x8p-152), tan(cf80.init(0x0p+0, -0x8p-152)));
    try std.testing.expectEqual(cf80.init(0x0p+0, -0x4p-1076), tan(cf80.init(0x0p+0, -0x4p-1076)));
    try std.testing.expectEqual(cf80.init(0x0p+0, -0x8p-16448), tan(cf80.init(0x0p+0, -0x8p-16448)));

    try std.testing.expectEqual(cf128.init(0x0p+0, 0x0p+0), tan(cf128.init(0x0p+0, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(0x0p+0, -0x0p+0), tan(cf128.init(0x0p+0, -0x0p+0)));
    try std.testing.expectEqual(cf128.init(-0x0p+0, 0x0p+0), tan(cf128.init(-0x0p+0, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(-0x0p+0, -0x0p+0), tan(cf128.init(-0x0p+0, -0x0p+0)));
    // try std.testing.expectEqual(cf128.init(0x2.92ab2f573c85c2132fe40ca506dcp-4, 0xf.9b16882eda3fbc35e672250c71ep-4), tan(cf128.init(0xcp-4, 0x1.4p+0)));
    // try std.testing.expectEqual(cf128.init(0xf.6addf0814b86579a84338ca6139p-12, -0x1.00d43f269153cff541f87dd4f833p+0), tan(cf128.init(-0x2p+0, -0x3p+0)));
    // try std.testing.expectEqual(cf128.init(0x8.1cfa783d16f462a5a6cd1741d1bp-132, 0x1p+0), tan(cf128.init(0x1p+0, 0x2.dp+4)));
    // try std.testing.expectEqual(cf128.init(0x2.60a8b2f7f5241555288ba7825782p-136, 0x1p+0), tan(cf128.init(0x1p+0, 0x2.fp+4)));
    // try std.testing.expectEqual(cf128.init(0x1.76a2c6f034b4a7fc921d45c1e929p-1024, 0x1p+0), tan(cf128.init(0x1p+0, 0x1.63p+8)));
    // try std.testing.expectEqual(cf128.init(0xc.f47f20686b62b7024c3d69ff0358p-1056, 0x1p+0), tan(cf128.init(0x1p+0, 0x1.6dp+8)));
    // try std.testing.expectEqual(cf128.init(0xe.6442e59c9ba29e34d4429f85ccp-16392, 0x1p+0), tan(cf128.init(0x1p+0, 0x1.63p+12)));
    // try std.testing.expectEqual(cf128.init(0x7.f673ecc6b39aff738e8p-16420, 0x1p+0), tan(cf128.init(0x1p+0, 0x1.63ap+12)));
    // try std.testing.expectEqual(cf128.init(-0x1.5d14946dc98975d6421a55284fep+24, 0x0p+0), tan(cf128.init(0x1.921fb6p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(0x3.ea075fdf18c8a74bfc7e25465e78p-4, 0xe.8fe80b8795b6ed2c28e53930ce48p-4), tan(cf128.init(0x8p+124, 0x1p+0)));
    // try std.testing.expectEqual(cf128.init(-0x3.60b2616c1339906858c23a90d002p-4, 0xd.c26353c068203bf3a2f7a9b94dcp-4), tan(cf128.init(0xf.fffffp+124, 0x1p+0)));
    // try std.testing.expectEqual(cf128.init(-0x3.9b7edf84053dda473c3ba3e75286p-4, 0xe.0ec57df9e9489b83c566cd1868b8p-4), tan(cf128.init(0x8p+1020, 0x1p+0)));
    // try std.testing.expectEqual(cf128.init(-0x3.60b2616c1339906858c23a90d002p-4, 0xd.c26353c068203bf3a2f7a9b94dcp-4), tan(cf128.init(0xf.fffffp+124, 0x1p+0)));
    // try std.testing.expectEqual(cf128.init(-0x8.891dda2c06577145af81f4f5604p-12, 0xc.2f859c7fb3531523e975e1dad058p-4), tan(cf128.init(0xf.ffffffffffff8p+1020, 0x1p+0)));
    // try std.testing.expectEqual(cf128.init(0x2.92e1ce9b08cb660c9a8081990afcp-4, 0xd.039cb06618c08bfe358cf75c6128p-4), tan(cf128.init(0x8p+16380, 0x1p+0)));
    // try std.testing.expectEqual(cf128.init(0x3.89f37a0888a0e05652b04c0aa334p-4, 0x1.33b2569c333811735902f282a0fp+0), tan(cf128.init(0xf.ffffffffffffbffffffffffffcp+1020, 0x1p+0)));
    try std.testing.expectEqual(cf128.init(0x0p+0, 0x1p+0), tan(cf128.init(0xc.35p+12, 0xc.35p+12)));
    try std.testing.expectEqual(cf128.init(0x0p+0, -0x1p+0), tan(cf128.init(0xc.35p+12, -0xc.35p+12)));
    try std.testing.expectEqual(cf128.init(-0x0p+0, 0x1p+0), tan(cf128.init(-0xc.35p+12, 0xc.35p+12)));
    try std.testing.expectEqual(cf128.init(-0x0p+0, -0x1p+0), tan(cf128.init(-0xc.35p+12, -0xc.35p+12)));
    // try std.testing.expectEqual(cf128.init(-0x1.5d14946dc98975d6421a55284fep+24, 0xe.e008f2d6f5c347063d6ad04df2bp-104), tan(cf128.init(0x1.921fb6p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf128.init(-0x1.5d14946dc98975d6421a55284fep+24, 0xe.e008f2d6f5c347063d6ad04df2bp-104), tan(cf128.init(0x1.921fb6p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf128.init(-0x1.5d14946dc98975d6421a55284fep+24, 0x0p+0), tan(cf128.init(0x1.921fb6p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(-0x1.5d14946dc98975d6421a55284fep+24, 0x7.7004796b7ae1a3831eb56826f958p-1028), tan(cf128.init(0x1.921fb6p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf128.init(0xc.a1bd99b5b58623cd91404ccd8ca8p+20, 0x4.fc7fb3865f33f6829c9b9ed04c98p-104), tan(cf128.init(0x1.921fb4p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf128.init(0xc.a1bd99b5b58623cd91404ccd8ca8p+20, 0x0p+0), tan(cf128.init(0x1.921fb4p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(0xc.a1bd99b5b58623cd91404ccd8ca8p+20, 0x2.7e3fd9c32f99fb414e4dcf68264cp-1028), tan(cf128.init(0x1.921fb4p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf128.init(0x3.a052cf8639b69c1871a036cababcp+52, 0x6.932c3dab5e519e3180080e7f12c8p-44), tan(cf128.init(0x1.921fb54442d18p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf128.init(0x3.a052cf8639b69c1871a036cababcp+52, 0x0p+0), tan(cf128.init(0x1.921fb54442d18p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(0x3.a052cf8639b69c1871a036cababcp+52, 0x3.49961ed5af28cf18c004073f8964p-968), tan(cf128.init(0x1.921fb54442d18p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf128.init(-0x1.5d14946dc98975d6421a55284fep+24, 0xe.e008f2d6f5c347063d6ad04df2bp-104), tan(cf128.init(0x1.921fb6p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf128.init(-0x1.5d14946dc98975d6421a55284fep+24, 0x0p+0), tan(cf128.init(0x1.921fb6p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(-0x1.5d14946dc98975d6421a55284fep+24, 0x7.7004796b7ae1a3831eb56826f958p-1028), tan(cf128.init(0x1.921fb6p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf128.init(-0x1.5d14946dc98975d6421a55284fep+24, 0xe.e008f2d6f5c347063d6ad04cp-16400), tan(cf128.init(0x1.921fb6p+0, 0x8p-16448)));
    // try std.testing.expectEqual(cf128.init(0xc.a1bd99b5b58623cd91404ccd8ca8p+20, 0x4.fc7fb3865f33f6829c9b9ed04c98p-104), tan(cf128.init(0x1.921fb4p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf128.init(0xc.a1bd99b5b58623cd91404ccd8ca8p+20, 0x0p+0), tan(cf128.init(0x1.921fb4p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(0xc.a1bd99b5b58623cd91404ccd8ca8p+20, 0x2.7e3fd9c32f99fb414e4dcf68264cp-1028), tan(cf128.init(0x1.921fb4p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf128.init(0xc.a1bd99b5b58623cd91404ccd8ca8p+20, 0x4.fc7fb3865f33f6829c9b9edp-16400), tan(cf128.init(0x1.921fb4p+0, 0x8p-16448)));
    // try std.testing.expectEqual(cf128.init(-0x1.617a15494767a04882c320317f3ep+52, 0xf.408f476314478bec5855a362f72p-48), tan(cf128.init(0x1.921fb54442d19p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf128.init(-0x1.617a15494767a04882c320317f3ep+52, 0x0p+0), tan(cf128.init(0x1.921fb54442d19p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(-0x1.617a15494767a04882c320317f3ep+52, 0x7.a047a3b18a23c5f62c2ad1b17b9p-972), tan(cf128.init(0x1.921fb54442d19p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf128.init(-0x1.617a15494767a04882c320317f3ep+52, 0xf.408f476314478bec5855a362f72p-16344), tan(cf128.init(0x1.921fb54442d19p+0, 0x8p-16448)));
    // try std.testing.expectEqual(cf128.init(0x3.a052cf8639b69c1871a036cababcp+52, 0x6.932c3dab5e519e3180080e7f12c8p-44), tan(cf128.init(0x1.921fb54442d18p+0, 0x8p-152)));
    // try std.testing.expectEqual(cf128.init(0x3.a052cf8639b69c1871a036cababcp+52, 0x0p+0), tan(cf128.init(0x1.921fb54442d18p+0, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(0x3.a052cf8639b69c1871a036cababcp+52, 0x3.49961ed5af28cf18c004073f8964p-968), tan(cf128.init(0x1.921fb54442d18p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf128.init(0x3.a052cf8639b69c1871a036cababcp+52, 0x6.932c3dab5e519e3180080e7f12c8p-16340), tan(cf128.init(0x1.921fb54442d18p+0, 0x8p-16448)));
    // try std.testing.expectEqual(cf128.init(-0x2.29478136aaf68d7b3b807fb349bap+64, 0x2.55e3001b8e1413fcf7193625f37ap-20), tan(cf128.init(0x1.921fb54442d1846ap+0, 0x8p-152)));
    try std.testing.expectEqual(cf128.init(-0x2.29478136aaf68d7b3b807fb349bap+64, 0x0p+0), tan(cf128.init(0x1.921fb54442d1846ap+0, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(-0x2.29478136aaf68d7b3b807fb349bap+64, 0x1.2af1800dc70a09fe7b8c9b12f9bdp-944), tan(cf128.init(0x1.921fb54442d1846ap+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf128.init(-0x2.29478136aaf68d7b3b807fb349bap+64, 0x2.55e3001b8e1413fcf7193625f37ap-16316), tan(cf128.init(0x1.921fb54442d1846ap+0, 0x8p-16448)));
    try std.testing.expectEqual(cf128.init(0x4p-128, 0x0p+0), tan(cf128.init(0x4p-128, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(0x4p-1024, 0x0p+0), tan(cf128.init(0x4p-1024, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(0x4p-16384, 0x0p+0), tan(cf128.init(0x4p-16384, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(0x2p-16384, 0x0p+0), tan(cf128.init(0x2p-16384, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(0x8p-972, 0x0p+0), tan(cf128.init(0x8p-972, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(-0x4p-128, 0x0p+0), tan(cf128.init(-0x4p-128, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(-0x4p-1024, 0x0p+0), tan(cf128.init(-0x4p-1024, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(-0x4p-16384, 0x0p+0), tan(cf128.init(-0x4p-16384, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(-0x2p-16384, 0x0p+0), tan(cf128.init(-0x2p-16384, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(-0x8p-972, 0x0p+0), tan(cf128.init(-0x8p-972, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(0x8p-152, 0x0p+0), tan(cf128.init(0x8p-152, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(0x4p-1076, 0x0p+0), tan(cf128.init(0x4p-1076, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(0x8p-16448, 0x0p+0), tan(cf128.init(0x8p-16448, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(0x4p-16448, 0x0p+0), tan(cf128.init(0x4p-16448, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(0x4p-16496, 0x0p+0), tan(cf128.init(0x4p-16496, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(-0x8p-152, 0x0p+0), tan(cf128.init(-0x8p-152, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(-0x4p-1076, 0x0p+0), tan(cf128.init(-0x4p-1076, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(-0x8p-16448, 0x0p+0), tan(cf128.init(-0x8p-16448, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(-0x4p-16448, 0x0p+0), tan(cf128.init(-0x4p-16448, 0x0p+0)));
    // try std.testing.expectEqual(cf128.init(-0x4p-16496, 0x0p+0), tan(cf128.init(-0x4p-16496, 0x0p+0)));
    try std.testing.expectEqual(cf128.init(0x0p+0, 0x4p-128), tan(cf128.init(0x0p+0, 0x4p-128)));
    try std.testing.expectEqual(cf128.init(0x0p+0, 0x4p-1024), tan(cf128.init(0x0p+0, 0x4p-1024)));
    try std.testing.expectEqual(cf128.init(0x0p+0, 0x4p-16384), tan(cf128.init(0x0p+0, 0x4p-16384)));
    // try std.testing.expectEqual(cf128.init(0x0p+0, 0x2p-16384), tan(cf128.init(0x0p+0, 0x2p-16384)));
    try std.testing.expectEqual(cf128.init(0x0p+0, 0x8p-972), tan(cf128.init(0x0p+0, 0x8p-972)));
    try std.testing.expectEqual(cf128.init(0x0p+0, -0x4p-128), tan(cf128.init(0x0p+0, -0x4p-128)));
    try std.testing.expectEqual(cf128.init(0x0p+0, -0x4p-1024), tan(cf128.init(0x0p+0, -0x4p-1024)));
    try std.testing.expectEqual(cf128.init(0x0p+0, -0x4p-16384), tan(cf128.init(0x0p+0, -0x4p-16384)));
    // try std.testing.expectEqual(cf128.init(0x0p+0, -0x2p-16384), tan(cf128.init(0x0p+0, -0x2p-16384)));
    try std.testing.expectEqual(cf128.init(0x0p+0, -0x8p-972), tan(cf128.init(0x0p+0, -0x8p-972)));
    try std.testing.expectEqual(cf128.init(0x0p+0, 0x8p-152), tan(cf128.init(0x0p+0, 0x8p-152)));
    try std.testing.expectEqual(cf128.init(0x0p+0, 0x4p-1076), tan(cf128.init(0x0p+0, 0x4p-1076)));
    // try std.testing.expectEqual(cf128.init(0x0p+0, 0x8p-16448), tan(cf128.init(0x0p+0, 0x8p-16448)));
    // try std.testing.expectEqual(cf128.init(0x0p+0, 0x4p-16448), tan(cf128.init(0x0p+0, 0x4p-16448)));
    // try std.testing.expectEqual(cf128.init(0x0p+0, 0x4p-16496), tan(cf128.init(0x0p+0, 0x4p-16496)));
    try std.testing.expectEqual(cf128.init(0x0p+0, -0x8p-152), tan(cf128.init(0x0p+0, -0x8p-152)));
    try std.testing.expectEqual(cf128.init(0x0p+0, -0x4p-1076), tan(cf128.init(0x0p+0, -0x4p-1076)));
    // try std.testing.expectEqual(cf128.init(0x0p+0, -0x8p-16448), tan(cf128.init(0x0p+0, -0x8p-16448)));
    // try std.testing.expectEqual(cf128.init(0x0p+0, -0x4p-16448), tan(cf128.init(0x0p+0, -0x4p-16448)));
    // try std.testing.expectEqual(cf128.init(0x0p+0, -0x4p-16496), tan(cf128.init(0x0p+0, -0x4p-16496)));
}
